// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_expandEncKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_expandEncKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_expandEncKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state1 = "1";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state2 = "10";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state3 = "100";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state4 = "1000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state5 = "10000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state6 = "100000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state7 = "1000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state8 = "10000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state9 = "100000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state10 = "1000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state11 = "10000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state12 = "100000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<23> aes_expandEncKey::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> aes_expandEncKey::ap_const_lv1_1 = "1";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_1 = "1";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_3 = "11";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_C = "1100";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_D = "1101";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_2 = "10";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_7 = "111";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_A = "1010";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_12 = "10010";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_15 = "10101";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_8 = "1000";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_13 = "10011";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_9 = "1001";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_14 = "10100";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_E = "1110";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_F = "1111";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_4 = "100";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_6 = "110";
const sc_lv<1> aes_expandEncKey::ap_const_lv1_0 = "0";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_11 = "10001";
const sc_lv<5> aes_expandEncKey::ap_const_lv5_4 = "100";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_5 = "101";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_B = "1011";
const sc_lv<6> aes_expandEncKey::ap_const_lv6_14 = "10100";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_10 = "10000";
const sc_lv<32> aes_expandEncKey::ap_const_lv32_16 = "10110";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_1D = "11101";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_1E = "11110";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_1F = "11111";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_1C = "11100";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_1 = "1";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_2 = "10";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_3 = "11";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_C = "1100";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_D = "1101";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_E = "1110";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_F = "1111";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_10 = "10000";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_11 = "10001";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_12 = "10010";
const sc_lv<64> aes_expandEncKey::ap_const_lv64_13 = "10011";
const sc_lv<8> aes_expandEncKey::ap_const_lv8_1 = "1";
const sc_lv<8> aes_expandEncKey::ap_const_lv8_1B = "11011";
const sc_lv<4> aes_expandEncKey::ap_const_lv4_C = "1100";
const sc_lv<4> aes_expandEncKey::ap_const_lv4_D = "1101";
const sc_lv<4> aes_expandEncKey::ap_const_lv4_1 = "1";
const sc_lv<4> aes_expandEncKey::ap_const_lv4_E = "1110";
const sc_lv<4> aes_expandEncKey::ap_const_lv4_2 = "10";
const sc_lv<4> aes_expandEncKey::ap_const_lv4_F = "1111";
const sc_lv<4> aes_expandEncKey::ap_const_lv4_3 = "11";
const sc_lv<5> aes_expandEncKey::ap_const_lv5_1C = "11100";
const sc_lv<6> aes_expandEncKey::ap_const_lv6_4 = "100";
const sc_lv<5> aes_expandEncKey::ap_const_lv5_1D = "11101";
const sc_lv<5> aes_expandEncKey::ap_const_lv5_1 = "1";
const sc_lv<5> aes_expandEncKey::ap_const_lv5_1E = "11110";
const sc_lv<5> aes_expandEncKey::ap_const_lv5_2 = "10";
const sc_lv<5> aes_expandEncKey::ap_const_lv5_1F = "11111";
const sc_lv<5> aes_expandEncKey::ap_const_lv5_3 = "11";

aes_expandEncKey::aes_expandEncKey(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new aes_expandEncKey_dEe("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);
    sbox_U->address2(sbox_address2);
    sbox_U->ce2(sbox_ce2);
    sbox_U->q2(sbox_q2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_68_fu_718_p3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_68_fu_718_p3 );

    SC_METHOD(thread_ap_return);
    sensitive << ( y_20_reg_892 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_68_fu_718_p3 );

    SC_METHOD(thread_grp_fu_473_p2);
    sensitive << ( k_q0 );
    sensitive << ( k_q1 );

    SC_METHOD(thread_grp_fu_479_p2);
    sensitive << ( k_q0 );
    sensitive << ( sbox_q0 );

    SC_METHOD(thread_grp_fu_485_p2);
    sensitive << ( k_q1 );
    sensitive << ( sbox_q1 );

    SC_METHOD(thread_i_2_fu_632_p2);
    sensitive << ( i_reg_451 );

    SC_METHOD(thread_i_3_fu_746_p2);
    sensitive << ( i_1_reg_462 );

    SC_METHOD(thread_k_addr_17_reg_981);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_k_addr_19_reg_991);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_k_addr_21_reg_1001);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_k_addr_23_reg_1011);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_k_addr_3_reg_842);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_k_addr_5_reg_867);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_k_addr_7_reg_877);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_k_addr_reg_832);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_k_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( k_addr_reg_832 );
    sensitive << ( k_addr_5_reg_867 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_66_fu_604_p3 );
    sensitive << ( k_addr_9_reg_914 );
    sensitive << ( k_addr_13_reg_950 );
    sensitive << ( k_addr_17_reg_981 );
    sensitive << ( k_addr_21_reg_1001 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( k_addr_25_reg_1034 );
    sensitive << ( k_addr_29_reg_1060 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_19_fu_622_p1 );
    sensitive << ( tmp_23_fu_643_p1 );
    sensitive << ( tmp_28_fu_663_p1 );
    sensitive << ( tmp_33_fu_683_p1 );
    sensitive << ( tmp_45_fu_736_p1 );
    sensitive << ( tmp_49_fu_757_p1 );
    sensitive << ( tmp_54_fu_777_p1 );
    sensitive << ( tmp_59_fu_797_p1 );

    SC_METHOD(thread_k_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( k_addr_3_reg_842 );
    sensitive << ( k_addr_7_reg_877 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_66_fu_604_p3 );
    sensitive << ( k_addr_11_reg_940 );
    sensitive << ( k_addr_15_reg_961 );
    sensitive << ( k_addr_19_reg_991 );
    sensitive << ( k_addr_23_reg_1011 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( k_addr_27_reg_1050 );
    sensitive << ( k_addr_31_reg_1071 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_20_fu_627_p1 );
    sensitive << ( tmp_25_fu_653_p1 );
    sensitive << ( tmp_30_fu_673_p1 );
    sensitive << ( tmp_35_fu_693_p1 );
    sensitive << ( tmp_46_fu_741_p1 );
    sensitive << ( tmp_51_fu_767_p1 );
    sensitive << ( tmp_56_fu_787_p1 );
    sensitive << ( tmp_61_fu_807_p1 );

    SC_METHOD(thread_k_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_66_fu_604_p3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_k_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_66_fu_604_p3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_k_d0);
    sensitive << ( reg_500 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( reg_511 );
    sensitive << ( reg_516 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_14_reg_882 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_s_fu_557_p2 );

    SC_METHOD(thread_k_d1);
    sensitive << ( reg_500 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( reg_506 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( reg_521 );
    sensitive << ( tmp_12_reg_857 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_16_reg_887 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_k_we0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_k_we1);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_11_fu_526_p1 );
    sensitive << ( tmp_fu_531_p1 );
    sensitive << ( tmp_17_fu_698_p1 );
    sensitive << ( tmp_40_fu_708_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_13_fu_542_p1 );
    sensitive << ( tmp_38_fu_703_p1 );
    sensitive << ( tmp_42_fu_713_p1 );

    SC_METHOD(thread_sbox_address2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_15_fu_547_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_sbox_ce2);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp1_fu_551_p2);
    sensitive << ( rc_read );
    sensitive << ( reg_491 );

    SC_METHOD(thread_tmp_11_fu_526_p1);
    sensitive << ( reg_495 );

    SC_METHOD(thread_tmp_12_fu_536_p2);
    sensitive << ( k_q1 );
    sensitive << ( sbox_q0 );

    SC_METHOD(thread_tmp_13_fu_542_p1);
    sensitive << ( reg_495 );

    SC_METHOD(thread_tmp_14_fu_564_p2);
    sensitive << ( k_q0 );
    sensitive << ( sbox_q1 );

    SC_METHOD(thread_tmp_15_fu_547_p1);
    sensitive << ( k_load_6_reg_847 );

    SC_METHOD(thread_tmp_16_fu_570_p2);
    sensitive << ( k_q1 );
    sensitive << ( sbox_q2 );

    SC_METHOD(thread_tmp_17_fu_698_p1);
    sensitive << ( reg_491 );

    SC_METHOD(thread_tmp_18_fu_616_p2);
    sensitive << ( tmp_67_fu_612_p1 );

    SC_METHOD(thread_tmp_19_fu_622_p1);
    sensitive << ( tmp_18_fu_616_p2 );

    SC_METHOD(thread_tmp_1_i_fu_590_p2);
    sensitive << ( y_fu_576_p2 );

    SC_METHOD(thread_tmp_20_fu_627_p1);
    sensitive << ( i_reg_451 );

    SC_METHOD(thread_tmp_22_fu_638_p2);
    sensitive << ( tmp_67_reg_899 );

    SC_METHOD(thread_tmp_23_fu_643_p1);
    sensitive << ( tmp_22_fu_638_p2 );

    SC_METHOD(thread_tmp_24_fu_648_p2);
    sensitive << ( tmp_67_reg_899 );

    SC_METHOD(thread_tmp_25_fu_653_p1);
    sensitive << ( tmp_24_fu_648_p2 );

    SC_METHOD(thread_tmp_27_fu_658_p2);
    sensitive << ( tmp_67_reg_899 );

    SC_METHOD(thread_tmp_28_fu_663_p1);
    sensitive << ( tmp_27_fu_658_p2 );

    SC_METHOD(thread_tmp_29_fu_668_p2);
    sensitive << ( tmp_67_reg_899 );

    SC_METHOD(thread_tmp_30_fu_673_p1);
    sensitive << ( tmp_29_fu_668_p2 );

    SC_METHOD(thread_tmp_32_fu_678_p2);
    sensitive << ( tmp_67_reg_899 );

    SC_METHOD(thread_tmp_33_fu_683_p1);
    sensitive << ( tmp_32_fu_678_p2 );

    SC_METHOD(thread_tmp_34_fu_688_p2);
    sensitive << ( tmp_67_reg_899 );

    SC_METHOD(thread_tmp_35_fu_693_p1);
    sensitive << ( tmp_34_fu_688_p2 );

    SC_METHOD(thread_tmp_38_fu_703_p1);
    sensitive << ( reg_495 );

    SC_METHOD(thread_tmp_40_fu_708_p1);
    sensitive << ( reg_491 );

    SC_METHOD(thread_tmp_42_fu_713_p1);
    sensitive << ( reg_495 );

    SC_METHOD(thread_tmp_44_fu_730_p2);
    sensitive << ( tmp_69_fu_726_p1 );

    SC_METHOD(thread_tmp_45_fu_736_p1);
    sensitive << ( tmp_44_fu_730_p2 );

    SC_METHOD(thread_tmp_46_fu_741_p1);
    sensitive << ( i_1_reg_462 );

    SC_METHOD(thread_tmp_48_fu_752_p2);
    sensitive << ( tmp_69_reg_1019 );

    SC_METHOD(thread_tmp_49_fu_757_p1);
    sensitive << ( tmp_48_fu_752_p2 );

    SC_METHOD(thread_tmp_50_fu_762_p2);
    sensitive << ( tmp_69_reg_1019 );

    SC_METHOD(thread_tmp_51_fu_767_p1);
    sensitive << ( tmp_50_fu_762_p2 );

    SC_METHOD(thread_tmp_53_fu_772_p2);
    sensitive << ( tmp_69_reg_1019 );

    SC_METHOD(thread_tmp_54_fu_777_p1);
    sensitive << ( tmp_53_fu_772_p2 );

    SC_METHOD(thread_tmp_55_fu_782_p2);
    sensitive << ( tmp_69_reg_1019 );

    SC_METHOD(thread_tmp_56_fu_787_p1);
    sensitive << ( tmp_55_fu_782_p2 );

    SC_METHOD(thread_tmp_58_fu_792_p2);
    sensitive << ( tmp_69_reg_1019 );

    SC_METHOD(thread_tmp_59_fu_797_p1);
    sensitive << ( tmp_58_fu_792_p2 );

    SC_METHOD(thread_tmp_60_fu_802_p2);
    sensitive << ( tmp_69_reg_1019 );

    SC_METHOD(thread_tmp_61_fu_807_p1);
    sensitive << ( tmp_60_fu_802_p2 );

    SC_METHOD(thread_tmp_65_fu_582_p3);
    sensitive << ( rc_read );

    SC_METHOD(thread_tmp_66_fu_604_p3);
    sensitive << ( i_reg_451 );

    SC_METHOD(thread_tmp_67_fu_612_p1);
    sensitive << ( i_reg_451 );

    SC_METHOD(thread_tmp_68_fu_718_p3);
    sensitive << ( i_1_reg_462 );

    SC_METHOD(thread_tmp_69_fu_726_p1);
    sensitive << ( i_1_reg_462 );

    SC_METHOD(thread_tmp_fu_531_p1);
    sensitive << ( reg_491 );

    SC_METHOD(thread_tmp_s_fu_557_p2);
    sensitive << ( sbox_q0 );
    sensitive << ( tmp1_fu_551_p2 );

    SC_METHOD(thread_y_20_fu_596_p3);
    sensitive << ( y_fu_576_p2 );
    sensitive << ( tmp_65_fu_582_p3 );
    sensitive << ( tmp_1_i_fu_590_p2 );

    SC_METHOD(thread_y_fu_576_p2);
    sensitive << ( rc_read );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_66_fu_604_p3 );
    sensitive << ( tmp_68_fu_718_p3 );

    ap_CS_fsm = "00000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_expandEncKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, k_address0, "(port)k_address0");
    sc_trace(mVcdFile, k_ce0, "(port)k_ce0");
    sc_trace(mVcdFile, k_we0, "(port)k_we0");
    sc_trace(mVcdFile, k_d0, "(port)k_d0");
    sc_trace(mVcdFile, k_q0, "(port)k_q0");
    sc_trace(mVcdFile, k_address1, "(port)k_address1");
    sc_trace(mVcdFile, k_ce1, "(port)k_ce1");
    sc_trace(mVcdFile, k_we1, "(port)k_we1");
    sc_trace(mVcdFile, k_d1, "(port)k_d1");
    sc_trace(mVcdFile, k_q1, "(port)k_q1");
    sc_trace(mVcdFile, rc_read, "(port)rc_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, sbox_address2, "sbox_address2");
    sc_trace(mVcdFile, sbox_ce2, "sbox_ce2");
    sc_trace(mVcdFile, sbox_q2, "sbox_q2");
    sc_trace(mVcdFile, reg_491, "reg_491");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, reg_495, "reg_495");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_473_p2, "grp_fu_473_p2");
    sc_trace(mVcdFile, reg_500, "reg_500");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, reg_506, "reg_506");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, reg_511, "reg_511");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_fu_479_p2, "grp_fu_479_p2");
    sc_trace(mVcdFile, reg_516, "reg_516");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_fu_485_p2, "grp_fu_485_p2");
    sc_trace(mVcdFile, reg_521, "reg_521");
    sc_trace(mVcdFile, k_addr_reg_832, "k_addr_reg_832");
    sc_trace(mVcdFile, k_addr_3_reg_842, "k_addr_3_reg_842");
    sc_trace(mVcdFile, k_load_6_reg_847, "k_load_6_reg_847");
    sc_trace(mVcdFile, tmp_12_fu_536_p2, "tmp_12_fu_536_p2");
    sc_trace(mVcdFile, tmp_12_reg_857, "tmp_12_reg_857");
    sc_trace(mVcdFile, k_addr_5_reg_867, "k_addr_5_reg_867");
    sc_trace(mVcdFile, k_addr_7_reg_877, "k_addr_7_reg_877");
    sc_trace(mVcdFile, tmp_14_fu_564_p2, "tmp_14_fu_564_p2");
    sc_trace(mVcdFile, tmp_14_reg_882, "tmp_14_reg_882");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_16_fu_570_p2, "tmp_16_fu_570_p2");
    sc_trace(mVcdFile, tmp_16_reg_887, "tmp_16_reg_887");
    sc_trace(mVcdFile, y_20_fu_596_p3, "y_20_fu_596_p3");
    sc_trace(mVcdFile, y_20_reg_892, "y_20_reg_892");
    sc_trace(mVcdFile, tmp_67_fu_612_p1, "tmp_67_fu_612_p1");
    sc_trace(mVcdFile, tmp_67_reg_899, "tmp_67_reg_899");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_66_fu_604_p3, "tmp_66_fu_604_p3");
    sc_trace(mVcdFile, k_addr_9_reg_914, "k_addr_9_reg_914");
    sc_trace(mVcdFile, i_2_fu_632_p2, "i_2_fu_632_p2");
    sc_trace(mVcdFile, i_2_reg_920, "i_2_reg_920");
    sc_trace(mVcdFile, k_addr_11_reg_940, "k_addr_11_reg_940");
    sc_trace(mVcdFile, k_addr_13_reg_950, "k_addr_13_reg_950");
    sc_trace(mVcdFile, k_addr_15_reg_961, "k_addr_15_reg_961");
    sc_trace(mVcdFile, k_addr_17_reg_981, "k_addr_17_reg_981");
    sc_trace(mVcdFile, k_addr_19_reg_991, "k_addr_19_reg_991");
    sc_trace(mVcdFile, k_addr_21_reg_1001, "k_addr_21_reg_1001");
    sc_trace(mVcdFile, k_addr_23_reg_1011, "k_addr_23_reg_1011");
    sc_trace(mVcdFile, tmp_69_fu_726_p1, "tmp_69_fu_726_p1");
    sc_trace(mVcdFile, tmp_69_reg_1019, "tmp_69_reg_1019");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, tmp_68_fu_718_p3, "tmp_68_fu_718_p3");
    sc_trace(mVcdFile, k_addr_25_reg_1034, "k_addr_25_reg_1034");
    sc_trace(mVcdFile, i_3_fu_746_p2, "i_3_fu_746_p2");
    sc_trace(mVcdFile, i_3_reg_1040, "i_3_reg_1040");
    sc_trace(mVcdFile, k_addr_27_reg_1050, "k_addr_27_reg_1050");
    sc_trace(mVcdFile, k_addr_29_reg_1060, "k_addr_29_reg_1060");
    sc_trace(mVcdFile, k_addr_31_reg_1071, "k_addr_31_reg_1071");
    sc_trace(mVcdFile, i_reg_451, "i_reg_451");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i_1_reg_462, "i_1_reg_462");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, tmp_11_fu_526_p1, "tmp_11_fu_526_p1");
    sc_trace(mVcdFile, tmp_fu_531_p1, "tmp_fu_531_p1");
    sc_trace(mVcdFile, tmp_13_fu_542_p1, "tmp_13_fu_542_p1");
    sc_trace(mVcdFile, tmp_15_fu_547_p1, "tmp_15_fu_547_p1");
    sc_trace(mVcdFile, tmp_19_fu_622_p1, "tmp_19_fu_622_p1");
    sc_trace(mVcdFile, tmp_20_fu_627_p1, "tmp_20_fu_627_p1");
    sc_trace(mVcdFile, tmp_23_fu_643_p1, "tmp_23_fu_643_p1");
    sc_trace(mVcdFile, tmp_25_fu_653_p1, "tmp_25_fu_653_p1");
    sc_trace(mVcdFile, tmp_28_fu_663_p1, "tmp_28_fu_663_p1");
    sc_trace(mVcdFile, tmp_30_fu_673_p1, "tmp_30_fu_673_p1");
    sc_trace(mVcdFile, tmp_33_fu_683_p1, "tmp_33_fu_683_p1");
    sc_trace(mVcdFile, tmp_35_fu_693_p1, "tmp_35_fu_693_p1");
    sc_trace(mVcdFile, tmp_17_fu_698_p1, "tmp_17_fu_698_p1");
    sc_trace(mVcdFile, tmp_38_fu_703_p1, "tmp_38_fu_703_p1");
    sc_trace(mVcdFile, tmp_40_fu_708_p1, "tmp_40_fu_708_p1");
    sc_trace(mVcdFile, tmp_42_fu_713_p1, "tmp_42_fu_713_p1");
    sc_trace(mVcdFile, tmp_45_fu_736_p1, "tmp_45_fu_736_p1");
    sc_trace(mVcdFile, tmp_46_fu_741_p1, "tmp_46_fu_741_p1");
    sc_trace(mVcdFile, tmp_49_fu_757_p1, "tmp_49_fu_757_p1");
    sc_trace(mVcdFile, tmp_51_fu_767_p1, "tmp_51_fu_767_p1");
    sc_trace(mVcdFile, tmp_54_fu_777_p1, "tmp_54_fu_777_p1");
    sc_trace(mVcdFile, tmp_56_fu_787_p1, "tmp_56_fu_787_p1");
    sc_trace(mVcdFile, tmp_59_fu_797_p1, "tmp_59_fu_797_p1");
    sc_trace(mVcdFile, tmp_61_fu_807_p1, "tmp_61_fu_807_p1");
    sc_trace(mVcdFile, tmp_s_fu_557_p2, "tmp_s_fu_557_p2");
    sc_trace(mVcdFile, tmp1_fu_551_p2, "tmp1_fu_551_p2");
    sc_trace(mVcdFile, y_fu_576_p2, "y_fu_576_p2");
    sc_trace(mVcdFile, tmp_65_fu_582_p3, "tmp_65_fu_582_p3");
    sc_trace(mVcdFile, tmp_1_i_fu_590_p2, "tmp_1_i_fu_590_p2");
    sc_trace(mVcdFile, tmp_18_fu_616_p2, "tmp_18_fu_616_p2");
    sc_trace(mVcdFile, tmp_22_fu_638_p2, "tmp_22_fu_638_p2");
    sc_trace(mVcdFile, tmp_24_fu_648_p2, "tmp_24_fu_648_p2");
    sc_trace(mVcdFile, tmp_27_fu_658_p2, "tmp_27_fu_658_p2");
    sc_trace(mVcdFile, tmp_29_fu_668_p2, "tmp_29_fu_668_p2");
    sc_trace(mVcdFile, tmp_32_fu_678_p2, "tmp_32_fu_678_p2");
    sc_trace(mVcdFile, tmp_34_fu_688_p2, "tmp_34_fu_688_p2");
    sc_trace(mVcdFile, tmp_44_fu_730_p2, "tmp_44_fu_730_p2");
    sc_trace(mVcdFile, tmp_48_fu_752_p2, "tmp_48_fu_752_p2");
    sc_trace(mVcdFile, tmp_50_fu_762_p2, "tmp_50_fu_762_p2");
    sc_trace(mVcdFile, tmp_53_fu_772_p2, "tmp_53_fu_772_p2");
    sc_trace(mVcdFile, tmp_55_fu_782_p2, "tmp_55_fu_782_p2");
    sc_trace(mVcdFile, tmp_58_fu_792_p2, "tmp_58_fu_792_p2");
    sc_trace(mVcdFile, tmp_60_fu_802_p2, "tmp_60_fu_802_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes_expandEncKey::~aes_expandEncKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
}

void aes_expandEncKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read()))) {
        i_1_reg_462 = i_3_reg_1040.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read()))) {
        i_1_reg_462 = ap_const_lv6_14;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        i_reg_451 = i_2_reg_920.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        i_reg_451 = ap_const_lv5_4;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        reg_495 = k_q0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())))) {
        reg_495 = k_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0))) {
        i_2_reg_920 = i_2_fu_632_p2.read();
        k_addr_9_reg_914 =  (sc_lv<5>) (tmp_20_fu_627_p1.read());
        tmp_67_reg_899 = tmp_67_fu_612_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_68_fu_718_p3.read()))) {
        i_3_reg_1040 = i_3_fu_746_p2.read();
        k_addr_25_reg_1034 =  (sc_lv<5>) (tmp_46_fu_741_p1.read());
        tmp_69_reg_1019 = tmp_69_fu_726_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        k_addr_11_reg_940 =  (sc_lv<5>) (tmp_25_fu_653_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        k_addr_13_reg_950 =  (sc_lv<5>) (tmp_30_fu_673_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        k_addr_15_reg_961 =  (sc_lv<5>) (tmp_35_fu_693_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        k_addr_27_reg_1050 =  (sc_lv<5>) (tmp_51_fu_767_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        k_addr_29_reg_1060 =  (sc_lv<5>) (tmp_56_fu_787_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        k_addr_31_reg_1071 =  (sc_lv<5>) (tmp_61_fu_807_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        k_load_6_reg_847 = k_q1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())))) {
        reg_491 = k_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())))) {
        reg_500 = grp_fu_473_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())))) {
        reg_506 = grp_fu_473_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())))) {
        reg_511 = grp_fu_473_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())))) {
        reg_516 = grp_fu_479_p2.read();
        reg_521 = grp_fu_485_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        tmp_12_reg_857 = tmp_12_fu_536_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        tmp_14_reg_882 = tmp_14_fu_564_p2.read();
        tmp_16_reg_887 = tmp_16_fu_570_p2.read();
        y_20_reg_892 = y_20_fu_596_p3.read();
    }
}

void aes_expandEncKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void aes_expandEncKey::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void aes_expandEncKey::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read().range(10, 10);
}

void aes_expandEncKey::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void aes_expandEncKey::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void aes_expandEncKey::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read().range(13, 13);
}

void aes_expandEncKey::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read().range(14, 14);
}

void aes_expandEncKey::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read().range(15, 15);
}

void aes_expandEncKey::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read().range(16, 16);
}

void aes_expandEncKey::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read().range(17, 17);
}

void aes_expandEncKey::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read().range(18, 18);
}

void aes_expandEncKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void aes_expandEncKey::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read().range(19, 19);
}

void aes_expandEncKey::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read().range(20, 20);
}

void aes_expandEncKey::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read().range(21, 21);
}

void aes_expandEncKey::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read().range(22, 22);
}

void aes_expandEncKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void aes_expandEncKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void aes_expandEncKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void aes_expandEncKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void aes_expandEncKey::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void aes_expandEncKey::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void aes_expandEncKey::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void aes_expandEncKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_68_fu_718_p3.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_68_fu_718_p3.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_ap_return() {
    ap_return = y_20_reg_892.read();
}

void aes_expandEncKey::thread_grp_fu_473_p2() {
    grp_fu_473_p2 = (k_q1.read() ^ k_q0.read());
}

void aes_expandEncKey::thread_grp_fu_479_p2() {
    grp_fu_479_p2 = (k_q0.read() ^ sbox_q0.read());
}

void aes_expandEncKey::thread_grp_fu_485_p2() {
    grp_fu_485_p2 = (k_q1.read() ^ sbox_q1.read());
}

void aes_expandEncKey::thread_i_2_fu_632_p2() {
    i_2_fu_632_p2 = (!ap_const_lv5_4.is_01() || !i_reg_451.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ap_const_lv5_4) + sc_biguint<5>(i_reg_451.read()));
}

void aes_expandEncKey::thread_i_3_fu_746_p2() {
    i_3_fu_746_p2 = (!ap_const_lv6_4.is_01() || !i_1_reg_462.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_4) + sc_biguint<6>(i_1_reg_462.read()));
}

void aes_expandEncKey::thread_k_addr_17_reg_981() {
    k_addr_17_reg_981 =  (sc_lv<5>) (ap_const_lv64_10);
}

void aes_expandEncKey::thread_k_addr_19_reg_991() {
    k_addr_19_reg_991 =  (sc_lv<5>) (ap_const_lv64_11);
}

void aes_expandEncKey::thread_k_addr_21_reg_1001() {
    k_addr_21_reg_1001 =  (sc_lv<5>) (ap_const_lv64_12);
}

void aes_expandEncKey::thread_k_addr_23_reg_1011() {
    k_addr_23_reg_1011 =  (sc_lv<5>) (ap_const_lv64_13);
}

void aes_expandEncKey::thread_k_addr_3_reg_842() {
    k_addr_3_reg_842 =  (sc_lv<5>) (ap_const_lv64_1);
}

void aes_expandEncKey::thread_k_addr_5_reg_867() {
    k_addr_5_reg_867 =  (sc_lv<5>) (ap_const_lv64_2);
}

void aes_expandEncKey::thread_k_addr_7_reg_877() {
    k_addr_7_reg_877 =  (sc_lv<5>) (ap_const_lv64_3);
}

void aes_expandEncKey::thread_k_addr_reg_832() {
    k_addr_reg_832 =  (sc_lv<5>) (ap_const_lv64_0);
}

void aes_expandEncKey::thread_k_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read()))) {
        k_address0 = k_addr_29_reg_1060.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()))) {
        k_address0 = k_addr_25_reg_1034.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        k_address0 =  (sc_lv<5>) (tmp_59_fu_797_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        k_address0 =  (sc_lv<5>) (tmp_54_fu_777_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        k_address0 =  (sc_lv<5>) (tmp_49_fu_757_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()))) {
        k_address0 =  (sc_lv<5>) (tmp_45_fu_736_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read()))) {
        k_address0 = k_addr_21_reg_1001.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        k_address0 = k_addr_17_reg_981.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        k_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        k_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        k_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        k_address0 = k_addr_13_reg_950.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        k_address0 = k_addr_9_reg_914.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        k_address0 =  (sc_lv<5>) (tmp_33_fu_683_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        k_address0 =  (sc_lv<5>) (tmp_28_fu_663_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        k_address0 =  (sc_lv<5>) (tmp_23_fu_643_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                !esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0))) {
        k_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0))) {
        k_address0 =  (sc_lv<5>) (tmp_19_fu_622_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        k_address0 = k_addr_5_reg_867.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        k_address0 = k_addr_reg_832.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        k_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        k_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        k_address0 =  (sc_lv<5>) (ap_const_lv64_1F);
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        k_address0 =  (sc_lv<5>) (ap_const_lv64_1D);
    } else {
        k_address0 = "XXXXX";
    }
}

void aes_expandEncKey::thread_k_address1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read()))) {
        k_address1 = k_addr_31_reg_1071.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()))) {
        k_address1 = k_addr_27_reg_1050.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        k_address1 =  (sc_lv<5>) (tmp_61_fu_807_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        k_address1 =  (sc_lv<5>) (tmp_56_fu_787_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        k_address1 =  (sc_lv<5>) (tmp_51_fu_767_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()))) {
        k_address1 =  (sc_lv<5>) (tmp_46_fu_741_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read()))) {
        k_address1 = k_addr_23_reg_1011.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        k_address1 = k_addr_19_reg_991.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        k_address1 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        k_address1 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        k_address1 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        k_address1 = k_addr_15_reg_961.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        k_address1 = k_addr_11_reg_940.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        k_address1 =  (sc_lv<5>) (tmp_35_fu_693_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        k_address1 =  (sc_lv<5>) (tmp_30_fu_673_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        k_address1 =  (sc_lv<5>) (tmp_25_fu_653_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                !esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0))) {
        k_address1 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0))) {
        k_address1 =  (sc_lv<5>) (tmp_20_fu_627_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        k_address1 = k_addr_7_reg_877.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        k_address1 = k_addr_3_reg_842.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        k_address1 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        k_address1 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        k_address1 =  (sc_lv<5>) (ap_const_lv64_1C);
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        k_address1 =  (sc_lv<5>) (ap_const_lv64_1E);
    } else {
        k_address1 = "XXXXX";
    }
}

void aes_expandEncKey::thread_k_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
          !esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        k_ce0 = ap_const_logic_1;
    } else {
        k_ce0 = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_k_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
          !esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        k_ce1 = ap_const_logic_1;
    } else {
        k_ce1 = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_k_d0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())))) {
        k_d0 = reg_516.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        k_d0 = reg_511.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())))) {
        k_d0 = reg_500.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        k_d0 = tmp_14_reg_882.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        k_d0 = tmp_s_fu_557_p2.read();
    } else {
        k_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_expandEncKey::thread_k_d1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())))) {
        k_d1 = reg_521.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        k_d1 = reg_500.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())))) {
        k_d1 = reg_506.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        k_d1 = tmp_16_reg_887.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        k_d1 = tmp_12_reg_857.read();
    } else {
        k_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_expandEncKey::thread_k_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        k_we0 = ap_const_logic_1;
    } else {
        k_we0 = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_k_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        k_we1 = ap_const_logic_1;
    } else {
        k_we1 = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_sbox_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_40_fu_708_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_17_fu_698_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_fu_531_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_11_fu_526_p1.read());
    } else {
        sbox_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_expandEncKey::thread_sbox_address1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        sbox_address1 =  (sc_lv<8>) (tmp_42_fu_713_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        sbox_address1 =  (sc_lv<8>) (tmp_38_fu_703_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        sbox_address1 =  (sc_lv<8>) (tmp_13_fu_542_p1.read());
    } else {
        sbox_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_expandEncKey::thread_sbox_address2() {
    sbox_address2 =  (sc_lv<8>) (tmp_15_fu_547_p1.read());
}

void aes_expandEncKey::thread_sbox_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_sbox_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())))) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_sbox_ce2() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        sbox_ce2 = ap_const_logic_1;
    } else {
        sbox_ce2 = ap_const_logic_0;
    }
}

void aes_expandEncKey::thread_tmp1_fu_551_p2() {
    tmp1_fu_551_p2 = (reg_491.read() ^ rc_read.read());
}

void aes_expandEncKey::thread_tmp_11_fu_526_p1() {
    tmp_11_fu_526_p1 = esl_zext<64,8>(reg_495.read());
}

void aes_expandEncKey::thread_tmp_12_fu_536_p2() {
    tmp_12_fu_536_p2 = (k_q1.read() ^ sbox_q0.read());
}

void aes_expandEncKey::thread_tmp_13_fu_542_p1() {
    tmp_13_fu_542_p1 = esl_zext<64,8>(reg_495.read());
}

void aes_expandEncKey::thread_tmp_14_fu_564_p2() {
    tmp_14_fu_564_p2 = (k_q0.read() ^ sbox_q1.read());
}

void aes_expandEncKey::thread_tmp_15_fu_547_p1() {
    tmp_15_fu_547_p1 = esl_zext<64,8>(k_load_6_reg_847.read());
}

void aes_expandEncKey::thread_tmp_16_fu_570_p2() {
    tmp_16_fu_570_p2 = (k_q1.read() ^ sbox_q2.read());
}

void aes_expandEncKey::thread_tmp_17_fu_698_p1() {
    tmp_17_fu_698_p1 = esl_zext<64,8>(reg_491.read());
}

void aes_expandEncKey::thread_tmp_18_fu_616_p2() {
    tmp_18_fu_616_p2 = (!ap_const_lv4_C.is_01() || !tmp_67_fu_612_p1.read().is_01())? sc_lv<4>(): (sc_bigint<4>(ap_const_lv4_C) + sc_biguint<4>(tmp_67_fu_612_p1.read()));
}

void aes_expandEncKey::thread_tmp_19_fu_622_p1() {
    tmp_19_fu_622_p1 = esl_zext<64,4>(tmp_18_fu_616_p2.read());
}

void aes_expandEncKey::thread_tmp_1_i_fu_590_p2() {
    tmp_1_i_fu_590_p2 = (y_fu_576_p2.read() ^ ap_const_lv8_1B);
}

void aes_expandEncKey::thread_tmp_20_fu_627_p1() {
    tmp_20_fu_627_p1 = esl_zext<64,5>(i_reg_451.read());
}

void aes_expandEncKey::thread_tmp_22_fu_638_p2() {
    tmp_22_fu_638_p2 = (!ap_const_lv4_D.is_01() || !tmp_67_reg_899.read().is_01())? sc_lv<4>(): (sc_bigint<4>(ap_const_lv4_D) + sc_biguint<4>(tmp_67_reg_899.read()));
}

void aes_expandEncKey::thread_tmp_23_fu_643_p1() {
    tmp_23_fu_643_p1 = esl_zext<64,4>(tmp_22_fu_638_p2.read());
}

void aes_expandEncKey::thread_tmp_24_fu_648_p2() {
    tmp_24_fu_648_p2 = (tmp_67_reg_899.read() | ap_const_lv4_1);
}

void aes_expandEncKey::thread_tmp_25_fu_653_p1() {
    tmp_25_fu_653_p1 = esl_zext<64,4>(tmp_24_fu_648_p2.read());
}

void aes_expandEncKey::thread_tmp_27_fu_658_p2() {
    tmp_27_fu_658_p2 = (!ap_const_lv4_E.is_01() || !tmp_67_reg_899.read().is_01())? sc_lv<4>(): (sc_bigint<4>(ap_const_lv4_E) + sc_biguint<4>(tmp_67_reg_899.read()));
}

void aes_expandEncKey::thread_tmp_28_fu_663_p1() {
    tmp_28_fu_663_p1 = esl_zext<64,4>(tmp_27_fu_658_p2.read());
}

void aes_expandEncKey::thread_tmp_29_fu_668_p2() {
    tmp_29_fu_668_p2 = (tmp_67_reg_899.read() | ap_const_lv4_2);
}

void aes_expandEncKey::thread_tmp_30_fu_673_p1() {
    tmp_30_fu_673_p1 = esl_zext<64,4>(tmp_29_fu_668_p2.read());
}

void aes_expandEncKey::thread_tmp_32_fu_678_p2() {
    tmp_32_fu_678_p2 = (!ap_const_lv4_F.is_01() || !tmp_67_reg_899.read().is_01())? sc_lv<4>(): (sc_bigint<4>(ap_const_lv4_F) + sc_biguint<4>(tmp_67_reg_899.read()));
}

void aes_expandEncKey::thread_tmp_33_fu_683_p1() {
    tmp_33_fu_683_p1 = esl_zext<64,4>(tmp_32_fu_678_p2.read());
}

void aes_expandEncKey::thread_tmp_34_fu_688_p2() {
    tmp_34_fu_688_p2 = (tmp_67_reg_899.read() | ap_const_lv4_3);
}

void aes_expandEncKey::thread_tmp_35_fu_693_p1() {
    tmp_35_fu_693_p1 = esl_zext<64,4>(tmp_34_fu_688_p2.read());
}

void aes_expandEncKey::thread_tmp_38_fu_703_p1() {
    tmp_38_fu_703_p1 = esl_zext<64,8>(reg_495.read());
}

void aes_expandEncKey::thread_tmp_40_fu_708_p1() {
    tmp_40_fu_708_p1 = esl_zext<64,8>(reg_491.read());
}

void aes_expandEncKey::thread_tmp_42_fu_713_p1() {
    tmp_42_fu_713_p1 = esl_zext<64,8>(reg_495.read());
}

void aes_expandEncKey::thread_tmp_44_fu_730_p2() {
    tmp_44_fu_730_p2 = (!ap_const_lv5_1C.is_01() || !tmp_69_fu_726_p1.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1C) + sc_biguint<5>(tmp_69_fu_726_p1.read()));
}

void aes_expandEncKey::thread_tmp_45_fu_736_p1() {
    tmp_45_fu_736_p1 = esl_zext<64,5>(tmp_44_fu_730_p2.read());
}

void aes_expandEncKey::thread_tmp_46_fu_741_p1() {
    tmp_46_fu_741_p1 = esl_zext<64,6>(i_1_reg_462.read());
}

void aes_expandEncKey::thread_tmp_48_fu_752_p2() {
    tmp_48_fu_752_p2 = (!ap_const_lv5_1D.is_01() || !tmp_69_reg_1019.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1D) + sc_biguint<5>(tmp_69_reg_1019.read()));
}

void aes_expandEncKey::thread_tmp_49_fu_757_p1() {
    tmp_49_fu_757_p1 = esl_zext<64,5>(tmp_48_fu_752_p2.read());
}

void aes_expandEncKey::thread_tmp_50_fu_762_p2() {
    tmp_50_fu_762_p2 = (tmp_69_reg_1019.read() | ap_const_lv5_1);
}

void aes_expandEncKey::thread_tmp_51_fu_767_p1() {
    tmp_51_fu_767_p1 = esl_zext<64,5>(tmp_50_fu_762_p2.read());
}

void aes_expandEncKey::thread_tmp_53_fu_772_p2() {
    tmp_53_fu_772_p2 = (!ap_const_lv5_1E.is_01() || !tmp_69_reg_1019.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1E) + sc_biguint<5>(tmp_69_reg_1019.read()));
}

void aes_expandEncKey::thread_tmp_54_fu_777_p1() {
    tmp_54_fu_777_p1 = esl_zext<64,5>(tmp_53_fu_772_p2.read());
}

void aes_expandEncKey::thread_tmp_55_fu_782_p2() {
    tmp_55_fu_782_p2 = (tmp_69_reg_1019.read() | ap_const_lv5_2);
}

void aes_expandEncKey::thread_tmp_56_fu_787_p1() {
    tmp_56_fu_787_p1 = esl_zext<64,5>(tmp_55_fu_782_p2.read());
}

void aes_expandEncKey::thread_tmp_58_fu_792_p2() {
    tmp_58_fu_792_p2 = (!ap_const_lv5_1F.is_01() || !tmp_69_reg_1019.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1F) + sc_biguint<5>(tmp_69_reg_1019.read()));
}

void aes_expandEncKey::thread_tmp_59_fu_797_p1() {
    tmp_59_fu_797_p1 = esl_zext<64,5>(tmp_58_fu_792_p2.read());
}

void aes_expandEncKey::thread_tmp_60_fu_802_p2() {
    tmp_60_fu_802_p2 = (tmp_69_reg_1019.read() | ap_const_lv5_3);
}

void aes_expandEncKey::thread_tmp_61_fu_807_p1() {
    tmp_61_fu_807_p1 = esl_zext<64,5>(tmp_60_fu_802_p2.read());
}

void aes_expandEncKey::thread_tmp_65_fu_582_p3() {
    tmp_65_fu_582_p3 = rc_read.read().range(7, 7);
}

void aes_expandEncKey::thread_tmp_66_fu_604_p3() {
    tmp_66_fu_604_p3 = i_reg_451.read().range(4, 4);
}

void aes_expandEncKey::thread_tmp_67_fu_612_p1() {
    tmp_67_fu_612_p1 = i_reg_451.read().range(4-1, 0);
}

void aes_expandEncKey::thread_tmp_68_fu_718_p3() {
    tmp_68_fu_718_p3 = i_1_reg_462.read().range(5, 5);
}

void aes_expandEncKey::thread_tmp_69_fu_726_p1() {
    tmp_69_fu_726_p1 = i_1_reg_462.read().range(5-1, 0);
}

void aes_expandEncKey::thread_tmp_fu_531_p1() {
    tmp_fu_531_p1 = esl_zext<64,8>(reg_491.read());
}

void aes_expandEncKey::thread_tmp_s_fu_557_p2() {
    tmp_s_fu_557_p2 = (tmp1_fu_551_p2.read() ^ sbox_q0.read());
}

void aes_expandEncKey::thread_y_20_fu_596_p3() {
    y_20_fu_596_p3 = (!tmp_65_fu_582_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_65_fu_582_p3.read()[0].to_bool())? tmp_1_i_fu_590_p2.read(): y_fu_576_p2.read());
}

void aes_expandEncKey::thread_y_fu_576_p2() {
    y_fu_576_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): rc_read.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void aes_expandEncKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if (!esl_seteq<1,1,1>(tmp_66_fu_604_p3.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_68_fu_718_p3.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<23>) ("XXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

