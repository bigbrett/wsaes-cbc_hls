// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_expandDecKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_expandDecKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_expandDecKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state1 = "1";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state2 = "10";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state3 = "100";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state4 = "1000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state5 = "10000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state6 = "100000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state7 = "1000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state8 = "10000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state9 = "100000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state10 = "1000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state11 = "10000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state12 = "100000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<23> aes_expandDecKey::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> aes_expandDecKey::ap_const_lv1_1 = "1";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_2 = "10";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_5 = "101";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_D = "1101";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_10 = "10000";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_3 = "11";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_E = "1110";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_4 = "100";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_F = "1111";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_7 = "111";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_8 = "1000";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_12 = "10010";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_13 = "10011";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_9 = "1001";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_A = "1010";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_15 = "10101";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_14 = "10100";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_1 = "1";
const sc_lv<1> aes_expandDecKey::ap_const_lv1_0 = "0";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_C = "1100";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_1C = "11100";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_6 = "110";
const sc_lv<4> aes_expandDecKey::ap_const_lv4_C = "1100";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_B = "1011";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_11 = "10001";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_C = "1100";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_D = "1101";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_E = "1110";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_F = "1111";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_10 = "10000";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_11 = "10001";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_12 = "10010";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_13 = "10011";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_1D = "11101";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_1E = "11110";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_1F = "11111";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_0 = "00000";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_1 = "1";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_2 = "10";
const sc_lv<5> aes_expandDecKey::ap_const_lv5_3 = "11";
const sc_lv<32> aes_expandDecKey::ap_const_lv32_16 = "10110";
const sc_lv<4> aes_expandDecKey::ap_const_lv4_0 = "0000";
const sc_lv<4> aes_expandDecKey::ap_const_lv4_1 = "1";
const sc_lv<4> aes_expandDecKey::ap_const_lv4_2 = "10";
const sc_lv<4> aes_expandDecKey::ap_const_lv4_F = "1111";
const sc_lv<4> aes_expandDecKey::ap_const_lv4_3 = "11";
const sc_lv<8> aes_expandDecKey::ap_const_lv8_8D = "10001101";
const sc_lv<8> aes_expandDecKey::ap_const_lv8_0 = "00000000";

aes_expandDecKey::aes_expandDecKey(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new aes_expandDecKey_bkb("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ap_return);
    sensitive << ( rc_write_assign_reg_796 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ctx_key_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_388_p2 );
    sensitive << ( ctx_key_addr_1_reg_673 );
    sensitive << ( ctx_key_addr_5_reg_694 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_88_fu_496_p2 );
    sensitive << ( ctx_key_addr_9_reg_744 );
    sensitive << ( ctx_key_addr_13_reg_765 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_63_fu_400_p1 );
    sensitive << ( tmp_67_fu_416_p1 );
    sensitive << ( tmp_72_fu_438_p1 );
    sensitive << ( tmp_77_fu_460_p1 );
    sensitive << ( tmp_102_fu_512_p1 );
    sensitive << ( tmp_106_fu_527_p1 );
    sensitive << ( tmp_111_fu_548_p1 );
    sensitive << ( tmp_116_fu_570_p1 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ctx_key_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_388_p2 );
    sensitive << ( ctx_key_addr_3_reg_684 );
    sensitive << ( ctx_key_addr_7_reg_705 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_88_fu_496_p2 );
    sensitive << ( ctx_key_addr_11_reg_755 );
    sensitive << ( ctx_key_addr_15_reg_776 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_64_fu_405_p1 );
    sensitive << ( tmp_69_fu_427_p1 );
    sensitive << ( tmp_74_fu_449_p1 );
    sensitive << ( tmp_79_fu_471_p1 );
    sensitive << ( tmp_103_fu_517_p1 );
    sensitive << ( tmp_108_fu_538_p1 );
    sensitive << ( tmp_113_fu_559_p1 );
    sensitive << ( tmp_118_fu_581_p1 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ctx_key_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_388_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_88_fu_496_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ctx_key_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_388_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_88_fu_496_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ctx_key_d0);
    sensitive << ( reg_354 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( reg_365 );
    sensitive << ( reg_378 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( tmp_94_reg_800 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ctx_key_d1);
    sensitive << ( reg_354 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( reg_360 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( reg_383 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ctx_key_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ctx_key_we1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_336_p2);
    sensitive << ( ctx_key_q0 );
    sensitive << ( ctx_key_q1 );

    SC_METHOD(thread_grp_fu_342_p2);
    sensitive << ( ctx_key_q0 );
    sensitive << ( sbox_q0 );

    SC_METHOD(thread_grp_fu_348_p2);
    sensitive << ( ctx_key_q1 );
    sensitive << ( sbox_q1 );

    SC_METHOD(thread_i_4_fu_394_p2);
    sensitive << ( i_reg_312 );

    SC_METHOD(thread_i_5_fu_586_p2);
    sensitive << ( i_1_reg_324 );

    SC_METHOD(thread_rc_write_assign_fu_626_p2);
    sensitive << ( tmp_92_fu_618_p3 );
    sensitive << ( tmp_90_fu_611_p1 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( tmp_s_fu_476_p1 );
    sensitive << ( tmp_84_fu_486_p1 );
    sensitive << ( tmp_93_fu_592_p1 );
    sensitive << ( tmp_97_fu_644_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( tmp_82_fu_481_p1 );
    sensitive << ( tmp_86_fu_491_p1 );
    sensitive << ( tmp_95_fu_597_p1 );
    sensitive << ( tmp_99_fu_649_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_tmp1_fu_632_p2);
    sensitive << ( ctx_key_q0 );
    sensitive << ( rc_write_assign_fu_626_p2 );

    SC_METHOD(thread_tmp_101_fu_506_p2);
    sensitive << ( tmp_123_cast_fu_502_p1 );

    SC_METHOD(thread_tmp_102_fu_512_p1);
    sensitive << ( tmp_101_fu_506_p2 );

    SC_METHOD(thread_tmp_103_fu_517_p1);
    sensitive << ( i_1_reg_324 );

    SC_METHOD(thread_tmp_105_fu_522_p2);
    sensitive << ( tmp_123_cast_reg_733 );

    SC_METHOD(thread_tmp_106_fu_527_p1);
    sensitive << ( tmp_105_fu_522_p2 );

    SC_METHOD(thread_tmp_107_fu_532_p2);
    sensitive << ( i_1_reg_324 );

    SC_METHOD(thread_tmp_108_fu_538_p1);
    sensitive << ( tmp_107_fu_532_p2 );

    SC_METHOD(thread_tmp_110_fu_543_p2);
    sensitive << ( tmp_123_cast_reg_733 );

    SC_METHOD(thread_tmp_111_fu_548_p1);
    sensitive << ( tmp_110_fu_543_p2 );

    SC_METHOD(thread_tmp_112_fu_553_p2);
    sensitive << ( i_1_reg_324 );

    SC_METHOD(thread_tmp_113_fu_559_p1);
    sensitive << ( tmp_112_fu_553_p2 );

    SC_METHOD(thread_tmp_115_fu_564_p2);
    sensitive << ( i_1_reg_324 );

    SC_METHOD(thread_tmp_116_fu_570_p1);
    sensitive << ( tmp_115_fu_564_p2 );

    SC_METHOD(thread_tmp_117_fu_575_p2);
    sensitive << ( i_1_reg_324 );

    SC_METHOD(thread_tmp_118_fu_581_p1);
    sensitive << ( tmp_117_fu_575_p2 );

    SC_METHOD(thread_tmp_123_cast_fu_502_p1);
    sensitive << ( i_1_reg_324 );

    SC_METHOD(thread_tmp_63_fu_400_p1);
    sensitive << ( i_4_fu_394_p2 );

    SC_METHOD(thread_tmp_64_fu_405_p1);
    sensitive << ( i_reg_312 );

    SC_METHOD(thread_tmp_66_fu_410_p2);
    sensitive << ( i_reg_312 );

    SC_METHOD(thread_tmp_67_fu_416_p1);
    sensitive << ( tmp_66_fu_410_p2 );

    SC_METHOD(thread_tmp_68_fu_421_p2);
    sensitive << ( i_reg_312 );

    SC_METHOD(thread_tmp_69_fu_427_p1);
    sensitive << ( tmp_68_fu_421_p2 );

    SC_METHOD(thread_tmp_71_fu_432_p2);
    sensitive << ( i_reg_312 );

    SC_METHOD(thread_tmp_72_fu_438_p1);
    sensitive << ( tmp_71_fu_432_p2 );

    SC_METHOD(thread_tmp_73_fu_443_p2);
    sensitive << ( i_reg_312 );

    SC_METHOD(thread_tmp_74_fu_449_p1);
    sensitive << ( tmp_73_fu_443_p2 );

    SC_METHOD(thread_tmp_76_fu_454_p2);
    sensitive << ( i_reg_312 );

    SC_METHOD(thread_tmp_77_fu_460_p1);
    sensitive << ( tmp_76_fu_454_p2 );

    SC_METHOD(thread_tmp_78_fu_465_p2);
    sensitive << ( i_reg_312 );

    SC_METHOD(thread_tmp_79_fu_471_p1);
    sensitive << ( tmp_78_fu_465_p2 );

    SC_METHOD(thread_tmp_82_fu_481_p1);
    sensitive << ( reg_374 );

    SC_METHOD(thread_tmp_84_fu_486_p1);
    sensitive << ( reg_370 );

    SC_METHOD(thread_tmp_86_fu_491_p1);
    sensitive << ( reg_374 );

    SC_METHOD(thread_tmp_88_fu_496_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( i_1_reg_324 );

    SC_METHOD(thread_tmp_89_fu_602_p4);
    sensitive << ( rc_read );

    SC_METHOD(thread_tmp_90_fu_611_p1);
    sensitive << ( tmp_89_fu_602_p4 );

    SC_METHOD(thread_tmp_91_fu_615_p1);
    sensitive << ( rc_read );

    SC_METHOD(thread_tmp_92_fu_618_p3);
    sensitive << ( tmp_91_fu_615_p1 );

    SC_METHOD(thread_tmp_93_fu_592_p1);
    sensitive << ( reg_370 );

    SC_METHOD(thread_tmp_94_fu_638_p2);
    sensitive << ( sbox_q0 );
    sensitive << ( tmp1_fu_632_p2 );

    SC_METHOD(thread_tmp_95_fu_597_p1);
    sensitive << ( reg_374 );

    SC_METHOD(thread_tmp_97_fu_644_p1);
    sensitive << ( reg_370 );

    SC_METHOD(thread_tmp_99_fu_649_p1);
    sensitive << ( reg_374 );

    SC_METHOD(thread_tmp_fu_388_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_312 );

    SC_METHOD(thread_tmp_s_fu_476_p1);
    sensitive << ( reg_370 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_388_p2 );
    sensitive << ( tmp_88_fu_496_p2 );

    ap_CS_fsm = "00000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_expandDecKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rc_read, "(port)rc_read");
    sc_trace(mVcdFile, ctx_key_address0, "(port)ctx_key_address0");
    sc_trace(mVcdFile, ctx_key_ce0, "(port)ctx_key_ce0");
    sc_trace(mVcdFile, ctx_key_we0, "(port)ctx_key_we0");
    sc_trace(mVcdFile, ctx_key_d0, "(port)ctx_key_d0");
    sc_trace(mVcdFile, ctx_key_q0, "(port)ctx_key_q0");
    sc_trace(mVcdFile, ctx_key_address1, "(port)ctx_key_address1");
    sc_trace(mVcdFile, ctx_key_ce1, "(port)ctx_key_ce1");
    sc_trace(mVcdFile, ctx_key_we1, "(port)ctx_key_we1");
    sc_trace(mVcdFile, ctx_key_d1, "(port)ctx_key_d1");
    sc_trace(mVcdFile, ctx_key_q1, "(port)ctx_key_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, grp_fu_336_p2, "grp_fu_336_p2");
    sc_trace(mVcdFile, reg_354, "reg_354");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, reg_360, "reg_360");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, reg_365, "reg_365");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, reg_370, "reg_370");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, reg_374, "reg_374");
    sc_trace(mVcdFile, grp_fu_342_p2, "grp_fu_342_p2");
    sc_trace(mVcdFile, reg_378, "reg_378");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_348_p2, "grp_fu_348_p2");
    sc_trace(mVcdFile, reg_383, "reg_383");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, i_4_fu_394_p2, "i_4_fu_394_p2");
    sc_trace(mVcdFile, i_4_reg_663, "i_4_reg_663");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_388_p2, "tmp_fu_388_p2");
    sc_trace(mVcdFile, ctx_key_addr_1_reg_673, "ctx_key_addr_1_reg_673");
    sc_trace(mVcdFile, ctx_key_addr_3_reg_684, "ctx_key_addr_3_reg_684");
    sc_trace(mVcdFile, ctx_key_addr_5_reg_694, "ctx_key_addr_5_reg_694");
    sc_trace(mVcdFile, ctx_key_addr_7_reg_705, "ctx_key_addr_7_reg_705");
    sc_trace(mVcdFile, tmp_123_cast_fu_502_p1, "tmp_123_cast_fu_502_p1");
    sc_trace(mVcdFile, tmp_123_cast_reg_733, "tmp_123_cast_reg_733");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_88_fu_496_p2, "tmp_88_fu_496_p2");
    sc_trace(mVcdFile, ctx_key_addr_9_reg_744, "ctx_key_addr_9_reg_744");
    sc_trace(mVcdFile, ctx_key_addr_11_reg_755, "ctx_key_addr_11_reg_755");
    sc_trace(mVcdFile, ctx_key_addr_13_reg_765, "ctx_key_addr_13_reg_765");
    sc_trace(mVcdFile, ctx_key_addr_15_reg_776, "ctx_key_addr_15_reg_776");
    sc_trace(mVcdFile, i_5_fu_586_p2, "i_5_fu_586_p2");
    sc_trace(mVcdFile, i_5_reg_781, "i_5_reg_781");
    sc_trace(mVcdFile, rc_write_assign_fu_626_p2, "rc_write_assign_fu_626_p2");
    sc_trace(mVcdFile, rc_write_assign_reg_796, "rc_write_assign_reg_796");
    sc_trace(mVcdFile, tmp_94_fu_638_p2, "tmp_94_fu_638_p2");
    sc_trace(mVcdFile, tmp_94_reg_800, "tmp_94_reg_800");
    sc_trace(mVcdFile, i_reg_312, "i_reg_312");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_1_reg_324, "i_1_reg_324");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, tmp_63_fu_400_p1, "tmp_63_fu_400_p1");
    sc_trace(mVcdFile, tmp_64_fu_405_p1, "tmp_64_fu_405_p1");
    sc_trace(mVcdFile, tmp_67_fu_416_p1, "tmp_67_fu_416_p1");
    sc_trace(mVcdFile, tmp_69_fu_427_p1, "tmp_69_fu_427_p1");
    sc_trace(mVcdFile, tmp_72_fu_438_p1, "tmp_72_fu_438_p1");
    sc_trace(mVcdFile, tmp_74_fu_449_p1, "tmp_74_fu_449_p1");
    sc_trace(mVcdFile, tmp_77_fu_460_p1, "tmp_77_fu_460_p1");
    sc_trace(mVcdFile, tmp_79_fu_471_p1, "tmp_79_fu_471_p1");
    sc_trace(mVcdFile, tmp_s_fu_476_p1, "tmp_s_fu_476_p1");
    sc_trace(mVcdFile, tmp_82_fu_481_p1, "tmp_82_fu_481_p1");
    sc_trace(mVcdFile, tmp_84_fu_486_p1, "tmp_84_fu_486_p1");
    sc_trace(mVcdFile, tmp_86_fu_491_p1, "tmp_86_fu_491_p1");
    sc_trace(mVcdFile, tmp_102_fu_512_p1, "tmp_102_fu_512_p1");
    sc_trace(mVcdFile, tmp_103_fu_517_p1, "tmp_103_fu_517_p1");
    sc_trace(mVcdFile, tmp_106_fu_527_p1, "tmp_106_fu_527_p1");
    sc_trace(mVcdFile, tmp_108_fu_538_p1, "tmp_108_fu_538_p1");
    sc_trace(mVcdFile, tmp_111_fu_548_p1, "tmp_111_fu_548_p1");
    sc_trace(mVcdFile, tmp_113_fu_559_p1, "tmp_113_fu_559_p1");
    sc_trace(mVcdFile, tmp_116_fu_570_p1, "tmp_116_fu_570_p1");
    sc_trace(mVcdFile, tmp_118_fu_581_p1, "tmp_118_fu_581_p1");
    sc_trace(mVcdFile, tmp_93_fu_592_p1, "tmp_93_fu_592_p1");
    sc_trace(mVcdFile, tmp_95_fu_597_p1, "tmp_95_fu_597_p1");
    sc_trace(mVcdFile, tmp_97_fu_644_p1, "tmp_97_fu_644_p1");
    sc_trace(mVcdFile, tmp_99_fu_649_p1, "tmp_99_fu_649_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, tmp_66_fu_410_p2, "tmp_66_fu_410_p2");
    sc_trace(mVcdFile, tmp_68_fu_421_p2, "tmp_68_fu_421_p2");
    sc_trace(mVcdFile, tmp_71_fu_432_p2, "tmp_71_fu_432_p2");
    sc_trace(mVcdFile, tmp_73_fu_443_p2, "tmp_73_fu_443_p2");
    sc_trace(mVcdFile, tmp_76_fu_454_p2, "tmp_76_fu_454_p2");
    sc_trace(mVcdFile, tmp_78_fu_465_p2, "tmp_78_fu_465_p2");
    sc_trace(mVcdFile, tmp_101_fu_506_p2, "tmp_101_fu_506_p2");
    sc_trace(mVcdFile, tmp_105_fu_522_p2, "tmp_105_fu_522_p2");
    sc_trace(mVcdFile, tmp_107_fu_532_p2, "tmp_107_fu_532_p2");
    sc_trace(mVcdFile, tmp_110_fu_543_p2, "tmp_110_fu_543_p2");
    sc_trace(mVcdFile, tmp_112_fu_553_p2, "tmp_112_fu_553_p2");
    sc_trace(mVcdFile, tmp_115_fu_564_p2, "tmp_115_fu_564_p2");
    sc_trace(mVcdFile, tmp_117_fu_575_p2, "tmp_117_fu_575_p2");
    sc_trace(mVcdFile, tmp_89_fu_602_p4, "tmp_89_fu_602_p4");
    sc_trace(mVcdFile, tmp_91_fu_615_p1, "tmp_91_fu_615_p1");
    sc_trace(mVcdFile, tmp_92_fu_618_p3, "tmp_92_fu_618_p3");
    sc_trace(mVcdFile, tmp_90_fu_611_p1, "tmp_90_fu_611_p1");
    sc_trace(mVcdFile, tmp1_fu_632_p2, "tmp1_fu_632_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes_expandDecKey::~aes_expandDecKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
}

void aes_expandDecKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()))) {
        i_1_reg_324 = i_5_reg_781.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        i_1_reg_324 = ap_const_lv4_C;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        i_reg_312 = i_4_reg_663.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_312 = ap_const_lv5_1C;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        ctx_key_addr_11_reg_755 =  (sc_lv<5>) (tmp_108_fu_538_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        ctx_key_addr_13_reg_765 =  (sc_lv<5>) (tmp_113_fu_559_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        ctx_key_addr_15_reg_776 =  (sc_lv<5>) (tmp_118_fu_581_p1.read());
        i_5_reg_781 = i_5_fu_586_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && !esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0))) {
        ctx_key_addr_1_reg_673 =  (sc_lv<5>) (tmp_64_fu_405_p1.read());
        i_4_reg_663 = i_4_fu_394_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_key_addr_3_reg_684 =  (sc_lv<5>) (tmp_69_fu_427_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        ctx_key_addr_5_reg_694 =  (sc_lv<5>) (tmp_74_fu_449_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        ctx_key_addr_7_reg_705 =  (sc_lv<5>) (tmp_79_fu_471_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read()))) {
        ctx_key_addr_9_reg_744 =  (sc_lv<5>) (tmp_103_fu_517_p1.read());
        tmp_123_cast_reg_733 = tmp_123_cast_fu_502_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        rc_write_assign_reg_796 = rc_write_assign_fu_626_p2.read();
        tmp_94_reg_800 = tmp_94_fu_638_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())))) {
        reg_354 = grp_fu_336_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())))) {
        reg_360 = grp_fu_336_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())))) {
        reg_365 = grp_fu_336_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())))) {
        reg_370 = ctx_key_q0.read();
        reg_374 = ctx_key_q1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())))) {
        reg_378 = grp_fu_342_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())))) {
        reg_383 = grp_fu_348_p2.read();
    }
}

void aes_expandDecKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void aes_expandDecKey::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void aes_expandDecKey::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read().range(10, 10);
}

void aes_expandDecKey::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void aes_expandDecKey::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void aes_expandDecKey::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read().range(13, 13);
}

void aes_expandDecKey::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read().range(14, 14);
}

void aes_expandDecKey::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read().range(15, 15);
}

void aes_expandDecKey::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read().range(16, 16);
}

void aes_expandDecKey::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read().range(17, 17);
}

void aes_expandDecKey::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read().range(18, 18);
}

void aes_expandDecKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void aes_expandDecKey::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read().range(19, 19);
}

void aes_expandDecKey::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read().range(20, 20);
}

void aes_expandDecKey::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read().range(21, 21);
}

void aes_expandDecKey::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read().range(22, 22);
}

void aes_expandDecKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void aes_expandDecKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void aes_expandDecKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void aes_expandDecKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void aes_expandDecKey::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void aes_expandDecKey::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void aes_expandDecKey::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void aes_expandDecKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_expandDecKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_expandDecKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_expandDecKey::thread_ap_return() {
    ap_return = rc_write_assign_reg_796.read();
}

void aes_expandDecKey::thread_ctx_key_address0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        ctx_key_address0 = ap_const_lv5_2;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())))) {
        ctx_key_address0 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        ctx_key_address0 = ap_const_lv5_1F;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()))) {
        ctx_key_address0 = ctx_key_addr_13_reg_765.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read()))) {
        ctx_key_address0 = ctx_key_addr_9_reg_744.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        ctx_key_address0 =  (sc_lv<5>) (tmp_116_fu_570_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        ctx_key_address0 =  (sc_lv<5>) (tmp_111_fu_548_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        ctx_key_address0 =  (sc_lv<5>) (tmp_106_fu_527_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read()))) {
        ctx_key_address0 = ap_const_lv5_1D;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read()))) {
        ctx_key_address0 =  (sc_lv<5>) (tmp_102_fu_512_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())))) {
        ctx_key_address0 = ap_const_lv5_12;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())))) {
        ctx_key_address0 = ap_const_lv5_10;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        ctx_key_address0 = ap_const_lv5_E;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        ctx_key_address0 = ctx_key_addr_5_reg_694.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        ctx_key_address0 = ctx_key_addr_1_reg_673.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        ctx_key_address0 =  (sc_lv<5>) (tmp_77_fu_460_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        ctx_key_address0 =  (sc_lv<5>) (tmp_72_fu_438_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_key_address0 =  (sc_lv<5>) (tmp_67_fu_416_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0))) {
        ctx_key_address0 = ap_const_lv5_C;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                !esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0))) {
        ctx_key_address0 =  (sc_lv<5>) (tmp_63_fu_400_p1.read());
    } else {
        ctx_key_address0 = "XXXXX";
    }
}

void aes_expandDecKey::thread_ctx_key_address1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        ctx_key_address1 = ap_const_lv5_3;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())))) {
        ctx_key_address1 = ap_const_lv5_1;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        ctx_key_address1 = ap_const_lv5_1C;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()))) {
        ctx_key_address1 = ctx_key_addr_15_reg_776.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read()))) {
        ctx_key_address1 = ctx_key_addr_11_reg_755.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        ctx_key_address1 =  (sc_lv<5>) (tmp_118_fu_581_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        ctx_key_address1 =  (sc_lv<5>) (tmp_113_fu_559_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        ctx_key_address1 =  (sc_lv<5>) (tmp_108_fu_538_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read()))) {
        ctx_key_address1 = ap_const_lv5_1E;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read()))) {
        ctx_key_address1 =  (sc_lv<5>) (tmp_103_fu_517_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())))) {
        ctx_key_address1 = ap_const_lv5_13;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())))) {
        ctx_key_address1 = ap_const_lv5_11;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        ctx_key_address1 = ap_const_lv5_F;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        ctx_key_address1 = ctx_key_addr_7_reg_705.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        ctx_key_address1 = ctx_key_addr_3_reg_684.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        ctx_key_address1 =  (sc_lv<5>) (tmp_79_fu_471_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        ctx_key_address1 =  (sc_lv<5>) (tmp_74_fu_449_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_key_address1 =  (sc_lv<5>) (tmp_69_fu_427_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0))) {
        ctx_key_address1 = ap_const_lv5_D;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                !esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0))) {
        ctx_key_address1 =  (sc_lv<5>) (tmp_64_fu_405_p1.read());
    } else {
        ctx_key_address1 = "XXXXX";
    }
}

void aes_expandDecKey::thread_ctx_key_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        ctx_key_ce0 = ap_const_logic_1;
    } else {
        ctx_key_ce0 = ap_const_logic_0;
    }
}

void aes_expandDecKey::thread_ctx_key_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        ctx_key_ce1 = ap_const_logic_1;
    } else {
        ctx_key_ce1 = ap_const_logic_0;
    }
}

void aes_expandDecKey::thread_ctx_key_d0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()))) {
        ctx_key_d0 = tmp_94_reg_800.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        ctx_key_d0 = reg_378.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())))) {
        ctx_key_d0 = reg_365.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())))) {
        ctx_key_d0 = reg_354.read();
    } else {
        ctx_key_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_expandDecKey::thread_ctx_key_d1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        ctx_key_d1 = reg_383.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())))) {
        ctx_key_d1 = reg_354.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())))) {
        ctx_key_d1 = reg_360.read();
    } else {
        ctx_key_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_expandDecKey::thread_ctx_key_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        ctx_key_we0 = ap_const_logic_1;
    } else {
        ctx_key_we0 = ap_const_logic_0;
    }
}

void aes_expandDecKey::thread_ctx_key_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())))) {
        ctx_key_we1 = ap_const_logic_1;
    } else {
        ctx_key_we1 = ap_const_logic_0;
    }
}

void aes_expandDecKey::thread_grp_fu_336_p2() {
    grp_fu_336_p2 = (ctx_key_q1.read() ^ ctx_key_q0.read());
}

void aes_expandDecKey::thread_grp_fu_342_p2() {
    grp_fu_342_p2 = (ctx_key_q0.read() ^ sbox_q0.read());
}

void aes_expandDecKey::thread_grp_fu_348_p2() {
    grp_fu_348_p2 = (ctx_key_q1.read() ^ sbox_q1.read());
}

void aes_expandDecKey::thread_i_4_fu_394_p2() {
    i_4_fu_394_p2 = (!i_reg_312.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_312.read()) + sc_bigint<5>(ap_const_lv5_1C));
}

void aes_expandDecKey::thread_i_5_fu_586_p2() {
    i_5_fu_586_p2 = (!i_1_reg_324.read().is_01() || !ap_const_lv4_C.is_01())? sc_lv<4>(): (sc_biguint<4>(i_1_reg_324.read()) + sc_bigint<4>(ap_const_lv4_C));
}

void aes_expandDecKey::thread_rc_write_assign_fu_626_p2() {
    rc_write_assign_fu_626_p2 = (tmp_92_fu_618_p3.read() ^ tmp_90_fu_611_p1.read());
}

void aes_expandDecKey::thread_sbox_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_97_fu_644_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_93_fu_592_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_84_fu_486_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_s_fu_476_p1.read());
    } else {
        sbox_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_expandDecKey::thread_sbox_address1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        sbox_address1 =  (sc_lv<8>) (tmp_99_fu_649_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        sbox_address1 =  (sc_lv<8>) (tmp_95_fu_597_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        sbox_address1 =  (sc_lv<8>) (tmp_86_fu_491_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        sbox_address1 =  (sc_lv<8>) (tmp_82_fu_481_p1.read());
    } else {
        sbox_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_expandDecKey::thread_sbox_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void aes_expandDecKey::thread_sbox_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())))) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void aes_expandDecKey::thread_tmp1_fu_632_p2() {
    tmp1_fu_632_p2 = (ctx_key_q0.read() ^ rc_write_assign_fu_626_p2.read());
}

void aes_expandDecKey::thread_tmp_101_fu_506_p2() {
    tmp_101_fu_506_p2 = (!tmp_123_cast_fu_502_p1.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_123_cast_fu_502_p1.read()) + sc_bigint<5>(ap_const_lv5_1C));
}

void aes_expandDecKey::thread_tmp_102_fu_512_p1() {
    tmp_102_fu_512_p1 = esl_sext<64,5>(tmp_101_fu_506_p2.read());
}

void aes_expandDecKey::thread_tmp_103_fu_517_p1() {
    tmp_103_fu_517_p1 = esl_zext<64,4>(i_1_reg_324.read());
}

void aes_expandDecKey::thread_tmp_105_fu_522_p2() {
    tmp_105_fu_522_p2 = (!tmp_123_cast_reg_733.read().is_01() || !ap_const_lv5_1D.is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_123_cast_reg_733.read()) + sc_biguint<5>(ap_const_lv5_1D));
}

void aes_expandDecKey::thread_tmp_106_fu_527_p1() {
    tmp_106_fu_527_p1 = esl_sext<64,5>(tmp_105_fu_522_p2.read());
}

void aes_expandDecKey::thread_tmp_107_fu_532_p2() {
    tmp_107_fu_532_p2 = (i_1_reg_324.read() | ap_const_lv4_1);
}

void aes_expandDecKey::thread_tmp_108_fu_538_p1() {
    tmp_108_fu_538_p1 = esl_zext<64,4>(tmp_107_fu_532_p2.read());
}

void aes_expandDecKey::thread_tmp_110_fu_543_p2() {
    tmp_110_fu_543_p2 = (!tmp_123_cast_reg_733.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_123_cast_reg_733.read()) + sc_biguint<5>(ap_const_lv5_1E));
}

void aes_expandDecKey::thread_tmp_111_fu_548_p1() {
    tmp_111_fu_548_p1 = esl_sext<64,5>(tmp_110_fu_543_p2.read());
}

void aes_expandDecKey::thread_tmp_112_fu_553_p2() {
    tmp_112_fu_553_p2 = (i_1_reg_324.read() | ap_const_lv4_2);
}

void aes_expandDecKey::thread_tmp_113_fu_559_p1() {
    tmp_113_fu_559_p1 = esl_zext<64,4>(tmp_112_fu_553_p2.read());
}

void aes_expandDecKey::thread_tmp_115_fu_564_p2() {
    tmp_115_fu_564_p2 = (!i_1_reg_324.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(i_1_reg_324.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void aes_expandDecKey::thread_tmp_116_fu_570_p1() {
    tmp_116_fu_570_p1 = esl_zext<64,4>(tmp_115_fu_564_p2.read());
}

void aes_expandDecKey::thread_tmp_117_fu_575_p2() {
    tmp_117_fu_575_p2 = (i_1_reg_324.read() | ap_const_lv4_3);
}

void aes_expandDecKey::thread_tmp_118_fu_581_p1() {
    tmp_118_fu_581_p1 = esl_zext<64,4>(tmp_117_fu_575_p2.read());
}

void aes_expandDecKey::thread_tmp_123_cast_fu_502_p1() {
    tmp_123_cast_fu_502_p1 = esl_zext<5,4>(i_1_reg_324.read());
}

void aes_expandDecKey::thread_tmp_63_fu_400_p1() {
    tmp_63_fu_400_p1 = esl_zext<64,5>(i_4_fu_394_p2.read());
}

void aes_expandDecKey::thread_tmp_64_fu_405_p1() {
    tmp_64_fu_405_p1 = esl_zext<64,5>(i_reg_312.read());
}

void aes_expandDecKey::thread_tmp_66_fu_410_p2() {
    tmp_66_fu_410_p2 = (!i_reg_312.read().is_01() || !ap_const_lv5_1D.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_312.read()) + sc_biguint<5>(ap_const_lv5_1D));
}

void aes_expandDecKey::thread_tmp_67_fu_416_p1() {
    tmp_67_fu_416_p1 = esl_zext<64,5>(tmp_66_fu_410_p2.read());
}

void aes_expandDecKey::thread_tmp_68_fu_421_p2() {
    tmp_68_fu_421_p2 = (i_reg_312.read() | ap_const_lv5_1);
}

void aes_expandDecKey::thread_tmp_69_fu_427_p1() {
    tmp_69_fu_427_p1 = esl_zext<64,5>(tmp_68_fu_421_p2.read());
}

void aes_expandDecKey::thread_tmp_71_fu_432_p2() {
    tmp_71_fu_432_p2 = (!i_reg_312.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_312.read()) + sc_biguint<5>(ap_const_lv5_1E));
}

void aes_expandDecKey::thread_tmp_72_fu_438_p1() {
    tmp_72_fu_438_p1 = esl_zext<64,5>(tmp_71_fu_432_p2.read());
}

void aes_expandDecKey::thread_tmp_73_fu_443_p2() {
    tmp_73_fu_443_p2 = (i_reg_312.read() | ap_const_lv5_2);
}

void aes_expandDecKey::thread_tmp_74_fu_449_p1() {
    tmp_74_fu_449_p1 = esl_zext<64,5>(tmp_73_fu_443_p2.read());
}

void aes_expandDecKey::thread_tmp_76_fu_454_p2() {
    tmp_76_fu_454_p2 = (!i_reg_312.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_312.read()) + sc_biguint<5>(ap_const_lv5_1F));
}

void aes_expandDecKey::thread_tmp_77_fu_460_p1() {
    tmp_77_fu_460_p1 = esl_zext<64,5>(tmp_76_fu_454_p2.read());
}

void aes_expandDecKey::thread_tmp_78_fu_465_p2() {
    tmp_78_fu_465_p2 = (i_reg_312.read() | ap_const_lv5_3);
}

void aes_expandDecKey::thread_tmp_79_fu_471_p1() {
    tmp_79_fu_471_p1 = esl_zext<64,5>(tmp_78_fu_465_p2.read());
}

void aes_expandDecKey::thread_tmp_82_fu_481_p1() {
    tmp_82_fu_481_p1 = esl_zext<64,8>(reg_374.read());
}

void aes_expandDecKey::thread_tmp_84_fu_486_p1() {
    tmp_84_fu_486_p1 = esl_zext<64,8>(reg_370.read());
}

void aes_expandDecKey::thread_tmp_86_fu_491_p1() {
    tmp_86_fu_491_p1 = esl_zext<64,8>(reg_374.read());
}

void aes_expandDecKey::thread_tmp_88_fu_496_p2() {
    tmp_88_fu_496_p2 = (!i_1_reg_324.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_324.read() == ap_const_lv4_0);
}

void aes_expandDecKey::thread_tmp_89_fu_602_p4() {
    tmp_89_fu_602_p4 = rc_read.read().range(7, 1);
}

void aes_expandDecKey::thread_tmp_90_fu_611_p1() {
    tmp_90_fu_611_p1 = esl_zext<8,7>(tmp_89_fu_602_p4.read());
}

void aes_expandDecKey::thread_tmp_91_fu_615_p1() {
    tmp_91_fu_615_p1 = rc_read.read().range(1-1, 0);
}

void aes_expandDecKey::thread_tmp_92_fu_618_p3() {
    tmp_92_fu_618_p3 = (!tmp_91_fu_615_p1.read()[0].is_01())? sc_lv<8>(): ((tmp_91_fu_615_p1.read()[0].to_bool())? ap_const_lv8_8D: ap_const_lv8_0);
}

void aes_expandDecKey::thread_tmp_93_fu_592_p1() {
    tmp_93_fu_592_p1 = esl_zext<64,8>(reg_370.read());
}

void aes_expandDecKey::thread_tmp_94_fu_638_p2() {
    tmp_94_fu_638_p2 = (tmp1_fu_632_p2.read() ^ sbox_q0.read());
}

void aes_expandDecKey::thread_tmp_95_fu_597_p1() {
    tmp_95_fu_597_p1 = esl_zext<64,8>(reg_374.read());
}

void aes_expandDecKey::thread_tmp_97_fu_644_p1() {
    tmp_97_fu_644_p1 = esl_zext<64,8>(reg_370.read());
}

void aes_expandDecKey::thread_tmp_99_fu_649_p1() {
    tmp_99_fu_649_p1 = esl_zext<64,8>(reg_374.read());
}

void aes_expandDecKey::thread_tmp_fu_388_p2() {
    tmp_fu_388_p2 = (!i_reg_312.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): (sc_biguint<5>(i_reg_312.read()) > sc_biguint<5>(ap_const_lv5_10));
}

void aes_expandDecKey::thread_tmp_s_fu_476_p1() {
    tmp_s_fu_476_p1 = esl_zext<64,8>(reg_370.read());
}

void aes_expandDecKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(tmp_fu_388_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_88_fu_496_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<23>) ("XXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

