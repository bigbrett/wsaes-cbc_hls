// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes256_encrypt_ecb.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes256_encrypt_ecb::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes256_encrypt_ecb::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state1 = "1";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state2 = "10";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state3 = "100";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state4 = "1000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state5 = "10000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state6 = "100000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state7 = "1000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state8 = "10000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state9 = "100000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state10 = "1000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state11 = "10000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state12 = "100000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<43> aes256_encrypt_ecb::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> aes256_encrypt_ecb::ap_const_lv1_1 = "1";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_7 = "111";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_13 = "10011";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_1E = "11110";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_C = "1100";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_23 = "100011";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_8 = "1000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_1F = "11111";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_9 = "1001";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_20 = "100000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_A = "1010";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_21 = "100001";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_B = "1011";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_22 = "100010";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_12 = "10010";
const sc_lv<1> aes256_encrypt_ecb::ap_const_lv1_0 = "0";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_27 = "100111";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_1 = "1";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_4 = "100";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_5 = "101";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_14 = "10100";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_19 = "11001";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_1B = "11011";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_1C = "11100";
const sc_lv<5> aes256_encrypt_ecb::ap_const_lv5_10 = "10000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_2 = "10";
const sc_lv<4> aes256_encrypt_ecb::ap_const_lv4_1 = "1";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_6 = "110";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_3 = "11";
const sc_lv<5> aes256_encrypt_ecb::ap_const_lv5_0 = "00000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_11 = "10001";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_16 = "10110";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_1D = "11101";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_17 = "10111";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_28 = "101000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_18 = "11000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_29 = "101001";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_1A = "11010";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_2A = "101010";
const sc_lv<6> aes256_encrypt_ecb::ap_const_lv6_10 = "10000";
const sc_lv<6> aes256_encrypt_ecb::ap_const_lv6_0 = "000000";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_1 = "1";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_5 = "101";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_9 = "1001";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_D = "1101";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_A = "1010";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_2 = "10";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_3 = "11";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_F = "1111";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_B = "1011";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_7 = "111";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_E = "1110";
const sc_lv<64> aes256_encrypt_ecb::ap_const_lv64_6 = "110";
const sc_lv<8> aes256_encrypt_ecb::ap_const_lv8_1 = "1";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_D = "1101";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_E = "1110";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_F = "1111";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_10 = "10000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_15 = "10101";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_24 = "100100";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_25 = "100101";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_26 = "100110";
const sc_lv<5> aes256_encrypt_ecb::ap_const_lv5_1F = "11111";
const sc_lv<5> aes256_encrypt_ecb::ap_const_lv5_F = "1111";
const sc_lv<4> aes256_encrypt_ecb::ap_const_lv4_E = "1110";
const sc_lv<5> aes256_encrypt_ecb::ap_const_lv5_4 = "100";
const sc_lv<4> aes256_encrypt_ecb::ap_const_lv4_2 = "10";
const sc_lv<4> aes256_encrypt_ecb::ap_const_lv4_3 = "11";
const sc_lv<8> aes256_encrypt_ecb::ap_const_lv8_1B = "11011";
const sc_lv<8> aes256_encrypt_ecb::ap_const_lv8_0 = "00000000";

aes256_encrypt_ecb::aes256_encrypt_ecb(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new aes_expandEncKey_dEe("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(ap_var_for_const0);
    sbox_U->ce1(ap_var_for_const1);
    sbox_U->q1(sbox_q1);
    sbox_U->address2(ap_var_for_const0);
    sbox_U->ce2(ap_var_for_const1);
    sbox_U->q2(sbox_q2);
    grp_aes_expandEncKey_fu_368 = new aes_expandEncKey("grp_aes_expandEncKey_fu_368");
    grp_aes_expandEncKey_fu_368->ap_clk(ap_clk);
    grp_aes_expandEncKey_fu_368->ap_rst(ap_rst);
    grp_aes_expandEncKey_fu_368->ap_start(grp_aes_expandEncKey_fu_368_ap_start);
    grp_aes_expandEncKey_fu_368->ap_done(grp_aes_expandEncKey_fu_368_ap_done);
    grp_aes_expandEncKey_fu_368->ap_idle(grp_aes_expandEncKey_fu_368_ap_idle);
    grp_aes_expandEncKey_fu_368->ap_ready(grp_aes_expandEncKey_fu_368_ap_ready);
    grp_aes_expandEncKey_fu_368->k_address0(grp_aes_expandEncKey_fu_368_k_address0);
    grp_aes_expandEncKey_fu_368->k_ce0(grp_aes_expandEncKey_fu_368_k_ce0);
    grp_aes_expandEncKey_fu_368->k_we0(grp_aes_expandEncKey_fu_368_k_we0);
    grp_aes_expandEncKey_fu_368->k_d0(grp_aes_expandEncKey_fu_368_k_d0);
    grp_aes_expandEncKey_fu_368->k_q0(ctx_key_q0);
    grp_aes_expandEncKey_fu_368->k_address1(grp_aes_expandEncKey_fu_368_k_address1);
    grp_aes_expandEncKey_fu_368->k_ce1(grp_aes_expandEncKey_fu_368_k_ce1);
    grp_aes_expandEncKey_fu_368->k_we1(grp_aes_expandEncKey_fu_368_k_we1);
    grp_aes_expandEncKey_fu_368->k_d1(grp_aes_expandEncKey_fu_368_k_d1);
    grp_aes_expandEncKey_fu_368->k_q1(ctx_key_q1);
    grp_aes_expandEncKey_fu_368->rc_read(reg_462);
    grp_aes_expandEncKey_fu_368->ap_return(grp_aes_expandEncKey_fu_368_ap_return);
    grp_aes_addRoundKey_fu_377 = new aes_addRoundKey("grp_aes_addRoundKey_fu_377");
    grp_aes_addRoundKey_fu_377->ap_clk(ap_clk);
    grp_aes_addRoundKey_fu_377->ap_rst(ap_rst);
    grp_aes_addRoundKey_fu_377->ap_start(grp_aes_addRoundKey_fu_377_ap_start);
    grp_aes_addRoundKey_fu_377->ap_done(grp_aes_addRoundKey_fu_377_ap_done);
    grp_aes_addRoundKey_fu_377->ap_idle(grp_aes_addRoundKey_fu_377_ap_idle);
    grp_aes_addRoundKey_fu_377->ap_ready(grp_aes_addRoundKey_fu_377_ap_ready);
    grp_aes_addRoundKey_fu_377->buf_r_address0(grp_aes_addRoundKey_fu_377_buf_r_address0);
    grp_aes_addRoundKey_fu_377->buf_r_ce0(grp_aes_addRoundKey_fu_377_buf_r_ce0);
    grp_aes_addRoundKey_fu_377->buf_r_we0(grp_aes_addRoundKey_fu_377_buf_r_we0);
    grp_aes_addRoundKey_fu_377->buf_r_d0(grp_aes_addRoundKey_fu_377_buf_r_d0);
    grp_aes_addRoundKey_fu_377->buf_r_q0(buf_r_q0);
    grp_aes_addRoundKey_fu_377->key_address0(grp_aes_addRoundKey_fu_377_key_address0);
    grp_aes_addRoundKey_fu_377->key_ce0(grp_aes_addRoundKey_fu_377_key_ce0);
    grp_aes_addRoundKey_fu_377->key_q0(ctx_key_q0);
    grp_aes_addRoundKey_fu_377->key_offset(grp_aes_addRoundKey_fu_377_key_offset);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_aes_addRoundKey_fu_377_ap_done );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_aes_addRoundKey_fu_377_ap_done );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_buf_r_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_fu_544_p3 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_22_fu_483_p1 );
    sensitive << ( buf_addr_22_reg_847 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_i5_fu_528_p2 );
    sensitive << ( buf_addr_26_reg_977 );
    sensitive << ( tmp_98_reg_987 );
    sensitive << ( buf_addr_28_reg_996 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( grp_aes_addRoundKey_fu_377_buf_r_address0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( tmp_5_i_fu_534_p1 );
    sensitive << ( tmp_35_i_fu_567_p1 );
    sensitive << ( tmp_39_i_fu_597_p1 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_buf_r_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_fu_544_p3 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( buf_addr_24_reg_952 );
    sensitive << ( buf_addr_25_reg_966 );
    sensitive << ( buf_addr_27_reg_991 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( buf_addr_23_reg_1034 );
    sensitive << ( tmp_i8_fu_813_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( tmp_i1_fu_552_p1 );
    sensitive << ( tmp_37_i_fu_587_p1 );
    sensitive << ( tmp_5_i1_fu_819_p1 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_buf_r_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_fu_544_p3 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_i5_fu_528_p2 );
    sensitive << ( tmp_98_reg_987 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( grp_aes_expandEncKey_fu_368_ap_done );
    sensitive << ( grp_aes_addRoundKey_fu_377_buf_r_ce0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_buf_r_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_fu_544_p3 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( tmp_i8_fu_813_p2 );
    sensitive << ( grp_aes_expandEncKey_fu_368_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_buf_r_d0);
    sensitive << ( reg_392 );
    sensitive << ( reg_399 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( reg_406 );
    sensitive << ( reg_413 );
    sensitive << ( reg_420 );
    sensitive << ( reg_427 );
    sensitive << ( reg_434 );
    sensitive << ( reg_441 );
    sensitive << ( reg_448 );
    sensitive << ( reg_455 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( tmp_98_reg_987 );
    sensitive << ( tmp_48_i_reg_1006 );
    sensitive << ( tmp_56_i_reg_1016 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( grp_aes_addRoundKey_fu_377_buf_r_d0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( tmp_176_i_fu_505_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_buf_r_d1);
    sensitive << ( sbox_q0 );
    sensitive << ( reg_392 );
    sensitive << ( reg_399 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( reg_406 );
    sensitive << ( reg_413 );
    sensitive << ( reg_420 );
    sensitive << ( reg_427 );
    sensitive << ( reg_434 );
    sensitive << ( reg_441 );
    sensitive << ( reg_448 );
    sensitive << ( reg_455 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( tmp_44_i_reg_1001 );
    sensitive << ( tmp_52_i_reg_1011 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_buf_r_we0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( tmp_98_reg_987 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( grp_aes_expandEncKey_fu_368_ap_done );
    sensitive << ( grp_aes_addRoundKey_fu_377_buf_r_we0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_buf_r_we1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( grp_aes_expandEncKey_fu_368_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_ctx_enckey_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_22_fu_483_p1 );

    SC_METHOD(thread_ctx_enckey_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_179_i_fu_495_p1 );

    SC_METHOD(thread_ctx_enckey_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ctx_enckey_ce1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ctx_key_address0);
    sensitive << ( tmp_i_22_reg_837 );
    sensitive << ( tmp_98_reg_987 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( grp_aes_expandEncKey_fu_368_k_address0 );
    sensitive << ( grp_aes_addRoundKey_fu_377_key_address0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_ctx_key_address1);
    sensitive << ( tmp_179_i_reg_852 );
    sensitive << ( grp_aes_expandEncKey_fu_368_k_address1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_ctx_key_ce0);
    sensitive << ( tmp_98_reg_987 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( grp_aes_expandEncKey_fu_368_k_ce0 );
    sensitive << ( grp_aes_addRoundKey_fu_377_key_ce0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_ctx_key_ce1);
    sensitive << ( grp_aes_expandEncKey_fu_368_k_ce1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_ctx_key_d0);
    sensitive << ( ctx_enckey_q0 );
    sensitive << ( grp_aes_expandEncKey_fu_368_k_d0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_ctx_key_d1);
    sensitive << ( ctx_enckey_q1 );
    sensitive << ( grp_aes_expandEncKey_fu_368_k_d1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_ctx_key_we0);
    sensitive << ( grp_aes_expandEncKey_fu_368_k_we0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_ctx_key_we1);
    sensitive << ( grp_aes_expandEncKey_fu_368_k_we1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_e_fu_614_p2);
    sensitive << ( buf_r_q0 );
    sensitive << ( tmp_41_i_fu_608_p2 );

    SC_METHOD(thread_exitcond_fu_512_p2);
    sensitive << ( i_reg_323 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_aes_addRoundKey_fu_377_ap_start);
    sensitive << ( ap_reg_grp_aes_addRoundKey_fu_377_ap_start );

    SC_METHOD(thread_grp_aes_addRoundKey_fu_377_key_offset);
    sensitive << ( tmp_98_reg_987 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_grp_aes_expandEncKey_fu_368_ap_start);
    sensitive << ( ap_reg_grp_aes_expandEncKey_fu_368_ap_start );

    SC_METHOD(thread_i_25_cast_fu_473_p1);
    sensitive << ( i_25_fu_467_p2 );

    SC_METHOD(thread_i_25_fu_467_p2);
    sensitive << ( i_i_reg_312 );

    SC_METHOD(thread_i_26_cast_fu_809_p1);
    sensitive << ( i_26_fu_803_p2 );

    SC_METHOD(thread_i_26_fu_803_p2);
    sensitive << ( i_i1_reg_357 );

    SC_METHOD(thread_i_27_cast_fu_524_p1);
    sensitive << ( i_27_fu_518_p2 );

    SC_METHOD(thread_i_27_fu_518_p2);
    sensitive << ( i_i4_reg_335 );

    SC_METHOD(thread_i_32_fu_572_p2);
    sensitive << ( i_i2_reg_346 );

    SC_METHOD(thread_i_33_fu_797_p2);
    sensitive << ( i_reg_323 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( tmp_6_i_fu_539_p1 );
    sensitive << ( tmp_6_i1_fu_824_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_tmp1_fu_648_p2);
    sensitive << ( y_21_fu_640_p3 );
    sensitive << ( e_fu_614_p2 );

    SC_METHOD(thread_tmp2_fu_694_p2);
    sensitive << ( e_fu_614_p2 );
    sensitive << ( y_23_fu_686_p3 );

    SC_METHOD(thread_tmp3_fu_740_p2);
    sensitive << ( e_fu_614_p2 );
    sensitive << ( y_25_fu_732_p3 );

    SC_METHOD(thread_tmp_101_fu_626_p3);
    sensitive << ( x_assign_fu_602_p2 );

    SC_METHOD(thread_tmp_103_fu_672_p3);
    sensitive << ( x_assign_9_fu_660_p2 );

    SC_METHOD(thread_tmp_105_fu_718_p3);
    sensitive << ( x_assign_s_fu_706_p2 );

    SC_METHOD(thread_tmp_107_fu_764_p3);
    sensitive << ( x_assign_1_fu_752_p2 );

    SC_METHOD(thread_tmp_176_i_fu_505_p2);
    sensitive << ( buf_r_q0 );
    sensitive << ( ctx_enckey_q0 );

    SC_METHOD(thread_tmp_178_i_fu_489_p2);
    sensitive << ( i_i_reg_312 );

    SC_METHOD(thread_tmp_179_i_fu_495_p1);
    sensitive << ( tmp_178_i_fu_489_p2 );

    SC_METHOD(thread_tmp_1_i10_i_fu_680_p2);
    sensitive << ( y_22_fu_666_p2 );

    SC_METHOD(thread_tmp_1_i14_i_fu_726_p2);
    sensitive << ( y_24_fu_712_p2 );

    SC_METHOD(thread_tmp_1_i18_i_fu_772_p2);
    sensitive << ( y_26_fu_758_p2 );

    SC_METHOD(thread_tmp_1_i_i_fu_634_p2);
    sensitive << ( y_fu_620_p2 );

    SC_METHOD(thread_tmp_34_i_fu_561_p2);
    sensitive << ( tmp_99_fu_557_p1 );

    SC_METHOD(thread_tmp_35_i_fu_567_p1);
    sensitive << ( tmp_34_i_fu_561_p2 );

    SC_METHOD(thread_tmp_36_i_fu_582_p2);
    sensitive << ( tmp_99_reg_971 );

    SC_METHOD(thread_tmp_37_i_fu_587_p1);
    sensitive << ( tmp_36_i_fu_582_p2 );

    SC_METHOD(thread_tmp_38_i_fu_592_p2);
    sensitive << ( tmp_99_reg_971 );

    SC_METHOD(thread_tmp_39_i_fu_597_p1);
    sensitive << ( tmp_38_i_fu_592_p2 );

    SC_METHOD(thread_tmp_41_i_fu_608_p2);
    sensitive << ( buf_r_q1 );
    sensitive << ( x_assign_fu_602_p2 );

    SC_METHOD(thread_tmp_44_i_fu_654_p2);
    sensitive << ( reg_392 );
    sensitive << ( tmp1_fu_648_p2 );

    SC_METHOD(thread_tmp_48_i_fu_700_p2);
    sensitive << ( reg_399 );
    sensitive << ( tmp2_fu_694_p2 );

    SC_METHOD(thread_tmp_52_i_fu_746_p2);
    sensitive << ( buf_r_q1 );
    sensitive << ( tmp3_fu_740_p2 );

    SC_METHOD(thread_tmp_56_i_fu_786_p2);
    sensitive << ( tmp_41_i_fu_608_p2 );
    sensitive << ( y_27_fu_778_p3 );

    SC_METHOD(thread_tmp_5_i1_fu_819_p1);
    sensitive << ( i_26_cast_fu_809_p1 );

    SC_METHOD(thread_tmp_5_i_fu_534_p1);
    sensitive << ( i_27_cast_fu_524_p1 );

    SC_METHOD(thread_tmp_6_i1_fu_824_p1);
    sensitive << ( buf_r_q1 );

    SC_METHOD(thread_tmp_6_i_fu_539_p1);
    sensitive << ( buf_r_q0 );

    SC_METHOD(thread_tmp_98_fu_578_p1);
    sensitive << ( i_reg_323 );

    SC_METHOD(thread_tmp_99_fu_557_p1);
    sensitive << ( i_i2_reg_346 );

    SC_METHOD(thread_tmp_fu_544_p3);
    sensitive << ( i_i2_reg_346 );

    SC_METHOD(thread_tmp_i1_fu_552_p1);
    sensitive << ( i_i2_reg_346 );

    SC_METHOD(thread_tmp_i5_fu_528_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_i4_reg_335 );

    SC_METHOD(thread_tmp_i8_fu_813_p2);
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( i_i1_reg_357 );

    SC_METHOD(thread_tmp_i_22_fu_483_p1);
    sensitive << ( i_25_cast_fu_473_p1 );

    SC_METHOD(thread_tmp_i_fu_477_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_i_reg_312 );

    SC_METHOD(thread_x_assign_1_fu_752_p2);
    sensitive << ( buf_r_q0 );
    sensitive << ( reg_392 );

    SC_METHOD(thread_x_assign_9_fu_660_p2);
    sensitive << ( buf_r_q1 );
    sensitive << ( reg_399 );

    SC_METHOD(thread_x_assign_fu_602_p2);
    sensitive << ( reg_392 );
    sensitive << ( reg_399 );

    SC_METHOD(thread_x_assign_s_fu_706_p2);
    sensitive << ( buf_r_q0 );
    sensitive << ( buf_r_q1 );

    SC_METHOD(thread_y_21_fu_640_p3);
    sensitive << ( y_fu_620_p2 );
    sensitive << ( tmp_101_fu_626_p3 );
    sensitive << ( tmp_1_i_i_fu_634_p2 );

    SC_METHOD(thread_y_22_fu_666_p2);
    sensitive << ( x_assign_9_fu_660_p2 );

    SC_METHOD(thread_y_23_fu_686_p3);
    sensitive << ( y_22_fu_666_p2 );
    sensitive << ( tmp_103_fu_672_p3 );
    sensitive << ( tmp_1_i10_i_fu_680_p2 );

    SC_METHOD(thread_y_24_fu_712_p2);
    sensitive << ( x_assign_s_fu_706_p2 );

    SC_METHOD(thread_y_25_fu_732_p3);
    sensitive << ( y_24_fu_712_p2 );
    sensitive << ( tmp_105_fu_718_p3 );
    sensitive << ( tmp_1_i14_i_fu_726_p2 );

    SC_METHOD(thread_y_26_fu_758_p2);
    sensitive << ( x_assign_1_fu_752_p2 );

    SC_METHOD(thread_y_27_fu_778_p3);
    sensitive << ( y_26_fu_758_p2 );
    sensitive << ( tmp_107_fu_764_p3 );
    sensitive << ( tmp_1_i18_i_fu_772_p2 );

    SC_METHOD(thread_y_fu_620_p2);
    sensitive << ( x_assign_fu_602_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_544_p3 );
    sensitive << ( tmp_98_fu_578_p1 );
    sensitive << ( tmp_i_fu_477_p2 );
    sensitive << ( tmp_i5_fu_528_p2 );
    sensitive << ( tmp_98_reg_987 );
    sensitive << ( grp_aes_addRoundKey_fu_377_ap_done );
    sensitive << ( tmp_i8_fu_813_p2 );
    sensitive << ( grp_aes_expandEncKey_fu_368_ap_done );
    sensitive << ( exitcond_fu_512_p2 );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000000000000000000001";
    ap_reg_grp_aes_expandEncKey_fu_368_ap_start = SC_LOGIC_0;
    ap_reg_grp_aes_addRoundKey_fu_377_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes256_encrypt_ecb_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buf_r_address0, "(port)buf_r_address0");
    sc_trace(mVcdFile, buf_r_ce0, "(port)buf_r_ce0");
    sc_trace(mVcdFile, buf_r_we0, "(port)buf_r_we0");
    sc_trace(mVcdFile, buf_r_d0, "(port)buf_r_d0");
    sc_trace(mVcdFile, buf_r_q0, "(port)buf_r_q0");
    sc_trace(mVcdFile, buf_r_address1, "(port)buf_r_address1");
    sc_trace(mVcdFile, buf_r_ce1, "(port)buf_r_ce1");
    sc_trace(mVcdFile, buf_r_we1, "(port)buf_r_we1");
    sc_trace(mVcdFile, buf_r_d1, "(port)buf_r_d1");
    sc_trace(mVcdFile, buf_r_q1, "(port)buf_r_q1");
    sc_trace(mVcdFile, ctx_enckey_address0, "(port)ctx_enckey_address0");
    sc_trace(mVcdFile, ctx_enckey_ce0, "(port)ctx_enckey_ce0");
    sc_trace(mVcdFile, ctx_enckey_q0, "(port)ctx_enckey_q0");
    sc_trace(mVcdFile, ctx_enckey_address1, "(port)ctx_enckey_address1");
    sc_trace(mVcdFile, ctx_enckey_ce1, "(port)ctx_enckey_ce1");
    sc_trace(mVcdFile, ctx_enckey_q1, "(port)ctx_enckey_q1");
    sc_trace(mVcdFile, ctx_key_address0, "(port)ctx_key_address0");
    sc_trace(mVcdFile, ctx_key_ce0, "(port)ctx_key_ce0");
    sc_trace(mVcdFile, ctx_key_we0, "(port)ctx_key_we0");
    sc_trace(mVcdFile, ctx_key_d0, "(port)ctx_key_d0");
    sc_trace(mVcdFile, ctx_key_q0, "(port)ctx_key_q0");
    sc_trace(mVcdFile, ctx_key_address1, "(port)ctx_key_address1");
    sc_trace(mVcdFile, ctx_key_ce1, "(port)ctx_key_ce1");
    sc_trace(mVcdFile, ctx_key_we1, "(port)ctx_key_we1");
    sc_trace(mVcdFile, ctx_key_d1, "(port)ctx_key_d1");
    sc_trace(mVcdFile, ctx_key_q1, "(port)ctx_key_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, sbox_q2, "sbox_q2");
    sc_trace(mVcdFile, reg_392, "reg_392");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, reg_399, "reg_399");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, reg_406, "reg_406");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, reg_413, "reg_413");
    sc_trace(mVcdFile, reg_420, "reg_420");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, reg_427, "reg_427");
    sc_trace(mVcdFile, reg_434, "reg_434");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, reg_441, "reg_441");
    sc_trace(mVcdFile, reg_448, "reg_448");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, reg_455, "reg_455");
    sc_trace(mVcdFile, reg_462, "reg_462");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, tmp_fu_544_p3, "tmp_fu_544_p3");
    sc_trace(mVcdFile, tmp_98_fu_578_p1, "tmp_98_fu_578_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, i_25_fu_467_p2, "i_25_fu_467_p2");
    sc_trace(mVcdFile, i_25_reg_829, "i_25_reg_829");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_i_22_fu_483_p1, "tmp_i_22_fu_483_p1");
    sc_trace(mVcdFile, tmp_i_22_reg_837, "tmp_i_22_reg_837");
    sc_trace(mVcdFile, tmp_i_fu_477_p2, "tmp_i_fu_477_p2");
    sc_trace(mVcdFile, buf_addr_22_reg_847, "buf_addr_22_reg_847");
    sc_trace(mVcdFile, tmp_179_i_fu_495_p1, "tmp_179_i_fu_495_p1");
    sc_trace(mVcdFile, tmp_179_i_reg_852, "tmp_179_i_reg_852");
    sc_trace(mVcdFile, i_27_fu_518_p2, "i_27_fu_518_p2");
    sc_trace(mVcdFile, i_27_reg_944, "i_27_reg_944");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, buf_addr_24_reg_952, "buf_addr_24_reg_952");
    sc_trace(mVcdFile, tmp_i5_fu_528_p2, "tmp_i5_fu_528_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, buf_addr_25_reg_966, "buf_addr_25_reg_966");
    sc_trace(mVcdFile, tmp_99_fu_557_p1, "tmp_99_fu_557_p1");
    sc_trace(mVcdFile, tmp_99_reg_971, "tmp_99_reg_971");
    sc_trace(mVcdFile, buf_addr_26_reg_977, "buf_addr_26_reg_977");
    sc_trace(mVcdFile, i_32_fu_572_p2, "i_32_fu_572_p2");
    sc_trace(mVcdFile, i_32_reg_982, "i_32_reg_982");
    sc_trace(mVcdFile, tmp_98_reg_987, "tmp_98_reg_987");
    sc_trace(mVcdFile, buf_addr_27_reg_991, "buf_addr_27_reg_991");
    sc_trace(mVcdFile, buf_addr_28_reg_996, "buf_addr_28_reg_996");
    sc_trace(mVcdFile, tmp_44_i_fu_654_p2, "tmp_44_i_fu_654_p2");
    sc_trace(mVcdFile, tmp_44_i_reg_1001, "tmp_44_i_reg_1001");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, tmp_48_i_fu_700_p2, "tmp_48_i_fu_700_p2");
    sc_trace(mVcdFile, tmp_48_i_reg_1006, "tmp_48_i_reg_1006");
    sc_trace(mVcdFile, tmp_52_i_fu_746_p2, "tmp_52_i_fu_746_p2");
    sc_trace(mVcdFile, tmp_52_i_reg_1011, "tmp_52_i_reg_1011");
    sc_trace(mVcdFile, tmp_56_i_fu_786_p2, "tmp_56_i_fu_786_p2");
    sc_trace(mVcdFile, tmp_56_i_reg_1016, "tmp_56_i_reg_1016");
    sc_trace(mVcdFile, i_33_fu_797_p2, "i_33_fu_797_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_ap_done, "grp_aes_addRoundKey_fu_377_ap_done");
    sc_trace(mVcdFile, i_26_fu_803_p2, "i_26_fu_803_p2");
    sc_trace(mVcdFile, i_26_reg_1026, "i_26_reg_1026");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, buf_addr_23_reg_1034, "buf_addr_23_reg_1034");
    sc_trace(mVcdFile, tmp_i8_fu_813_p2, "tmp_i8_fu_813_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_ap_start, "grp_aes_expandEncKey_fu_368_ap_start");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_ap_done, "grp_aes_expandEncKey_fu_368_ap_done");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_ap_idle, "grp_aes_expandEncKey_fu_368_ap_idle");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_ap_ready, "grp_aes_expandEncKey_fu_368_ap_ready");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_k_address0, "grp_aes_expandEncKey_fu_368_k_address0");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_k_ce0, "grp_aes_expandEncKey_fu_368_k_ce0");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_k_we0, "grp_aes_expandEncKey_fu_368_k_we0");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_k_d0, "grp_aes_expandEncKey_fu_368_k_d0");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_k_address1, "grp_aes_expandEncKey_fu_368_k_address1");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_k_ce1, "grp_aes_expandEncKey_fu_368_k_ce1");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_k_we1, "grp_aes_expandEncKey_fu_368_k_we1");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_k_d1, "grp_aes_expandEncKey_fu_368_k_d1");
    sc_trace(mVcdFile, grp_aes_expandEncKey_fu_368_ap_return, "grp_aes_expandEncKey_fu_368_ap_return");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_ap_start, "grp_aes_addRoundKey_fu_377_ap_start");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_ap_idle, "grp_aes_addRoundKey_fu_377_ap_idle");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_ap_ready, "grp_aes_addRoundKey_fu_377_ap_ready");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_buf_r_address0, "grp_aes_addRoundKey_fu_377_buf_r_address0");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_buf_r_ce0, "grp_aes_addRoundKey_fu_377_buf_r_ce0");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_buf_r_we0, "grp_aes_addRoundKey_fu_377_buf_r_we0");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_buf_r_d0, "grp_aes_addRoundKey_fu_377_buf_r_d0");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_key_address0, "grp_aes_addRoundKey_fu_377_key_address0");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_key_ce0, "grp_aes_addRoundKey_fu_377_key_ce0");
    sc_trace(mVcdFile, grp_aes_addRoundKey_fu_377_key_offset, "grp_aes_addRoundKey_fu_377_key_offset");
    sc_trace(mVcdFile, i_i_reg_312, "i_i_reg_312");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_reg_323, "i_reg_323");
    sc_trace(mVcdFile, i_i4_reg_335, "i_i4_reg_335");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, exitcond_fu_512_p2, "exitcond_fu_512_p2");
    sc_trace(mVcdFile, i_i2_reg_346, "i_i2_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, i_i1_reg_357, "i_i1_reg_357");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_reg_grp_aes_expandEncKey_fu_368_ap_start, "ap_reg_grp_aes_expandEncKey_fu_368_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_reg_grp_aes_addRoundKey_fu_377_ap_start, "ap_reg_grp_aes_addRoundKey_fu_377_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, tmp_5_i_fu_534_p1, "tmp_5_i_fu_534_p1");
    sc_trace(mVcdFile, tmp_6_i_fu_539_p1, "tmp_6_i_fu_539_p1");
    sc_trace(mVcdFile, tmp_i1_fu_552_p1, "tmp_i1_fu_552_p1");
    sc_trace(mVcdFile, tmp_35_i_fu_567_p1, "tmp_35_i_fu_567_p1");
    sc_trace(mVcdFile, tmp_37_i_fu_587_p1, "tmp_37_i_fu_587_p1");
    sc_trace(mVcdFile, tmp_39_i_fu_597_p1, "tmp_39_i_fu_597_p1");
    sc_trace(mVcdFile, tmp_5_i1_fu_819_p1, "tmp_5_i1_fu_819_p1");
    sc_trace(mVcdFile, tmp_6_i1_fu_824_p1, "tmp_6_i1_fu_824_p1");
    sc_trace(mVcdFile, rcon_fu_80, "rcon_fu_80");
    sc_trace(mVcdFile, tmp_176_i_fu_505_p2, "tmp_176_i_fu_505_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, i_25_cast_fu_473_p1, "i_25_cast_fu_473_p1");
    sc_trace(mVcdFile, tmp_178_i_fu_489_p2, "tmp_178_i_fu_489_p2");
    sc_trace(mVcdFile, i_27_cast_fu_524_p1, "i_27_cast_fu_524_p1");
    sc_trace(mVcdFile, tmp_34_i_fu_561_p2, "tmp_34_i_fu_561_p2");
    sc_trace(mVcdFile, tmp_36_i_fu_582_p2, "tmp_36_i_fu_582_p2");
    sc_trace(mVcdFile, tmp_38_i_fu_592_p2, "tmp_38_i_fu_592_p2");
    sc_trace(mVcdFile, x_assign_fu_602_p2, "x_assign_fu_602_p2");
    sc_trace(mVcdFile, tmp_41_i_fu_608_p2, "tmp_41_i_fu_608_p2");
    sc_trace(mVcdFile, y_fu_620_p2, "y_fu_620_p2");
    sc_trace(mVcdFile, tmp_101_fu_626_p3, "tmp_101_fu_626_p3");
    sc_trace(mVcdFile, tmp_1_i_i_fu_634_p2, "tmp_1_i_i_fu_634_p2");
    sc_trace(mVcdFile, y_21_fu_640_p3, "y_21_fu_640_p3");
    sc_trace(mVcdFile, e_fu_614_p2, "e_fu_614_p2");
    sc_trace(mVcdFile, tmp1_fu_648_p2, "tmp1_fu_648_p2");
    sc_trace(mVcdFile, x_assign_9_fu_660_p2, "x_assign_9_fu_660_p2");
    sc_trace(mVcdFile, y_22_fu_666_p2, "y_22_fu_666_p2");
    sc_trace(mVcdFile, tmp_103_fu_672_p3, "tmp_103_fu_672_p3");
    sc_trace(mVcdFile, tmp_1_i10_i_fu_680_p2, "tmp_1_i10_i_fu_680_p2");
    sc_trace(mVcdFile, y_23_fu_686_p3, "y_23_fu_686_p3");
    sc_trace(mVcdFile, tmp2_fu_694_p2, "tmp2_fu_694_p2");
    sc_trace(mVcdFile, x_assign_s_fu_706_p2, "x_assign_s_fu_706_p2");
    sc_trace(mVcdFile, y_24_fu_712_p2, "y_24_fu_712_p2");
    sc_trace(mVcdFile, tmp_105_fu_718_p3, "tmp_105_fu_718_p3");
    sc_trace(mVcdFile, tmp_1_i14_i_fu_726_p2, "tmp_1_i14_i_fu_726_p2");
    sc_trace(mVcdFile, y_25_fu_732_p3, "y_25_fu_732_p3");
    sc_trace(mVcdFile, tmp3_fu_740_p2, "tmp3_fu_740_p2");
    sc_trace(mVcdFile, x_assign_1_fu_752_p2, "x_assign_1_fu_752_p2");
    sc_trace(mVcdFile, y_26_fu_758_p2, "y_26_fu_758_p2");
    sc_trace(mVcdFile, tmp_107_fu_764_p3, "tmp_107_fu_764_p3");
    sc_trace(mVcdFile, tmp_1_i18_i_fu_772_p2, "tmp_1_i18_i_fu_772_p2");
    sc_trace(mVcdFile, y_27_fu_778_p3, "y_27_fu_778_p3");
    sc_trace(mVcdFile, i_26_cast_fu_809_p1, "i_26_cast_fu_809_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes256_encrypt_ecb::~aes256_encrypt_ecb() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete grp_aes_expandEncKey_fu_368;
    delete grp_aes_addRoundKey_fu_377;
}

void aes256_encrypt_ecb::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void aes256_encrypt_ecb::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv8_0;
}

void aes256_encrypt_ecb::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_aes_addRoundKey_fu_377_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()) && 
              !esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_fu_578_p1.read())) || 
             (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read())) || 
             (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state42.read())))) {
            ap_reg_grp_aes_addRoundKey_fu_377_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes_addRoundKey_fu_377_ap_ready.read())) {
            ap_reg_grp_aes_addRoundKey_fu_377_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_aes_expandEncKey_fu_368_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()) && 
              !esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_fu_578_p1.read())) || 
             (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read())))) {
            ap_reg_grp_aes_expandEncKey_fu_368_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes_expandEncKey_fu_368_ap_ready.read())) {
            ap_reg_grp_aes_expandEncKey_fu_368_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_512_p2.read()))) {
        i_i1_reg_357 = ap_const_lv5_10;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state30.read()))) {
        i_i1_reg_357 = i_26_reg_1026.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read()))) {
        i_i2_reg_346 = i_32_reg_982.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()))) {
        i_i2_reg_346 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_512_p2.read()))) {
        i_i4_reg_335 = ap_const_lv5_10;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        i_i4_reg_335 = i_27_reg_944.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        i_i_reg_312 = i_25_reg_829.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_i_reg_312 = ap_const_lv5_10;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_fu_477_p2.read()))) {
        i_reg_323 = ap_const_lv4_1;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read()) && 
                !(esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_reg_987.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_addRoundKey_fu_377_ap_done.read())))) {
        i_reg_323 = i_33_fu_797_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_expandEncKey_fu_368_ap_done.read()))) {
        rcon_fu_80 = grp_aes_expandEncKey_fu_368_ap_return.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_fu_477_p2.read()))) {
        rcon_fu_80 = ap_const_lv8_1;
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state31.read())))) {
        reg_392 = buf_r_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        reg_392 = buf_r_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state31.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())))) {
        reg_399 = buf_r_q0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())))) {
        reg_399 = buf_r_q1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state32.read())))) {
        reg_406 = buf_r_q0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())))) {
        reg_406 = buf_r_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state32.read()))) {
        reg_413 = buf_r_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        reg_413 = buf_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state33.read()))) {
        reg_420 = buf_r_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        reg_420 = buf_r_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state33.read()))) {
        reg_427 = buf_r_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        reg_427 = buf_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state34.read()))) {
        reg_434 = buf_r_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        reg_434 = buf_r_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state34.read()))) {
        reg_441 = buf_r_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        reg_441 = buf_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state35.read()))) {
        reg_448 = buf_r_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        reg_448 = buf_r_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state35.read()))) {
        reg_455 = buf_r_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        reg_455 = buf_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_fu_477_p2.read()))) {
        buf_addr_22_reg_847 =  (sc_lv<4>) (tmp_i_22_fu_483_p1.read());
        tmp_179_i_reg_852 = tmp_179_i_fu_495_p1.read();
        tmp_i_22_reg_837 = tmp_i_22_fu_483_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_fu_813_p2.read()))) {
        buf_addr_23_reg_1034 =  (sc_lv<4>) (tmp_5_i1_fu_819_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i5_fu_528_p2.read()))) {
        buf_addr_24_reg_952 =  (sc_lv<4>) (tmp_5_i_fu_534_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0))) {
        buf_addr_25_reg_966 =  (sc_lv<4>) (tmp_i1_fu_552_p1.read());
        buf_addr_26_reg_977 =  (sc_lv<4>) (tmp_35_i_fu_567_p1.read());
        i_32_reg_982 = i_32_fu_572_p2.read();
        tmp_99_reg_971 = tmp_99_fu_557_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        buf_addr_27_reg_991 =  (sc_lv<4>) (tmp_37_i_fu_587_p1.read());
        buf_addr_28_reg_996 =  (sc_lv<4>) (tmp_39_i_fu_597_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        i_25_reg_829 = i_25_fu_467_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state28.read()))) {
        i_26_reg_1026 = i_26_fu_803_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        i_27_reg_944 = i_27_fu_518_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()) && 
  !esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_fu_578_p1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read())))) {
        reg_462 = rcon_fu_80.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        tmp_44_i_reg_1001 = tmp_44_i_fu_654_p2.read();
        tmp_48_i_reg_1006 = tmp_48_i_fu_700_p2.read();
        tmp_52_i_reg_1011 = tmp_52_i_fu_746_p2.read();
        tmp_56_i_reg_1016 = tmp_56_i_fu_786_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()) && !esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0))) {
        tmp_98_reg_987 = tmp_98_fu_578_p1.read();
    }
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read().range(10, 10);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read().range(13, 13);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read().range(14, 14);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read().range(15, 15);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read().range(16, 16);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read().range(17, 17);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read().range(18, 18);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read().range(19, 19);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read().range(20, 20);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read().range(21, 21);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read().range(22, 22);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read().range(23, 23);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read().range(24, 24);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read().range(25, 25);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read().range(26, 26);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read().range(27, 27);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read().range(28, 28);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read().range(29, 29);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read().range(30, 30);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read().range(31, 31);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read().range(32, 32);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read().range(33, 33);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read().range(34, 34);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read().range(35, 35);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read().range(36, 36);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read().range(37, 37);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read().range(38, 38);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read().range(39, 39);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read().range(40, 40);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read().range(41, 41);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read().range(42, 42);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void aes256_encrypt_ecb::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_addRoundKey_fu_377_ap_done.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_addRoundKey_fu_377_ap_done.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_buf_r_address0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state35.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state34.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state33.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state39.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state32.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state38.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state31.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state37.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read()))) {
        buf_r_address0 = buf_addr_28_reg_996.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()))) {
        buf_r_address0 = buf_addr_26_reg_977.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        buf_r_address0 =  (sc_lv<4>) (tmp_39_i_fu_597_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0))) {
        buf_r_address0 =  (sc_lv<4>) (tmp_35_i_fu_567_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state28.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i5_fu_528_p2.read())))) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i5_fu_528_p2.read()))) {
        buf_r_address0 =  (sc_lv<4>) (tmp_5_i_fu_534_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        buf_r_address0 = buf_addr_22_reg_847.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        buf_r_address0 =  (sc_lv<4>) (tmp_i_22_fu_483_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state27.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_reg_987.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read())))) {
        buf_r_address0 = grp_aes_addRoundKey_fu_377_buf_r_address0.read();
    } else {
        buf_r_address0 = "XXXX";
    }
}

void aes256_encrypt_ecb::thread_buf_r_address1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state35.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state34.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state33.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state39.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state32.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state38.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state31.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state37.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state30.read()))) {
        buf_r_address1 = buf_addr_23_reg_1034.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state28.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_fu_813_p2.read()))) {
        buf_r_address1 =  (sc_lv<4>) (tmp_5_i1_fu_819_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read()))) {
        buf_r_address1 = buf_addr_27_reg_991.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()))) {
        buf_r_address1 = buf_addr_25_reg_966.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        buf_r_address1 =  (sc_lv<4>) (tmp_37_i_fu_587_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0))) {
        buf_r_address1 =  (sc_lv<4>) (tmp_i1_fu_552_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state28.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_fu_813_p2.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        buf_r_address1 = buf_addr_24_reg_952.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())))) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else {
        buf_r_address1 = "XXXX";
    }
}

void aes256_encrypt_ecb::thread_buf_r_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state31.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state32.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state33.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state34.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state35.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i5_fu_528_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state28.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i5_fu_528_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state37.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state38.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state39.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_expandEncKey_fu_368_ap_done.read())))) {
        buf_r_ce0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state27.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_reg_987.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read())))) {
        buf_r_ce0 = grp_aes_addRoundKey_fu_377_buf_r_ce0.read();
    } else {
        buf_r_ce0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_buf_r_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state31.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state32.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state33.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state34.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state35.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_fu_813_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state30.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state28.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_fu_813_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state37.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state38.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state39.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_expandEncKey_fu_368_ap_done.read())))) {
        buf_r_ce1 = ap_const_logic_1;
    } else {
        buf_r_ce1 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_buf_r_d0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read()))) {
        buf_r_d0 = reg_455.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state39.read()))) {
        buf_r_d0 = reg_441.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state38.read()))) {
        buf_r_d0 = reg_427.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state37.read()))) {
        buf_r_d0 = reg_413.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read()))) {
        buf_r_d0 = tmp_56_i_reg_1016.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()))) {
        buf_r_d0 = tmp_48_i_reg_1006.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())))) {
        buf_r_d0 = reg_399.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read()))) {
        buf_r_d0 = reg_434.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        buf_r_d0 = reg_448.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        buf_r_d0 = reg_420.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        buf_r_d0 = reg_392.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        buf_r_d0 = reg_406.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        buf_r_d0 = tmp_176_i_fu_505_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state27.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_reg_987.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read())))) {
        buf_r_d0 = grp_aes_addRoundKey_fu_377_buf_r_d0.read();
    } else {
        buf_r_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes256_encrypt_ecb::thread_buf_r_d1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read()))) {
        buf_r_d1 = reg_434.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state39.read()))) {
        buf_r_d1 = reg_448.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state38.read()))) {
        buf_r_d1 = reg_420.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state37.read()))) {
        buf_r_d1 = reg_392.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read()))) {
        buf_r_d1 = tmp_52_i_reg_1011.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()))) {
        buf_r_d1 = tmp_44_i_reg_1001.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())))) {
        buf_r_d1 = reg_406.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read()))) {
        buf_r_d1 = reg_455.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        buf_r_d1 = reg_441.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        buf_r_d1 = reg_427.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        buf_r_d1 = reg_413.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        buf_r_d1 = reg_399.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state30.read())))) {
        buf_r_d1 = sbox_q0.read();
    } else {
        buf_r_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes256_encrypt_ecb::thread_buf_r_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state37.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state38.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state39.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_expandEncKey_fu_368_ap_done.read())))) {
        buf_r_we0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state27.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_reg_987.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read())))) {
        buf_r_we0 = grp_aes_addRoundKey_fu_377_buf_r_we0.read();
    } else {
        buf_r_we0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_buf_r_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state36.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state40.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state23.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state30.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state37.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state38.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state39.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_expandEncKey_fu_368_ap_done.read())))) {
        buf_r_we1 = ap_const_logic_1;
    } else {
        buf_r_we1 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_enckey_address0() {
    ctx_enckey_address0 =  (sc_lv<5>) (tmp_i_22_fu_483_p1.read());
}

void aes256_encrypt_ecb::thread_ctx_enckey_address1() {
    ctx_enckey_address1 =  (sc_lv<5>) (tmp_179_i_fu_495_p1.read());
}

void aes256_encrypt_ecb::thread_ctx_enckey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        ctx_enckey_ce0 = ap_const_logic_1;
    } else {
        ctx_enckey_ce0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_enckey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        ctx_enckey_ce1 = ap_const_logic_1;
    } else {
        ctx_enckey_ce1 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_key_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_key_address0 =  (sc_lv<5>) (tmp_i_22_reg_837.read());
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state27.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_reg_987.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read())))) {
        ctx_key_address0 = grp_aes_addRoundKey_fu_377_key_address0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        ctx_key_address0 = grp_aes_expandEncKey_fu_368_k_address0.read();
    } else {
        ctx_key_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void aes256_encrypt_ecb::thread_ctx_key_address1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_key_address1 =  (sc_lv<5>) (tmp_179_i_reg_852.read());
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        ctx_key_address1 = grp_aes_expandEncKey_fu_368_k_address1.read();
    } else {
        ctx_key_address1 =  (sc_lv<5>) ("XXXXX");
    }
}

void aes256_encrypt_ecb::thread_ctx_key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_key_ce0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state27.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_reg_987.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read())))) {
        ctx_key_ce0 = grp_aes_addRoundKey_fu_377_key_ce0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        ctx_key_ce0 = grp_aes_expandEncKey_fu_368_k_ce0.read();
    } else {
        ctx_key_ce0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_key_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_key_ce1 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        ctx_key_ce1 = grp_aes_expandEncKey_fu_368_k_ce1.read();
    } else {
        ctx_key_ce1 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_key_d0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_key_d0 = ctx_enckey_q0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        ctx_key_d0 = grp_aes_expandEncKey_fu_368_k_d0.read();
    } else {
        ctx_key_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes256_encrypt_ecb::thread_ctx_key_d1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_key_d1 = ctx_enckey_q1.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        ctx_key_d1 = grp_aes_expandEncKey_fu_368_k_d1.read();
    } else {
        ctx_key_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes256_encrypt_ecb::thread_ctx_key_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())))) {
        ctx_key_we0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        ctx_key_we0 = grp_aes_expandEncKey_fu_368_k_we0.read();
    } else {
        ctx_key_we0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_key_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())))) {
        ctx_key_we1 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        ctx_key_we1 = grp_aes_expandEncKey_fu_368_k_we1.read();
    } else {
        ctx_key_we1 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_e_fu_614_p2() {
    e_fu_614_p2 = (buf_r_q0.read() ^ tmp_41_i_fu_608_p2.read());
}

void aes256_encrypt_ecb::thread_exitcond_fu_512_p2() {
    exitcond_fu_512_p2 = (!i_reg_323.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_323.read() == ap_const_lv4_E);
}

void aes256_encrypt_ecb::thread_grp_aes_addRoundKey_fu_377_ap_start() {
    grp_aes_addRoundKey_fu_377_ap_start = ap_reg_grp_aes_addRoundKey_fu_377_ap_start.read();
}

void aes256_encrypt_ecb::thread_grp_aes_addRoundKey_fu_377_key_offset() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_reg_987.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read())))) {
        grp_aes_addRoundKey_fu_377_key_offset = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state27.read()))) {
        grp_aes_addRoundKey_fu_377_key_offset = ap_const_lv6_10;
    } else {
        grp_aes_addRoundKey_fu_377_key_offset =  (sc_lv<6>) ("XXXXXX");
    }
}

void aes256_encrypt_ecb::thread_grp_aes_expandEncKey_fu_368_ap_start() {
    grp_aes_expandEncKey_fu_368_ap_start = ap_reg_grp_aes_expandEncKey_fu_368_ap_start.read();
}

void aes256_encrypt_ecb::thread_i_25_cast_fu_473_p1() {
    i_25_cast_fu_473_p1 = esl_sext<8,5>(i_25_fu_467_p2.read());
}

void aes256_encrypt_ecb::thread_i_25_fu_467_p2() {
    i_25_fu_467_p2 = (!i_i_reg_312.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i_reg_312.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void aes256_encrypt_ecb::thread_i_26_cast_fu_809_p1() {
    i_26_cast_fu_809_p1 = esl_sext<8,5>(i_26_fu_803_p2.read());
}

void aes256_encrypt_ecb::thread_i_26_fu_803_p2() {
    i_26_fu_803_p2 = (!i_i1_reg_357.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i1_reg_357.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void aes256_encrypt_ecb::thread_i_27_cast_fu_524_p1() {
    i_27_cast_fu_524_p1 = esl_sext<8,5>(i_27_fu_518_p2.read());
}

void aes256_encrypt_ecb::thread_i_27_fu_518_p2() {
    i_27_fu_518_p2 = (!i_i4_reg_335.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i4_reg_335.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void aes256_encrypt_ecb::thread_i_32_fu_572_p2() {
    i_32_fu_572_p2 = (!ap_const_lv5_4.is_01() || !i_i2_reg_346.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ap_const_lv5_4) + sc_biguint<5>(i_i2_reg_346.read()));
}

void aes256_encrypt_ecb::thread_i_33_fu_797_p2() {
    i_33_fu_797_p2 = (!i_reg_323.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_323.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void aes256_encrypt_ecb::thread_sbox_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state29.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_6_i1_fu_824_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        sbox_address0 =  (sc_lv<8>) (tmp_6_i_fu_539_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        sbox_address0 = ap_const_lv8_0;
    } else {
        sbox_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes256_encrypt_ecb::thread_sbox_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state29.read())))) {
        sbox_ce0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state41.read())))) {
        sbox_ce0 = ap_const_logic_0;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_tmp1_fu_648_p2() {
    tmp1_fu_648_p2 = (y_21_fu_640_p3.read() ^ e_fu_614_p2.read());
}

void aes256_encrypt_ecb::thread_tmp2_fu_694_p2() {
    tmp2_fu_694_p2 = (y_23_fu_686_p3.read() ^ e_fu_614_p2.read());
}

void aes256_encrypt_ecb::thread_tmp3_fu_740_p2() {
    tmp3_fu_740_p2 = (y_25_fu_732_p3.read() ^ e_fu_614_p2.read());
}

void aes256_encrypt_ecb::thread_tmp_101_fu_626_p3() {
    tmp_101_fu_626_p3 = x_assign_fu_602_p2.read().range(7, 7);
}

void aes256_encrypt_ecb::thread_tmp_103_fu_672_p3() {
    tmp_103_fu_672_p3 = x_assign_9_fu_660_p2.read().range(7, 7);
}

void aes256_encrypt_ecb::thread_tmp_105_fu_718_p3() {
    tmp_105_fu_718_p3 = x_assign_s_fu_706_p2.read().range(7, 7);
}

void aes256_encrypt_ecb::thread_tmp_107_fu_764_p3() {
    tmp_107_fu_764_p3 = x_assign_1_fu_752_p2.read().range(7, 7);
}

void aes256_encrypt_ecb::thread_tmp_176_i_fu_505_p2() {
    tmp_176_i_fu_505_p2 = (buf_r_q0.read() ^ ctx_enckey_q0.read());
}

void aes256_encrypt_ecb::thread_tmp_178_i_fu_489_p2() {
    tmp_178_i_fu_489_p2 = (!i_i_reg_312.read().is_01() || !ap_const_lv5_F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i_reg_312.read()) + sc_biguint<5>(ap_const_lv5_F));
}

void aes256_encrypt_ecb::thread_tmp_179_i_fu_495_p1() {
    tmp_179_i_fu_495_p1 = esl_zext<64,5>(tmp_178_i_fu_489_p2.read());
}

void aes256_encrypt_ecb::thread_tmp_1_i10_i_fu_680_p2() {
    tmp_1_i10_i_fu_680_p2 = (y_22_fu_666_p2.read() ^ ap_const_lv8_1B);
}

void aes256_encrypt_ecb::thread_tmp_1_i14_i_fu_726_p2() {
    tmp_1_i14_i_fu_726_p2 = (y_24_fu_712_p2.read() ^ ap_const_lv8_1B);
}

void aes256_encrypt_ecb::thread_tmp_1_i18_i_fu_772_p2() {
    tmp_1_i18_i_fu_772_p2 = (y_26_fu_758_p2.read() ^ ap_const_lv8_1B);
}

void aes256_encrypt_ecb::thread_tmp_1_i_i_fu_634_p2() {
    tmp_1_i_i_fu_634_p2 = (y_fu_620_p2.read() ^ ap_const_lv8_1B);
}

void aes256_encrypt_ecb::thread_tmp_34_i_fu_561_p2() {
    tmp_34_i_fu_561_p2 = (tmp_99_fu_557_p1.read() | ap_const_lv4_1);
}

void aes256_encrypt_ecb::thread_tmp_35_i_fu_567_p1() {
    tmp_35_i_fu_567_p1 = esl_zext<64,4>(tmp_34_i_fu_561_p2.read());
}

void aes256_encrypt_ecb::thread_tmp_36_i_fu_582_p2() {
    tmp_36_i_fu_582_p2 = (tmp_99_reg_971.read() | ap_const_lv4_2);
}

void aes256_encrypt_ecb::thread_tmp_37_i_fu_587_p1() {
    tmp_37_i_fu_587_p1 = esl_zext<64,4>(tmp_36_i_fu_582_p2.read());
}

void aes256_encrypt_ecb::thread_tmp_38_i_fu_592_p2() {
    tmp_38_i_fu_592_p2 = (tmp_99_reg_971.read() | ap_const_lv4_3);
}

void aes256_encrypt_ecb::thread_tmp_39_i_fu_597_p1() {
    tmp_39_i_fu_597_p1 = esl_zext<64,4>(tmp_38_i_fu_592_p2.read());
}

void aes256_encrypt_ecb::thread_tmp_41_i_fu_608_p2() {
    tmp_41_i_fu_608_p2 = (buf_r_q1.read() ^ x_assign_fu_602_p2.read());
}

void aes256_encrypt_ecb::thread_tmp_44_i_fu_654_p2() {
    tmp_44_i_fu_654_p2 = (tmp1_fu_648_p2.read() ^ reg_392.read());
}

void aes256_encrypt_ecb::thread_tmp_48_i_fu_700_p2() {
    tmp_48_i_fu_700_p2 = (tmp2_fu_694_p2.read() ^ reg_399.read());
}

void aes256_encrypt_ecb::thread_tmp_52_i_fu_746_p2() {
    tmp_52_i_fu_746_p2 = (tmp3_fu_740_p2.read() ^ buf_r_q1.read());
}

void aes256_encrypt_ecb::thread_tmp_56_i_fu_786_p2() {
    tmp_56_i_fu_786_p2 = (y_27_fu_778_p3.read() ^ tmp_41_i_fu_608_p2.read());
}

void aes256_encrypt_ecb::thread_tmp_5_i1_fu_819_p1() {
    tmp_5_i1_fu_819_p1 = esl_zext<64,8>(i_26_cast_fu_809_p1.read());
}

void aes256_encrypt_ecb::thread_tmp_5_i_fu_534_p1() {
    tmp_5_i_fu_534_p1 = esl_zext<64,8>(i_27_cast_fu_524_p1.read());
}

void aes256_encrypt_ecb::thread_tmp_6_i1_fu_824_p1() {
    tmp_6_i1_fu_824_p1 = esl_zext<64,8>(buf_r_q1.read());
}

void aes256_encrypt_ecb::thread_tmp_6_i_fu_539_p1() {
    tmp_6_i_fu_539_p1 = esl_zext<64,8>(buf_r_q0.read());
}

void aes256_encrypt_ecb::thread_tmp_98_fu_578_p1() {
    tmp_98_fu_578_p1 = i_reg_323.read().range(1-1, 0);
}

void aes256_encrypt_ecb::thread_tmp_99_fu_557_p1() {
    tmp_99_fu_557_p1 = i_i2_reg_346.read().range(4-1, 0);
}

void aes256_encrypt_ecb::thread_tmp_fu_544_p3() {
    tmp_fu_544_p3 = i_i2_reg_346.read().range(4, 4);
}

void aes256_encrypt_ecb::thread_tmp_i1_fu_552_p1() {
    tmp_i1_fu_552_p1 = esl_zext<64,5>(i_i2_reg_346.read());
}

void aes256_encrypt_ecb::thread_tmp_i5_fu_528_p2() {
    tmp_i5_fu_528_p2 = (!i_i4_reg_335.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(i_i4_reg_335.read() == ap_const_lv5_0);
}

void aes256_encrypt_ecb::thread_tmp_i8_fu_813_p2() {
    tmp_i8_fu_813_p2 = (!i_i1_reg_357.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(i_i1_reg_357.read() == ap_const_lv5_0);
}

void aes256_encrypt_ecb::thread_tmp_i_22_fu_483_p1() {
    tmp_i_22_fu_483_p1 = esl_zext<64,8>(i_25_cast_fu_473_p1.read());
}

void aes256_encrypt_ecb::thread_tmp_i_fu_477_p2() {
    tmp_i_fu_477_p2 = (!i_i_reg_312.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_312.read() == ap_const_lv5_0);
}

void aes256_encrypt_ecb::thread_x_assign_1_fu_752_p2() {
    x_assign_1_fu_752_p2 = (buf_r_q0.read() ^ reg_392.read());
}

void aes256_encrypt_ecb::thread_x_assign_9_fu_660_p2() {
    x_assign_9_fu_660_p2 = (buf_r_q1.read() ^ reg_399.read());
}

void aes256_encrypt_ecb::thread_x_assign_fu_602_p2() {
    x_assign_fu_602_p2 = (reg_399.read() ^ reg_392.read());
}

void aes256_encrypt_ecb::thread_x_assign_s_fu_706_p2() {
    x_assign_s_fu_706_p2 = (buf_r_q0.read() ^ buf_r_q1.read());
}

void aes256_encrypt_ecb::thread_y_21_fu_640_p3() {
    y_21_fu_640_p3 = (!tmp_101_fu_626_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_101_fu_626_p3.read()[0].to_bool())? tmp_1_i_i_fu_634_p2.read(): y_fu_620_p2.read());
}

void aes256_encrypt_ecb::thread_y_22_fu_666_p2() {
    y_22_fu_666_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): x_assign_9_fu_660_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void aes256_encrypt_ecb::thread_y_23_fu_686_p3() {
    y_23_fu_686_p3 = (!tmp_103_fu_672_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_103_fu_672_p3.read()[0].to_bool())? tmp_1_i10_i_fu_680_p2.read(): y_22_fu_666_p2.read());
}

void aes256_encrypt_ecb::thread_y_24_fu_712_p2() {
    y_24_fu_712_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): x_assign_s_fu_706_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void aes256_encrypt_ecb::thread_y_25_fu_732_p3() {
    y_25_fu_732_p3 = (!tmp_105_fu_718_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_105_fu_718_p3.read()[0].to_bool())? tmp_1_i14_i_fu_726_p2.read(): y_24_fu_712_p2.read());
}

void aes256_encrypt_ecb::thread_y_26_fu_758_p2() {
    y_26_fu_758_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): x_assign_1_fu_752_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void aes256_encrypt_ecb::thread_y_27_fu_778_p3() {
    y_27_fu_778_p3 = (!tmp_107_fu_764_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_107_fu_764_p3.read()[0].to_bool())? tmp_1_i18_i_fu_772_p2.read(): y_26_fu_758_p2.read());
}

void aes256_encrypt_ecb::thread_y_fu_620_p2() {
    y_fu_620_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): x_assign_fu_602_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void aes256_encrypt_ecb::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_fu_477_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_512_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i5_fu_528_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((!esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_fu_578_p1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else if ((!esl_seteq<1,1,1>(tmp_fu_544_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_fu_578_p1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 8388608 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_expandEncKey_fu_368_ap_done.read())) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            if (!(esl_seteq<1,1,1>(ap_const_lv1_0, tmp_98_reg_987.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_addRoundKey_fu_377_ap_done.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        case 67108864 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_addRoundKey_fu_377_ap_done.read())) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 134217728 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_fu_813_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state31;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_expandEncKey_fu_368_ap_done.read())) {
                ap_NS_fsm = ap_ST_fsm_state42;
            } else {
                ap_NS_fsm = ap_ST_fsm_state41;
            }
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_aes_addRoundKey_fu_377_ap_done.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state43;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<43>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

