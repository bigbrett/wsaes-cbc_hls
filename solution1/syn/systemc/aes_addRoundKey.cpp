// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_addRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_addRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_addRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> aes_addRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<3> aes_addRoundKey::ap_ST_fsm_state2 = "10";
const sc_lv<3> aes_addRoundKey::ap_ST_fsm_state3 = "100";
const sc_lv<32> aes_addRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> aes_addRoundKey::ap_const_lv1_1 = "1";
const sc_lv<32> aes_addRoundKey::ap_const_lv32_1 = "1";
const sc_lv<1> aes_addRoundKey::ap_const_lv1_0 = "0";
const sc_lv<5> aes_addRoundKey::ap_const_lv5_10 = "10000";
const sc_lv<32> aes_addRoundKey::ap_const_lv32_2 = "10";
const sc_lv<5> aes_addRoundKey::ap_const_lv5_1F = "11111";
const sc_lv<5> aes_addRoundKey::ap_const_lv5_0 = "00000";

aes_addRoundKey::aes_addRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_75_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_75_p2 );

    SC_METHOD(thread_buf_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( buf_addr_reg_121 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_81_p1 );

    SC_METHOD(thread_buf_r_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_buf_r_d0);
    sensitive << ( buf_r_q0 );
    sensitive << ( key_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_buf_r_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_5_fu_65_p2);
    sensitive << ( i_reg_50 );

    SC_METHOD(thread_i_6_cast_fu_71_p1);
    sensitive << ( i_5_fu_65_p2 );

    SC_METHOD(thread_key_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sum_cast_fu_91_p1 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sum_cast_fu_91_p1);
    sensitive << ( sum_fu_86_p2 );

    SC_METHOD(thread_sum_fu_86_p2);
    sensitive << ( tmp_92_reg_103 );
    sensitive << ( i_5_fu_65_p2 );

    SC_METHOD(thread_tmp_92_fu_61_p1);
    sensitive << ( key_offset );

    SC_METHOD(thread_tmp_fu_75_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_50 );

    SC_METHOD(thread_tmp_s_fu_81_p1);
    sensitive << ( i_6_cast_fu_71_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_75_p2 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_addRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buf_r_address0, "(port)buf_r_address0");
    sc_trace(mVcdFile, buf_r_ce0, "(port)buf_r_ce0");
    sc_trace(mVcdFile, buf_r_we0, "(port)buf_r_we0");
    sc_trace(mVcdFile, buf_r_d0, "(port)buf_r_d0");
    sc_trace(mVcdFile, buf_r_q0, "(port)buf_r_q0");
    sc_trace(mVcdFile, key_address0, "(port)key_address0");
    sc_trace(mVcdFile, key_ce0, "(port)key_ce0");
    sc_trace(mVcdFile, key_q0, "(port)key_q0");
    sc_trace(mVcdFile, key_offset, "(port)key_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_92_fu_61_p1, "tmp_92_fu_61_p1");
    sc_trace(mVcdFile, tmp_92_reg_103, "tmp_92_reg_103");
    sc_trace(mVcdFile, i_5_fu_65_p2, "i_5_fu_65_p2");
    sc_trace(mVcdFile, i_5_reg_108, "i_5_reg_108");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_75_p2, "tmp_fu_75_p2");
    sc_trace(mVcdFile, buf_addr_reg_121, "buf_addr_reg_121");
    sc_trace(mVcdFile, i_reg_50, "i_reg_50");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sum_cast_fu_91_p1, "sum_cast_fu_91_p1");
    sc_trace(mVcdFile, tmp_s_fu_81_p1, "tmp_s_fu_81_p1");
    sc_trace(mVcdFile, i_6_cast_fu_71_p1, "i_6_cast_fu_71_p1");
    sc_trace(mVcdFile, sum_fu_86_p2, "sum_fu_86_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes_addRoundKey::~aes_addRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aes_addRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        i_reg_50 = i_5_reg_108.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_50 = ap_const_lv5_10;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_75_p2.read(), ap_const_lv1_0))) {
        buf_addr_reg_121 =  (sc_lv<4>) (tmp_s_fu_81_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        i_5_reg_108 = i_5_fu_65_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_92_reg_103 = tmp_92_fu_61_p1.read();
    }
}

void aes_addRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void aes_addRoundKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void aes_addRoundKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void aes_addRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !esl_seteq<1,1,1>(tmp_fu_75_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_addRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_addRoundKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(tmp_fu_75_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_addRoundKey::thread_buf_r_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        buf_r_address0 = buf_addr_reg_121.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        buf_r_address0 =  (sc_lv<4>) (tmp_s_fu_81_p1.read());
    } else {
        buf_r_address0 = "XXXX";
    }
}

void aes_addRoundKey::thread_buf_r_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())))) {
        buf_r_ce0 = ap_const_logic_1;
    } else {
        buf_r_ce0 = ap_const_logic_0;
    }
}

void aes_addRoundKey::thread_buf_r_d0() {
    buf_r_d0 = (buf_r_q0.read() ^ key_q0.read());
}

void aes_addRoundKey::thread_buf_r_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())))) {
        buf_r_we0 = ap_const_logic_1;
    } else {
        buf_r_we0 = ap_const_logic_0;
    }
}

void aes_addRoundKey::thread_i_5_fu_65_p2() {
    i_5_fu_65_p2 = (!i_reg_50.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_50.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void aes_addRoundKey::thread_i_6_cast_fu_71_p1() {
    i_6_cast_fu_71_p1 = esl_sext<8,5>(i_5_fu_65_p2.read());
}

void aes_addRoundKey::thread_key_address0() {
    key_address0 =  (sc_lv<5>) (sum_cast_fu_91_p1.read());
}

void aes_addRoundKey::thread_key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        key_ce0 = ap_const_logic_1;
    } else {
        key_ce0 = ap_const_logic_0;
    }
}

void aes_addRoundKey::thread_sum_cast_fu_91_p1() {
    sum_cast_fu_91_p1 = esl_zext<64,5>(sum_fu_86_p2.read());
}

void aes_addRoundKey::thread_sum_fu_86_p2() {
    sum_fu_86_p2 = (!i_5_fu_65_p2.read().is_01() || !tmp_92_reg_103.read().is_01())? sc_lv<5>(): (sc_biguint<5>(i_5_fu_65_p2.read()) + sc_biguint<5>(tmp_92_reg_103.read()));
}

void aes_addRoundKey::thread_tmp_92_fu_61_p1() {
    tmp_92_fu_61_p1 = key_offset.read().range(5-1, 0);
}

void aes_addRoundKey::thread_tmp_fu_75_p2() {
    tmp_fu_75_p2 = (!i_reg_50.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_50.read() == ap_const_lv5_0);
}

void aes_addRoundKey::thread_tmp_s_fu_81_p1() {
    tmp_s_fu_81_p1 = esl_zext<64,8>(i_6_cast_fu_71_p1.read());
}

void aes_addRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(tmp_fu_75_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

