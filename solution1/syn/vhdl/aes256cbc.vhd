-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256cbc is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of aes256cbc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes256cbc,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.500000,HLS_SYN_LAT=823,HLS_SYN_TPT=none,HLS_SYN_MEM=13,HLS_SYN_DSP=0,HLS_SYN_FF=1714,HLS_SYN_LUT=2811}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal memptr_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal memptr_ce0 : STD_LOGIC;
    signal memptr_we0 : STD_LOGIC;
    signal memptr_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mode : STD_LOGIC_VECTOR (2 downto 0);
    signal inbuf_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal outbuf_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal iv_ce0 : STD_LOGIC;
    signal iv_we0 : STD_LOGIC;
    signal iv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xorv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xorv_ce0 : STD_LOGIC;
    signal xorv_we0 : STD_LOGIC;
    signal xorv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xorv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal key_ce0 : STD_LOGIC;
    signal key_we0 : STD_LOGIC;
    signal key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_deckey_ce0 : STD_LOGIC;
    signal ctx_deckey_we0 : STD_LOGIC;
    signal ctx_deckey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_deckey_ce1 : STD_LOGIC;
    signal ctx_deckey_we1 : STD_LOGIC;
    signal ctx_deckey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_enckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_enckey_ce0 : STD_LOGIC;
    signal ctx_enckey_we0 : STD_LOGIC;
    signal ctx_enckey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_enckey_ce1 : STD_LOGIC;
    signal ctx_enckey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_key_ce0 : STD_LOGIC;
    signal ctx_key_we0 : STD_LOGIC;
    signal ctx_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_key_ce1 : STD_LOGIC;
    signal ctx_key_we1 : STD_LOGIC;
    signal ctx_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lastbuf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lastbuf_ce0 : STD_LOGIC;
    signal lastbuf_we0 : STD_LOGIC;
    signal lastbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal outbuf_addr_read_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal mode_read_read_fu_114_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mode_read_reg_926 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_95_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_reg_930 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_fu_585_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_reg_935 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_93_fu_589_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_93_reg_940 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_593_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_945 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_15_fu_603_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_15_reg_953 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_124_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_fu_634_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_14_reg_966 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_123_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_665_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_13_reg_979 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_122_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_fu_696_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_17_reg_992 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_134_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_reg_997 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_131_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_19_fu_713_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_19_reg_1010 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buf_addr_8_reg_1015 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_136_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_fu_731_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_21_reg_1028 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_143_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_1033 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_141_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_742_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_97_reg_1043 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_22_fu_751_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_22_reg_1051 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_144_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum6_fu_766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum6_reg_1061 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_12_fu_781_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_12_reg_1069 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_121_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_16_fu_812_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_16_reg_1082 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal buf_addr_5_reg_1087 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_130_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_18_fu_830_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_18_reg_1100 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_137_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_137_reg_1105 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_135_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_841_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_reg_1115 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_20_fu_850_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_20_reg_1123 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_140_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum2_fu_865_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum2_reg_1133 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_11_fu_880_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_11_reg_1141 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_125_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_reg_1146 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_23_fu_897_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_23_reg_1159 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_i_9_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_9_reg_1164 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_i_fu_914_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal phitmp_i_reg_1178 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_212_i_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_564_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_aes_expandEncKey_fu_564_ap_done : STD_LOGIC;
    signal buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_we0 : STD_LOGIC;
    signal buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_ce1 : STD_LOGIC;
    signal buf_we1 : STD_LOGIC;
    signal buf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_buf_r_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_buf_r_we1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_buf_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_ctx_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_ctx_key_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_ctx_key_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_ctx_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_ctx_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_540_ctx_key_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_ctx_key_we1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_540_ctx_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_ap_start : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_ap_done : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_ap_idle : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_ap_ready : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_buf_r_ce1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_buf_r_we1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_buf_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_ctx_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_ctx_key_ce0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_ctx_key_we0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_ctx_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_ctx_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_decrypt_ecb_fu_551_ctx_key_ce1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_ctx_key_we1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_551_ctx_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_564_ap_start : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_564_ap_idle : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_564_ap_ready : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_564_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_expandEncKey_fu_564_k_ce0 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_564_k_we0 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_564_k_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_564_k_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_expandEncKey_fu_564_k_ce1 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_564_k_we1 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_564_k_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_10_reg_370 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_s_reg_382 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_5_reg_394 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_6_reg_406 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_7_reg_417 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_8_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_9_reg_439 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_1_reg_450 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_2_reg_462 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_3_reg_473 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_4_reg_484 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_reg_495 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_i_reg_506 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal rcon_i_reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_24_reg_529 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_aes_expandEncKey_fu_564_ap_start : STD_LOGIC := '0';
    signal sum1_cast_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_127_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_145_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_126_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_132_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_142_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_870_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_156_cast_fu_609_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum1_fu_613_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_155_cast_fu_640_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum8_fu_644_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_154_cast_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum4_fu_675_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_174_cast_fu_762_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_153_cast_fu_787_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_170_cast_fu_861_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);

    component aes256_encrypt_ecb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_we1 : OUT STD_LOGIC;
        buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_enckey_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_enckey_ce0 : OUT STD_LOGIC;
        ctx_enckey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_enckey_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_enckey_ce1 : OUT STD_LOGIC;
        ctx_enckey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce0 : OUT STD_LOGIC;
        ctx_key_we0 : OUT STD_LOGIC;
        ctx_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce1 : OUT STD_LOGIC;
        ctx_key_we1 : OUT STD_LOGIC;
        ctx_key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_decrypt_ecb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_we1 : OUT STD_LOGIC;
        buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_deckey_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_deckey_ce0 : OUT STD_LOGIC;
        ctx_deckey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_deckey_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_deckey_ce1 : OUT STD_LOGIC;
        ctx_deckey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce0 : OUT STD_LOGIC;
        ctx_key_we0 : OUT STD_LOGIC;
        ctx_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce1 : OUT STD_LOGIC;
        ctx_key_we1 : OUT STD_LOGIC;
        ctx_key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_expandEncKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce0 : OUT STD_LOGIC;
        k_we0 : OUT STD_LOGIC;
        k_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        k_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce1 : OUT STD_LOGIC;
        k_we1 : OUT STD_LOGIC;
        k_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        k_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_iv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_key IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_ctx_decfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_ctx_encg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        memptr_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        memptr_ce0 : IN STD_LOGIC;
        memptr_we0 : IN STD_LOGIC;
        memptr_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        memptr_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode : OUT STD_LOGIC_VECTOR (2 downto 0);
        inbuf_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
        outbuf_addr : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    iv_U : component aes256cbc_iv
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iv_address0,
        ce0 => iv_ce0,
        we0 => iv_we0,
        d0 => memptr_q0,
        q0 => iv_q0);

    xorv_U : component aes256cbc_iv
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xorv_address0,
        ce0 => xorv_ce0,
        we0 => xorv_we0,
        d0 => xorv_d0,
        q0 => xorv_q0);

    key_U : component aes256cbc_key
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => key_address0,
        ce0 => key_ce0,
        we0 => key_we0,
        d0 => memptr_q0,
        q0 => key_q0);

    ctx_deckey_U : component aes256cbc_ctx_decfYi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_deckey_address0,
        ce0 => ctx_deckey_ce0,
        we0 => ctx_deckey_we0,
        d0 => ctx_deckey_d0,
        q0 => ctx_deckey_q0,
        address1 => ctx_deckey_address1,
        ce1 => ctx_deckey_ce1,
        we1 => ctx_deckey_we1,
        d1 => grp_aes_expandEncKey_fu_564_k_d1,
        q1 => ctx_deckey_q1);

    ctx_enckey_U : component aes256cbc_ctx_encg8j
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_enckey_address0,
        ce0 => ctx_enckey_ce0,
        we0 => ctx_enckey_we0,
        d0 => key_q0,
        q0 => ctx_enckey_q0,
        address1 => grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address1,
        ce1 => ctx_enckey_ce1,
        q1 => ctx_enckey_q1);

    ctx_key_U : component aes256cbc_ctx_decfYi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_key_address0,
        ce0 => ctx_key_ce0,
        we0 => ctx_key_we0,
        d0 => ctx_key_d0,
        q0 => ctx_key_q0,
        address1 => ctx_key_address1,
        ce1 => ctx_key_ce1,
        we1 => ctx_key_we1,
        d1 => ctx_key_d1,
        q1 => ctx_key_q1);

    lastbuf_U : component aes256cbc_iv
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lastbuf_address0,
        ce0 => lastbuf_ce0,
        we0 => lastbuf_we0,
        d0 => buf_q0,
        q0 => lastbuf_q0);

    aes256cbc_AXILiteS_s_axi_U : component aes256cbc_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        memptr_address0 => memptr_address0,
        memptr_ce0 => memptr_ce0,
        memptr_we0 => memptr_we0,
        memptr_d0 => buf_q0,
        memptr_q0 => memptr_q0,
        mode => mode,
        inbuf_addr => inbuf_addr,
        outbuf_addr => outbuf_addr);

    buf_U : component aes256cbc_buf
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf_address0,
        ce0 => buf_ce0,
        we0 => buf_we0,
        d0 => buf_d0,
        q0 => buf_q0,
        address1 => buf_address1,
        ce1 => buf_ce1,
        we1 => buf_we1,
        d1 => buf_d1,
        q1 => buf_q1);

    grp_aes256_encrypt_ecb_fu_540 : component aes256_encrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes256_encrypt_ecb_fu_540_ap_start,
        ap_done => grp_aes256_encrypt_ecb_fu_540_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_fu_540_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_fu_540_ap_ready,
        buf_r_address0 => grp_aes256_encrypt_ecb_fu_540_buf_r_address0,
        buf_r_ce0 => grp_aes256_encrypt_ecb_fu_540_buf_r_ce0,
        buf_r_we0 => grp_aes256_encrypt_ecb_fu_540_buf_r_we0,
        buf_r_d0 => grp_aes256_encrypt_ecb_fu_540_buf_r_d0,
        buf_r_q0 => buf_q0,
        buf_r_address1 => grp_aes256_encrypt_ecb_fu_540_buf_r_address1,
        buf_r_ce1 => grp_aes256_encrypt_ecb_fu_540_buf_r_ce1,
        buf_r_we1 => grp_aes256_encrypt_ecb_fu_540_buf_r_we1,
        buf_r_d1 => grp_aes256_encrypt_ecb_fu_540_buf_r_d1,
        buf_r_q1 => buf_q1,
        ctx_enckey_address0 => grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address0,
        ctx_enckey_ce0 => grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce0,
        ctx_enckey_q0 => ctx_enckey_q0,
        ctx_enckey_address1 => grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address1,
        ctx_enckey_ce1 => grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce1,
        ctx_enckey_q1 => ctx_enckey_q1,
        ctx_key_address0 => grp_aes256_encrypt_ecb_fu_540_ctx_key_address0,
        ctx_key_ce0 => grp_aes256_encrypt_ecb_fu_540_ctx_key_ce0,
        ctx_key_we0 => grp_aes256_encrypt_ecb_fu_540_ctx_key_we0,
        ctx_key_d0 => grp_aes256_encrypt_ecb_fu_540_ctx_key_d0,
        ctx_key_q0 => ctx_key_q0,
        ctx_key_address1 => grp_aes256_encrypt_ecb_fu_540_ctx_key_address1,
        ctx_key_ce1 => grp_aes256_encrypt_ecb_fu_540_ctx_key_ce1,
        ctx_key_we1 => grp_aes256_encrypt_ecb_fu_540_ctx_key_we1,
        ctx_key_d1 => grp_aes256_encrypt_ecb_fu_540_ctx_key_d1,
        ctx_key_q1 => ctx_key_q1);

    grp_aes256_decrypt_ecb_fu_551 : component aes256_decrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes256_decrypt_ecb_fu_551_ap_start,
        ap_done => grp_aes256_decrypt_ecb_fu_551_ap_done,
        ap_idle => grp_aes256_decrypt_ecb_fu_551_ap_idle,
        ap_ready => grp_aes256_decrypt_ecb_fu_551_ap_ready,
        buf_r_address0 => grp_aes256_decrypt_ecb_fu_551_buf_r_address0,
        buf_r_ce0 => grp_aes256_decrypt_ecb_fu_551_buf_r_ce0,
        buf_r_we0 => grp_aes256_decrypt_ecb_fu_551_buf_r_we0,
        buf_r_d0 => grp_aes256_decrypt_ecb_fu_551_buf_r_d0,
        buf_r_q0 => buf_q0,
        buf_r_address1 => grp_aes256_decrypt_ecb_fu_551_buf_r_address1,
        buf_r_ce1 => grp_aes256_decrypt_ecb_fu_551_buf_r_ce1,
        buf_r_we1 => grp_aes256_decrypt_ecb_fu_551_buf_r_we1,
        buf_r_d1 => grp_aes256_decrypt_ecb_fu_551_buf_r_d1,
        buf_r_q1 => buf_q1,
        ctx_deckey_address0 => grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address0,
        ctx_deckey_ce0 => grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce0,
        ctx_deckey_q0 => ctx_deckey_q0,
        ctx_deckey_address1 => grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address1,
        ctx_deckey_ce1 => grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce1,
        ctx_deckey_q1 => ctx_deckey_q1,
        ctx_key_address0 => grp_aes256_decrypt_ecb_fu_551_ctx_key_address0,
        ctx_key_ce0 => grp_aes256_decrypt_ecb_fu_551_ctx_key_ce0,
        ctx_key_we0 => grp_aes256_decrypt_ecb_fu_551_ctx_key_we0,
        ctx_key_d0 => grp_aes256_decrypt_ecb_fu_551_ctx_key_d0,
        ctx_key_q0 => ctx_key_q0,
        ctx_key_address1 => grp_aes256_decrypt_ecb_fu_551_ctx_key_address1,
        ctx_key_ce1 => grp_aes256_decrypt_ecb_fu_551_ctx_key_ce1,
        ctx_key_we1 => grp_aes256_decrypt_ecb_fu_551_ctx_key_we1,
        ctx_key_d1 => grp_aes256_decrypt_ecb_fu_551_ctx_key_d1,
        ctx_key_q1 => ctx_key_q1);

    grp_aes_expandEncKey_fu_564 : component aes_expandEncKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_expandEncKey_fu_564_ap_start,
        ap_done => grp_aes_expandEncKey_fu_564_ap_done,
        ap_idle => grp_aes_expandEncKey_fu_564_ap_idle,
        ap_ready => grp_aes_expandEncKey_fu_564_ap_ready,
        k_address0 => grp_aes_expandEncKey_fu_564_k_address0,
        k_ce0 => grp_aes_expandEncKey_fu_564_k_ce0,
        k_we0 => grp_aes_expandEncKey_fu_564_k_we0,
        k_d0 => grp_aes_expandEncKey_fu_564_k_d0,
        k_q0 => ctx_deckey_q0,
        k_address1 => grp_aes_expandEncKey_fu_564_k_address1,
        k_ce1 => grp_aes_expandEncKey_fu_564_k_ce1,
        k_we1 => grp_aes_expandEncKey_fu_564_k_we1,
        k_d1 => grp_aes_expandEncKey_fu_564_k_d1,
        k_q1 => ctx_deckey_q1,
        rc_read => rcon_i_reg_517,
        ap_return => grp_aes_expandEncKey_fu_564_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = tmp_131_fu_690_p2)))) then 
                    ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes256_decrypt_ecb_fu_551_ap_ready)) then 
                    ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state19) and not((ap_const_lv1_0 = tmp_130_fu_806_p2)))) then 
                    ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes256_encrypt_ecb_fu_540_ap_ready)) then 
                    ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes_expandEncKey_fu_564_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_expandEncKey_fu_564_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = tmp_212_i_fu_908_p2))) then 
                    ap_reg_grp_aes_expandEncKey_fu_564_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_expandEncKey_fu_564_ap_ready)) then 
                    ap_reg_grp_aes_expandEncKey_fu_564_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_10_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_4))) then 
                i_10_reg_370 <= ap_const_lv6_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                i_10_reg_370 <= i_15_reg_953;
            end if; 
        end if;
    end process;

    i_1_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_1))) then 
                i_1_reg_450 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
                i_1_reg_450 <= i_12_reg_1069;
            end if; 
        end if;
    end process;

    i_24_reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28) and not((ap_const_lv1_0 = tmp_i_fu_891_p2)))) then 
                i_24_reg_529 <= ap_const_lv3_7;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state31) and not((ap_const_logic_0 = grp_aes_expandEncKey_fu_564_ap_done)))) then 
                i_24_reg_529 <= phitmp_i_reg_1178;
            end if; 
        end if;
    end process;

    i_2_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = tmp_121_fu_775_p2)))) then 
                i_2_reg_462 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                i_2_reg_462 <= i_16_reg_1082;
            end if; 
        end if;
    end process;

    i_3_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
                i_3_reg_473 <= i_18_reg_1100;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_logic_0 = grp_aes256_encrypt_ecb_fu_540_ap_done)))) then 
                i_3_reg_473 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_4_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22) and not((ap_const_lv1_0 = tmp_135_fu_824_p2)))) then 
                i_4_reg_484 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
                i_4_reg_484 <= i_20_reg_1123;
            end if; 
        end if;
    end process;

    i_5_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_2))) then 
                i_5_reg_394 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                i_5_reg_394 <= i_13_reg_979;
            end if; 
        end if;
    end process;

    i_6_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = tmp_122_fu_659_p2)))) then 
                i_6_reg_406 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                i_6_reg_406 <= i_17_reg_992;
            end if; 
        end if;
    end process;

    i_7_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
                i_7_reg_417 <= i_19_reg_1010;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_logic_0 = grp_aes256_decrypt_ecb_fu_551_ap_done)))) then 
                i_7_reg_417 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_8_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and not((ap_const_lv1_0 = tmp_136_fu_707_p2)))) then 
                i_8_reg_428 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                i_8_reg_428 <= i_21_reg_1028;
            end if; 
        end if;
    end process;

    i_9_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_141_fu_725_p2)))) then 
                i_9_reg_439 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                i_9_reg_439 <= i_22_reg_1051;
            end if; 
        end if;
    end process;

    i_i_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_s_fu_874_p2)))) then 
                i_i_reg_506 <= ap_const_lv6_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
                i_i_reg_506 <= i_23_reg_1159;
            end if; 
        end if;
    end process;

    i_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_0))) then 
                i_reg_495 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
                i_reg_495 <= i_11_reg_1141;
            end if; 
        end if;
    end process;

    i_s_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_3))) then 
                i_s_reg_382 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
                i_s_reg_382 <= i_14_reg_966;
            end if; 
        end if;
    end process;

    rcon_i_reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28) and not((ap_const_lv1_0 = tmp_i_fu_891_p2)))) then 
                rcon_i_reg_517 <= ap_const_lv8_1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state31) and not((ap_const_logic_0 = grp_aes_expandEncKey_fu_564_ap_done)))) then 
                rcon_i_reg_517 <= grp_aes_expandEncKey_fu_564_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_130_fu_806_p2))) then
                buf_addr_5_reg_1087 <= tmp_132_fu_818_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = tmp_136_fu_707_p2))) then
                buf_addr_8_reg_1015 <= tmp_138_fu_719_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then
                i_11_reg_1141 <= i_11_fu_880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                i_12_reg_1069 <= i_12_fu_781_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                i_13_reg_979 <= i_13_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                i_14_reg_966 <= i_14_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_15_reg_953 <= i_15_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then
                i_16_reg_1082 <= i_16_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                i_17_reg_992 <= i_17_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then
                i_18_reg_1100 <= i_18_fu_830_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then
                i_19_reg_1010 <= i_19_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then
                i_20_reg_1123 <= i_20_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                i_21_reg_1028 <= i_21_fu_731_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (mode_read_reg_926 = ap_const_lv3_2))) then
                i_22_reg_1051 <= i_22_fu_751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then
                i_23_reg_1159 <= i_23_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                mode_read_reg_926 <= mode;
                outbuf_addr_read_reg_920 <= outbuf_addr;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = tmp_212_i_fu_908_p2))) then
                phitmp_i_reg_1178 <= phitmp_i_fu_914_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = tmp_140_fu_844_p2))) then
                sum2_reg_1133 <= sum2_fu_865_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (mode_read_reg_926 = ap_const_lv3_2) and (ap_const_lv1_0 = tmp_144_fu_745_p2))) then
                sum6_reg_1061 <= sum6_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = tmp_s_fu_874_p2))) then
                    tmp_125_reg_1146(4 downto 0) <= tmp_125_fu_886_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_131_fu_690_p2))) then
                    tmp_134_reg_997(4 downto 0) <= tmp_134_fu_702_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22) and (ap_const_lv1_0 = tmp_135_fu_824_p2))) then
                    tmp_137_reg_1105(4 downto 0) <= tmp_137_fu_836_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_141_fu_725_p2))) then
                    tmp_143_reg_1033(4 downto 0) <= tmp_143_fu_737_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_2))) then
                tmp_93_reg_940 <= tmp_93_fu_589_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_3))) then
                tmp_94_reg_935 <= tmp_94_fu_585_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_4))) then
                tmp_95_reg_930 <= tmp_95_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22) and not((ap_const_lv1_0 = tmp_135_fu_824_p2)))) then
                tmp_96_reg_1115 <= tmp_96_fu_841_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_141_fu_725_p2)))) then
                tmp_97_reg_1043 <= tmp_97_fu_742_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = tmp_i_fu_891_p2))) then
                    tmp_i_9_reg_1164(5 downto 0) <= tmp_i_9_fu_903_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_1))) then
                tmp_reg_945 <= tmp_fu_593_p1;
            end if;
        end if;
    end process;
    tmp_134_reg_997(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_1033(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_137_reg_1105(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_125_reg_1146(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_i_9_reg_1164(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, mode_read_read_fu_114_p2, mode_read_reg_926, tmp_124_fu_597_p2, tmp_123_fu_628_p2, tmp_122_fu_659_p2, tmp_131_fu_690_p2, tmp_136_fu_707_p2, tmp_141_fu_725_p2, tmp_144_fu_745_p2, tmp_121_fu_775_p2, tmp_130_fu_806_p2, tmp_135_fu_824_p2, tmp_140_fu_844_p2, tmp_s_fu_874_p2, tmp_i_fu_891_p2, tmp_212_i_fu_908_p2, grp_aes_expandEncKey_fu_564_ap_done, grp_aes256_encrypt_ecb_fu_540_ap_done, grp_aes256_decrypt_ecb_fu_551_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                elsif ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_114_p2 = ap_const_lv3_4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((ap_start = ap_const_logic_0)) and not((mode_read_read_fu_114_p2 = ap_const_lv3_0)) and not((mode_read_read_fu_114_p2 = ap_const_lv3_1)) and not((mode_read_read_fu_114_p2 = ap_const_lv3_2)) and not((mode_read_read_fu_114_p2 = ap_const_lv3_3)) and not((mode_read_read_fu_114_p2 = ap_const_lv3_4)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((tmp_124_fu_597_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = tmp_123_fu_628_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_lv1_0 = tmp_122_fu_659_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_lv1_0 = tmp_131_fu_690_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_logic_0 = grp_aes256_decrypt_ecb_fu_551_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (not((ap_const_lv1_0 = tmp_136_fu_707_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (not((ap_const_lv1_0 = tmp_141_fu_725_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((mode_read_reg_926 = ap_const_lv3_0) or (mode_read_reg_926 = ap_const_lv3_1) or not((mode_read_reg_926 = ap_const_lv3_2)) or (mode_read_reg_926 = ap_const_lv3_3) or (mode_read_reg_926 = ap_const_lv3_4) or not((ap_const_lv1_0 = tmp_144_fu_745_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (not((ap_const_lv1_0 = tmp_121_fu_775_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                if (not((ap_const_lv1_0 = tmp_130_fu_806_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                if (not((ap_const_logic_0 = grp_aes256_encrypt_ecb_fu_540_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (not((ap_const_lv1_0 = tmp_135_fu_824_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (not((ap_const_lv1_0 = tmp_140_fu_844_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                if (not((ap_const_lv1_0 = tmp_s_fu_874_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                if (not((ap_const_lv1_0 = tmp_i_fu_891_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state30 => 
                if (not((ap_const_lv1_0 = tmp_212_i_fu_908_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (not((ap_const_logic_0 = grp_aes_expandEncKey_fu_564_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(mode_read_reg_926, ap_CS_fsm_state15, tmp_144_fu_745_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15) and ((mode_read_reg_926 = ap_const_lv3_0) or (mode_read_reg_926 = ap_const_lv3_1) or not((mode_read_reg_926 = ap_const_lv3_2)) or (mode_read_reg_926 = ap_const_lv3_3) or (mode_read_reg_926 = ap_const_lv3_4) or not((ap_const_lv1_0 = tmp_144_fu_745_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(mode_read_reg_926, ap_CS_fsm_state15, tmp_144_fu_745_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15) and ((mode_read_reg_926 = ap_const_lv3_0) or (mode_read_reg_926 = ap_const_lv3_1) or not((mode_read_reg_926 = ap_const_lv3_2)) or (mode_read_reg_926 = ap_const_lv3_3) or (mode_read_reg_926 = ap_const_lv3_4) or not((ap_const_lv1_0 = tmp_144_fu_745_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buf_address0_assign_proc : process(ap_CS_fsm_state8, tmp_134_fu_702_p1, tmp_131_fu_690_p2, ap_CS_fsm_state11, buf_addr_8_reg_1015, ap_CS_fsm_state15, ap_CS_fsm_state19, buf_addr_5_reg_1087, tmp_130_fu_806_p2, ap_CS_fsm_state22, tmp_137_fu_836_p1, ap_CS_fsm_state24, grp_aes256_encrypt_ecb_fu_540_buf_r_address0, grp_aes256_decrypt_ecb_fu_551_buf_r_address0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, tmp_127_fu_685_p1, tmp_138_fu_719_p1, tmp_145_fu_757_p1, tmp_126_fu_801_p1, tmp_132_fu_818_p1, tmp_142_fu_856_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
            buf_address0 <= tmp_142_fu_856_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            buf_address0 <= tmp_137_fu_836_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            buf_address0 <= buf_addr_5_reg_1087;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_130_fu_806_p2))) then 
            buf_address0 <= tmp_132_fu_818_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            buf_address0 <= tmp_126_fu_801_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            buf_address0 <= tmp_145_fu_757_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            buf_address0 <= buf_addr_8_reg_1015;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            buf_address0 <= tmp_138_fu_719_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_131_fu_690_p2))) then 
            buf_address0 <= tmp_134_fu_702_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            buf_address0 <= tmp_127_fu_685_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            buf_address0 <= grp_aes256_decrypt_ecb_fu_551_buf_r_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            buf_address0 <= grp_aes256_encrypt_ecb_fu_540_buf_r_address0;
        else 
            buf_address0 <= "XXXX";
        end if; 
    end process;


    buf_address1_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_buf_r_address1, grp_aes256_decrypt_ecb_fu_551_buf_r_address1, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            buf_address1 <= grp_aes256_decrypt_ecb_fu_551_buf_r_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            buf_address1 <= grp_aes256_encrypt_ecb_fu_540_buf_r_address1;
        else 
            buf_address1 <= "XXXX";
        end if; 
    end process;


    buf_ce0_assign_proc : process(ap_CS_fsm_state8, tmp_131_fu_690_p2, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, tmp_130_fu_806_p2, ap_CS_fsm_state22, ap_CS_fsm_state24, grp_aes256_encrypt_ecb_fu_540_buf_r_ce0, grp_aes256_decrypt_ecb_fu_551_buf_r_ce0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_131_fu_690_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_130_fu_806_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_1 = ap_CS_fsm_state24)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)))) then 
            buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            buf_ce0 <= grp_aes256_decrypt_ecb_fu_551_buf_r_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            buf_ce0 <= grp_aes256_encrypt_ecb_fu_540_buf_r_ce0;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_ce1_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_buf_r_ce1, grp_aes256_decrypt_ecb_fu_551_buf_r_ce1, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            buf_ce1 <= grp_aes256_decrypt_ecb_fu_551_buf_r_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            buf_ce1 <= grp_aes256_encrypt_ecb_fu_540_buf_r_ce1;
        else 
            buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_d0_assign_proc : process(memptr_q0, grp_aes256_encrypt_ecb_fu_540_buf_r_d0, grp_aes256_decrypt_ecb_fu_551_buf_r_d0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, grp_fu_574_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)))) then 
            buf_d0 <= grp_fu_574_p2;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            buf_d0 <= memptr_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            buf_d0 <= grp_aes256_decrypt_ecb_fu_551_buf_r_d0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            buf_d0 <= grp_aes256_encrypt_ecb_fu_540_buf_r_d0;
        else 
            buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_d1_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_buf_r_d1, grp_aes256_decrypt_ecb_fu_551_buf_r_d1, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            buf_d1 <= grp_aes256_decrypt_ecb_fu_551_buf_r_d1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            buf_d1 <= grp_aes256_encrypt_ecb_fu_540_buf_r_d1;
        else 
            buf_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_we0_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_buf_r_we0, grp_aes256_decrypt_ecb_fu_551_buf_r_we0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)))) then 
            buf_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            buf_we0 <= grp_aes256_decrypt_ecb_fu_551_buf_r_we0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            buf_we0 <= grp_aes256_encrypt_ecb_fu_540_buf_r_we0;
        else 
            buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_we1_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_buf_r_we1, grp_aes256_decrypt_ecb_fu_551_buf_r_we1, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            buf_we1 <= grp_aes256_decrypt_ecb_fu_551_buf_r_we1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            buf_we1 <= grp_aes256_encrypt_ecb_fu_540_buf_r_we1;
        else 
            buf_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_address0_assign_proc : process(tmp_i_9_reg_1164, ap_CS_fsm_state31, grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address0, grp_aes_expandEncKey_fu_564_k_address0, ap_CS_fsm_state10, ap_CS_fsm_state29)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
            ctx_deckey_address0 <= tmp_i_9_reg_1164(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            ctx_deckey_address0 <= grp_aes_expandEncKey_fu_564_k_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_address0 <= grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address0;
        else 
            ctx_deckey_address0 <= "XXXXX";
        end if; 
    end process;


    ctx_deckey_address1_assign_proc : process(ap_CS_fsm_state31, grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address1, grp_aes_expandEncKey_fu_564_k_address1, ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            ctx_deckey_address1 <= grp_aes_expandEncKey_fu_564_k_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_address1 <= grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address1;
        else 
            ctx_deckey_address1 <= "XXXXX";
        end if; 
    end process;


    ctx_deckey_ce0_assign_proc : process(ap_CS_fsm_state31, grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce0, grp_aes_expandEncKey_fu_564_k_ce0, ap_CS_fsm_state10, ap_CS_fsm_state29)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
            ctx_deckey_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            ctx_deckey_ce0 <= grp_aes_expandEncKey_fu_564_k_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_ce0 <= grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce0;
        else 
            ctx_deckey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_ce1_assign_proc : process(ap_CS_fsm_state31, grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce1, grp_aes_expandEncKey_fu_564_k_ce1, ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            ctx_deckey_ce1 <= grp_aes_expandEncKey_fu_564_k_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_ce1 <= grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce1;
        else 
            ctx_deckey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_d0_assign_proc : process(key_q0, ap_CS_fsm_state31, grp_aes_expandEncKey_fu_564_k_d0, ap_CS_fsm_state29)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
            ctx_deckey_d0 <= key_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            ctx_deckey_d0 <= grp_aes_expandEncKey_fu_564_k_d0;
        else 
            ctx_deckey_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_deckey_we0_assign_proc : process(ap_CS_fsm_state31, grp_aes_expandEncKey_fu_564_k_we0, ap_CS_fsm_state29)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state29)))) then 
            ctx_deckey_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            ctx_deckey_we0 <= grp_aes_expandEncKey_fu_564_k_we0;
        else 
            ctx_deckey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_we1_assign_proc : process(ap_CS_fsm_state31, grp_aes_expandEncKey_fu_564_k_we1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            ctx_deckey_we1 <= grp_aes_expandEncKey_fu_564_k_we1;
        else 
            ctx_deckey_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_address0_assign_proc : process(tmp_i_9_reg_1164, grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address0, ap_CS_fsm_state21, ap_CS_fsm_state29)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
            ctx_enckey_address0 <= tmp_i_9_reg_1164(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_enckey_address0 <= grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address0;
        else 
            ctx_enckey_address0 <= "XXXXX";
        end if; 
    end process;


    ctx_enckey_ce0_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce0, ap_CS_fsm_state21, ap_CS_fsm_state29)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
            ctx_enckey_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_enckey_ce0 <= grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce0;
        else 
            ctx_enckey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_ce1_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce1, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_enckey_ce1 <= grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce1;
        else 
            ctx_enckey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_we0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state29)))) then 
            ctx_enckey_we0 <= ap_const_logic_1;
        else 
            ctx_enckey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_address0_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_key_address0, grp_aes256_decrypt_ecb_fu_551_ctx_key_address0, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_key_address0 <= grp_aes256_decrypt_ecb_fu_551_ctx_key_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_key_address0 <= grp_aes256_encrypt_ecb_fu_540_ctx_key_address0;
        else 
            ctx_key_address0 <= "XXXXX";
        end if; 
    end process;


    ctx_key_address1_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_key_address1, grp_aes256_decrypt_ecb_fu_551_ctx_key_address1, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_key_address1 <= grp_aes256_decrypt_ecb_fu_551_ctx_key_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_key_address1 <= grp_aes256_encrypt_ecb_fu_540_ctx_key_address1;
        else 
            ctx_key_address1 <= "XXXXX";
        end if; 
    end process;


    ctx_key_ce0_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_key_ce0, grp_aes256_decrypt_ecb_fu_551_ctx_key_ce0, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_key_ce0 <= grp_aes256_decrypt_ecb_fu_551_ctx_key_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_key_ce0 <= grp_aes256_encrypt_ecb_fu_540_ctx_key_ce0;
        else 
            ctx_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_ce1_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_key_ce1, grp_aes256_decrypt_ecb_fu_551_ctx_key_ce1, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_key_ce1 <= grp_aes256_decrypt_ecb_fu_551_ctx_key_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_key_ce1 <= grp_aes256_encrypt_ecb_fu_540_ctx_key_ce1;
        else 
            ctx_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_d0_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_key_d0, grp_aes256_decrypt_ecb_fu_551_ctx_key_d0, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_key_d0 <= grp_aes256_decrypt_ecb_fu_551_ctx_key_d0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_key_d0 <= grp_aes256_encrypt_ecb_fu_540_ctx_key_d0;
        else 
            ctx_key_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_key_d1_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_key_d1, grp_aes256_decrypt_ecb_fu_551_ctx_key_d1, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_key_d1 <= grp_aes256_decrypt_ecb_fu_551_ctx_key_d1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_key_d1 <= grp_aes256_encrypt_ecb_fu_540_ctx_key_d1;
        else 
            ctx_key_d1 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_key_we0_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_key_we0, grp_aes256_decrypt_ecb_fu_551_ctx_key_we0, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_key_we0 <= grp_aes256_decrypt_ecb_fu_551_ctx_key_we0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_key_we0 <= grp_aes256_encrypt_ecb_fu_540_ctx_key_we0;
        else 
            ctx_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_we1_assign_proc : process(grp_aes256_encrypt_ecb_fu_540_ctx_key_we1, grp_aes256_decrypt_ecb_fu_551_ctx_key_we1, ap_CS_fsm_state10, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            ctx_key_we1 <= grp_aes256_decrypt_ecb_fu_551_ctx_key_we1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ctx_key_we1 <= grp_aes256_encrypt_ecb_fu_540_ctx_key_we1;
        else 
            ctx_key_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes256_decrypt_ecb_fu_551_ap_start <= ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start;
    grp_aes256_encrypt_ecb_fu_540_ap_start <= ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start;
    grp_aes_expandEncKey_fu_564_ap_start <= ap_reg_grp_aes_expandEncKey_fu_564_ap_start;
    grp_fu_574_p2 <= (xorv_q0 xor buf_q0);
    i_11_fu_880_p2 <= std_logic_vector(unsigned(i_reg_495) + unsigned(ap_const_lv5_1));
    i_12_fu_781_p2 <= std_logic_vector(unsigned(i_1_reg_450) + unsigned(ap_const_lv5_1));
    i_13_fu_665_p2 <= std_logic_vector(unsigned(i_5_reg_394) + unsigned(ap_const_lv5_1));
    i_14_fu_634_p2 <= std_logic_vector(unsigned(i_s_reg_382) + unsigned(ap_const_lv5_1));
    i_15_fu_603_p2 <= std_logic_vector(unsigned(i_10_reg_370) + unsigned(ap_const_lv6_1));
    i_16_fu_812_p2 <= std_logic_vector(unsigned(i_2_reg_462) + unsigned(ap_const_lv5_1));
    i_17_fu_696_p2 <= std_logic_vector(unsigned(i_6_reg_406) + unsigned(ap_const_lv5_1));
    i_18_fu_830_p2 <= std_logic_vector(unsigned(i_3_reg_473) + unsigned(ap_const_lv5_1));
    i_19_fu_713_p2 <= std_logic_vector(unsigned(i_7_reg_417) + unsigned(ap_const_lv5_1));
    i_20_fu_850_p2 <= std_logic_vector(unsigned(i_4_reg_484) + unsigned(ap_const_lv5_1));
    i_21_fu_731_p2 <= std_logic_vector(unsigned(i_8_reg_428) + unsigned(ap_const_lv5_1));
    i_22_fu_751_p2 <= std_logic_vector(unsigned(i_9_reg_439) + unsigned(ap_const_lv5_1));
    i_23_fu_897_p2 <= std_logic_vector(unsigned(i_i_reg_506) + unsigned(ap_const_lv6_1));

    iv_address0_assign_proc : process(ap_CS_fsm_state26, tmp_125_fu_886_p1, ap_CS_fsm_state5, tmp_128_fu_654_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            iv_address0 <= tmp_125_fu_886_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            iv_address0 <= tmp_128_fu_654_p1(4 - 1 downto 0);
        else 
            iv_address0 <= "XXXX";
        end if; 
    end process;


    iv_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state26)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)))) then 
            iv_ce0 <= ap_const_logic_1;
        else 
            iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)))) then 
            iv_we0 <= ap_const_logic_1;
        else 
            iv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    key_address0_assign_proc : process(ap_CS_fsm_state28, tmp_i_9_fu_903_p1, ap_CS_fsm_state3, tmp_129_fu_623_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
            key_address0 <= tmp_i_9_fu_903_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            key_address0 <= tmp_129_fu_623_p1(5 - 1 downto 0);
        else 
            key_address0 <= "XXXXX";
        end if; 
    end process;


    key_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            key_we0 <= ap_const_logic_1;
        else 
            key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lastbuf_address0_assign_proc : process(tmp_134_reg_997, ap_CS_fsm_state13, tmp_143_fu_737_p1, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            lastbuf_address0 <= tmp_143_fu_737_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            lastbuf_address0 <= tmp_134_reg_997(4 - 1 downto 0);
        else 
            lastbuf_address0 <= "XXXX";
        end if; 
    end process;


    lastbuf_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)))) then 
            lastbuf_ce0 <= ap_const_logic_1;
        else 
            lastbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lastbuf_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state9)))) then 
            lastbuf_we0 <= ap_const_logic_1;
        else 
            lastbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    memptr_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state25, sum1_cast_fu_618_p1, sum8_cast_fu_649_p1, sum4_cast_fu_680_p1, sum6_cast_fu_771_p1, sum_cast_fu_796_p1, sum2_cast_fu_870_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
            memptr_address0 <= sum2_cast_fu_870_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            memptr_address0 <= sum_cast_fu_796_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            memptr_address0 <= sum6_cast_fu_771_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            memptr_address0 <= sum4_cast_fu_680_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            memptr_address0 <= sum8_cast_fu_649_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            memptr_address0 <= sum1_cast_fu_618_p1(6 - 1 downto 0);
        else 
            memptr_address0 <= "XXXXXX";
        end if; 
    end process;


    memptr_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state25)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)))) then 
            memptr_ce0 <= ap_const_logic_1;
        else 
            memptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    memptr_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state25)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)))) then 
            memptr_we0 <= ap_const_logic_1;
        else 
            memptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mode_read_read_fu_114_p2 <= mode;
    phitmp_i_fu_914_p2 <= std_logic_vector(unsigned(i_24_reg_529) + unsigned(ap_const_lv3_7));
    sum1_cast_fu_618_p1 <= std_logic_vector(resize(unsigned(sum1_fu_613_p2),64));
    sum1_fu_613_p2 <= std_logic_vector(unsigned(tmp_95_reg_930) + unsigned(tmp_156_cast_fu_609_p1));
    sum2_cast_fu_870_p1 <= std_logic_vector(resize(unsigned(sum2_reg_1133),64));
    sum2_fu_865_p2 <= std_logic_vector(unsigned(tmp_96_reg_1115) + unsigned(tmp_170_cast_fu_861_p1));
    sum4_cast_fu_680_p1 <= std_logic_vector(resize(unsigned(sum4_fu_675_p2),64));
    sum4_fu_675_p2 <= std_logic_vector(unsigned(tmp_93_reg_940) + unsigned(tmp_154_cast_fu_671_p1));
    sum6_cast_fu_771_p1 <= std_logic_vector(resize(unsigned(sum6_reg_1061),64));
    sum6_fu_766_p2 <= std_logic_vector(unsigned(tmp_97_reg_1043) + unsigned(tmp_174_cast_fu_762_p1));
    sum8_cast_fu_649_p1 <= std_logic_vector(resize(unsigned(sum8_fu_644_p2),64));
    sum8_fu_644_p2 <= std_logic_vector(unsigned(tmp_94_reg_935) + unsigned(tmp_155_cast_fu_640_p1));
    sum_cast_fu_796_p1 <= std_logic_vector(resize(unsigned(sum_fu_791_p2),64));
    sum_fu_791_p2 <= std_logic_vector(unsigned(tmp_reg_945) + unsigned(tmp_153_cast_fu_787_p1));
    tmp_121_fu_775_p2 <= "1" when (i_1_reg_450 = ap_const_lv5_10) else "0";
    tmp_122_fu_659_p2 <= "1" when (i_5_reg_394 = ap_const_lv5_10) else "0";
    tmp_123_fu_628_p2 <= "1" when (i_s_reg_382 = ap_const_lv5_10) else "0";
    tmp_124_fu_597_p2 <= "1" when (i_10_reg_370 = ap_const_lv6_20) else "0";
    tmp_125_fu_886_p1 <= std_logic_vector(resize(unsigned(i_reg_495),64));
    tmp_126_fu_801_p1 <= std_logic_vector(resize(unsigned(i_1_reg_450),64));
    tmp_127_fu_685_p1 <= std_logic_vector(resize(unsigned(i_5_reg_394),64));
    tmp_128_fu_654_p1 <= std_logic_vector(resize(unsigned(i_s_reg_382),64));
    tmp_129_fu_623_p1 <= std_logic_vector(resize(unsigned(i_10_reg_370),64));
    tmp_130_fu_806_p2 <= "1" when (i_2_reg_462 = ap_const_lv5_10) else "0";
    tmp_131_fu_690_p2 <= "1" when (i_6_reg_406 = ap_const_lv5_10) else "0";
    tmp_132_fu_818_p1 <= std_logic_vector(resize(unsigned(i_2_reg_462),64));
    tmp_134_fu_702_p1 <= std_logic_vector(resize(unsigned(i_6_reg_406),64));
    tmp_135_fu_824_p2 <= "1" when (i_3_reg_473 = ap_const_lv5_10) else "0";
    tmp_136_fu_707_p2 <= "1" when (i_7_reg_417 = ap_const_lv5_10) else "0";
    tmp_137_fu_836_p1 <= std_logic_vector(resize(unsigned(i_3_reg_473),64));
    tmp_138_fu_719_p1 <= std_logic_vector(resize(unsigned(i_7_reg_417),64));
    tmp_140_fu_844_p2 <= "1" when (i_4_reg_484 = ap_const_lv5_10) else "0";
    tmp_141_fu_725_p2 <= "1" when (i_8_reg_428 = ap_const_lv5_10) else "0";
    tmp_142_fu_856_p1 <= std_logic_vector(resize(unsigned(i_4_reg_484),64));
    tmp_143_fu_737_p1 <= std_logic_vector(resize(unsigned(i_8_reg_428),64));
    tmp_144_fu_745_p2 <= "1" when (i_9_reg_439 = ap_const_lv5_10) else "0";
    tmp_145_fu_757_p1 <= std_logic_vector(resize(unsigned(i_9_reg_439),64));
    tmp_153_cast_fu_787_p1 <= std_logic_vector(resize(unsigned(i_1_reg_450),8));
    tmp_154_cast_fu_671_p1 <= std_logic_vector(resize(unsigned(i_5_reg_394),8));
    tmp_155_cast_fu_640_p1 <= std_logic_vector(resize(unsigned(i_s_reg_382),8));
    tmp_156_cast_fu_609_p1 <= std_logic_vector(resize(unsigned(i_10_reg_370),8));
    tmp_170_cast_fu_861_p1 <= std_logic_vector(resize(unsigned(i_4_reg_484),8));
    tmp_174_cast_fu_762_p1 <= std_logic_vector(resize(unsigned(i_9_reg_439),8));
    tmp_212_i_fu_908_p2 <= "1" when (i_24_reg_529 = ap_const_lv3_0) else "0";
    tmp_93_fu_589_p1 <= inbuf_addr(8 - 1 downto 0);
    tmp_94_fu_585_p1 <= inbuf_addr(8 - 1 downto 0);
    tmp_95_fu_581_p1 <= inbuf_addr(8 - 1 downto 0);
    tmp_96_fu_841_p1 <= outbuf_addr_read_reg_920(8 - 1 downto 0);
    tmp_97_fu_742_p1 <= outbuf_addr_read_reg_920(8 - 1 downto 0);
    tmp_fu_593_p1 <= inbuf_addr(8 - 1 downto 0);
    tmp_i_9_fu_903_p1 <= std_logic_vector(resize(unsigned(i_i_reg_506),64));
    tmp_i_fu_891_p2 <= "1" when (i_i_reg_506 = ap_const_lv6_20) else "0";
    tmp_s_fu_874_p2 <= "1" when (i_reg_495 = ap_const_lv5_10) else "0";

    xorv_address0_assign_proc : process(ap_CS_fsm_state11, tmp_143_reg_1033, ap_CS_fsm_state19, tmp_137_reg_1105, tmp_125_reg_1146, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state27, tmp_138_fu_719_p1, tmp_132_fu_818_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            xorv_address0 <= tmp_125_reg_1146(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            xorv_address0 <= tmp_137_reg_1105(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            xorv_address0 <= tmp_132_fu_818_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            xorv_address0 <= tmp_143_reg_1033(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            xorv_address0 <= tmp_138_fu_719_p1(4 - 1 downto 0);
        else 
            xorv_address0 <= "XXXX";
        end if; 
    end process;


    xorv_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state27)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state23)) or ((ap_const_lv1_1 = ap_CS_fsm_state27)))) then 
            xorv_ce0 <= ap_const_logic_1;
        else 
            xorv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xorv_d0_assign_proc : process(iv_q0, lastbuf_q0, buf_q0, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            xorv_d0 <= iv_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            xorv_d0 <= buf_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            xorv_d0 <= lastbuf_q0;
        else 
            xorv_d0 <= "XXXXXXXX";
        end if; 
    end process;


    xorv_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state27)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state23)) or ((ap_const_lv1_1 = ap_CS_fsm_state27)))) then 
            xorv_we0 <= ap_const_logic_1;
        else 
            xorv_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
