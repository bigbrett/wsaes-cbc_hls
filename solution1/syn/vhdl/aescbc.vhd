-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aescbc is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of aescbc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aescbc,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.500000,HLS_SYN_LAT=832,HLS_SYN_TPT=none,HLS_SYN_MEM=15,HLS_SYN_DSP=0,HLS_SYN_FF=1671,HLS_SYN_LUT=2785}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal mode : STD_LOGIC_VECTOR (2 downto 0);
    signal data_in_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_in_ce0 : STD_LOGIC;
    signal data_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_out_ce0 : STD_LOGIC;
    signal data_out_we0 : STD_LOGIC;
    signal data_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal iv_ce0 : STD_LOGIC;
    signal iv_we0 : STD_LOGIC;
    signal iv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xorv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xorv_ce0 : STD_LOGIC;
    signal xorv_we0 : STD_LOGIC;
    signal xorv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xorv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal key_ce0 : STD_LOGIC;
    signal key_we0 : STD_LOGIC;
    signal key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_deckey_ce0 : STD_LOGIC;
    signal ctx_deckey_we0 : STD_LOGIC;
    signal ctx_deckey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_deckey_ce1 : STD_LOGIC;
    signal ctx_deckey_we1 : STD_LOGIC;
    signal ctx_deckey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_enckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_enckey_ce0 : STD_LOGIC;
    signal ctx_enckey_we0 : STD_LOGIC;
    signal ctx_enckey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_enckey_ce1 : STD_LOGIC;
    signal ctx_enckey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_key_ce0 : STD_LOGIC;
    signal ctx_key_we0 : STD_LOGIC;
    signal ctx_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_key_ce1 : STD_LOGIC;
    signal ctx_key_we1 : STD_LOGIC;
    signal ctx_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lastbuf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lastbuf_ce0 : STD_LOGIC;
    signal lastbuf_we0 : STD_LOGIC;
    signal lastbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_read_read_fu_118_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mode_read_reg_929 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_18_fu_649_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_18_reg_936 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_9_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_941 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_23_fu_666_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_17_fu_683_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_17_reg_962 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_2_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_967 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_22_fu_700_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_16_fu_717_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_16_reg_988 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_1_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_993 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_fu_734_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_21_reg_1006 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_18_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_1011 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_25_fu_751_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_25_reg_1024 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal buf_addr_5_reg_1029 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_27_fu_769_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_27_reg_1042 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_29_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_reg_1047 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_28_fu_786_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_28_reg_1060 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_31_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_reg_1065 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_fu_803_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_15_reg_1078 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_s_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1083 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_20_fu_820_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_20_reg_1096 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal buf_addr_2_reg_1101 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_24_fu_838_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_24_reg_1114 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_23_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1119 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_26_fu_855_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_26_reg_1132 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_28_fu_861_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_reg_1137 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_872_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_19_fu_889_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_19_reg_1158 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_15_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_reg_1163 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_29_fu_906_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_29_reg_1176 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_i_9_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_9_reg_1181 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_i_fu_923_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal phitmp_i_reg_1195 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_90_i_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_626_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_aes_expandEncKey_fu_626_ap_done : STD_LOGIC;
    signal buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_we0 : STD_LOGIC;
    signal buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_ce1 : STD_LOGIC;
    signal buf_we1 : STD_LOGIC;
    signal buf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_buf_r_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_buf_r_we0 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_buf_r_ce1 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_buf_r_we1 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_buf_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_ctx_enckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_ctx_enckey_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_ctx_enckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_ctx_enckey_ce1 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_ctx_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_ctx_key_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_ctx_key_we0 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_ctx_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_ctx_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_encrypt_ecb_fu_602_ctx_key_ce1 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_ctx_key_we1 : STD_LOGIC;
    signal grp_aes_encrypt_ecb_fu_602_ctx_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_ap_start : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_ap_done : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_ap_idle : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_ap_ready : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_buf_r_ce0 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_buf_r_we0 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_buf_r_ce1 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_buf_r_we1 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_buf_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_ctx_deckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_ctx_deckey_ce0 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_ctx_deckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_ctx_deckey_ce1 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_ctx_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_ctx_key_ce0 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_ctx_key_we0 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_ctx_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_ctx_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_decrypt_ecb_fu_613_ctx_key_ce1 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_ctx_key_we1 : STD_LOGIC;
    signal grp_aes_decrypt_ecb_fu_613_ctx_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_626_ap_start : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_626_ap_idle : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_626_ap_ready : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_626_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_expandEncKey_fu_626_k_ce0 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_626_k_we0 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_626_k_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_626_k_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_expandEncKey_fu_626_k_ce1 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_626_k_we1 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_626_k_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_11_reg_403 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_14_reg_414 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_reg_425 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_12_reg_436 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_reg_447 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_7_reg_458 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_8_reg_469 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_9_reg_480 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_10_reg_491 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_2_reg_502 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_3_reg_513 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_4_reg_524 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_5_reg_535 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_reg_546 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_557 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_i_reg_568 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal rcon_i_reg_579 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_30_reg_591 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_grp_aes_encrypt_ecb_fu_602_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_aes_decrypt_ecb_fu_613_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_aes_expandEncKey_fu_626_ap_start : STD_LOGIC := '0';
    signal tmp_20_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_636_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);

    component aes_encrypt_ecb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_we1 : OUT STD_LOGIC;
        buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_enckey_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_enckey_ce0 : OUT STD_LOGIC;
        ctx_enckey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_enckey_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_enckey_ce1 : OUT STD_LOGIC;
        ctx_enckey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce0 : OUT STD_LOGIC;
        ctx_key_we0 : OUT STD_LOGIC;
        ctx_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce1 : OUT STD_LOGIC;
        ctx_key_we1 : OUT STD_LOGIC;
        ctx_key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_decrypt_ecb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_we1 : OUT STD_LOGIC;
        buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_deckey_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_deckey_ce0 : OUT STD_LOGIC;
        ctx_deckey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_deckey_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_deckey_ce1 : OUT STD_LOGIC;
        ctx_deckey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce0 : OUT STD_LOGIC;
        ctx_key_we0 : OUT STD_LOGIC;
        ctx_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce1 : OUT STD_LOGIC;
        ctx_key_we1 : OUT STD_LOGIC;
        ctx_key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_expandEncKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce0 : OUT STD_LOGIC;
        k_we0 : OUT STD_LOGIC;
        k_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        k_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce1 : OUT STD_LOGIC;
        k_we1 : OUT STD_LOGIC;
        k_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        k_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aescbc_iv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aescbc_key IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aescbc_ctx_deckey IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aescbc_ctx_enckey IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aescbc_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aescbc_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        mode : OUT STD_LOGIC_VECTOR (2 downto 0);
        data_in_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_in_ce0 : IN STD_LOGIC;
        data_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_out_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        data_out_ce0 : IN STD_LOGIC;
        data_out_we0 : IN STD_LOGIC;
        data_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    iv_U : component aescbc_iv
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iv_address0,
        ce0 => iv_ce0,
        we0 => iv_we0,
        d0 => data_in_q0,
        q0 => iv_q0);

    xorv_U : component aescbc_iv
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xorv_address0,
        ce0 => xorv_ce0,
        we0 => xorv_we0,
        d0 => xorv_d0,
        q0 => xorv_q0);

    key_U : component aescbc_key
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => key_address0,
        ce0 => key_ce0,
        we0 => key_we0,
        d0 => data_in_q0,
        q0 => key_q0);

    ctx_deckey_U : component aescbc_ctx_deckey
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_deckey_address0,
        ce0 => ctx_deckey_ce0,
        we0 => ctx_deckey_we0,
        d0 => ctx_deckey_d0,
        q0 => ctx_deckey_q0,
        address1 => ctx_deckey_address1,
        ce1 => ctx_deckey_ce1,
        we1 => ctx_deckey_we1,
        d1 => grp_aes_expandEncKey_fu_626_k_d1,
        q1 => ctx_deckey_q1);

    ctx_enckey_U : component aescbc_ctx_enckey
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_enckey_address0,
        ce0 => ctx_enckey_ce0,
        we0 => ctx_enckey_we0,
        d0 => key_q0,
        q0 => ctx_enckey_q0,
        address1 => grp_aes_encrypt_ecb_fu_602_ctx_enckey_address1,
        ce1 => ctx_enckey_ce1,
        q1 => ctx_enckey_q1);

    ctx_key_U : component aescbc_ctx_deckey
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_key_address0,
        ce0 => ctx_key_ce0,
        we0 => ctx_key_we0,
        d0 => ctx_key_d0,
        q0 => ctx_key_q0,
        address1 => ctx_key_address1,
        ce1 => ctx_key_ce1,
        we1 => ctx_key_we1,
        d1 => ctx_key_d1,
        q1 => ctx_key_q1);

    lastbuf_U : component aescbc_iv
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lastbuf_address0,
        ce0 => lastbuf_ce0,
        we0 => lastbuf_we0,
        d0 => buf_q0,
        q0 => lastbuf_q0);

    aescbc_AXILiteS_s_axi_U : component aescbc_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        mode => mode,
        data_in_address0 => data_in_address0,
        data_in_ce0 => data_in_ce0,
        data_in_q0 => data_in_q0,
        data_out_address0 => data_out_address0,
        data_out_ce0 => data_out_ce0,
        data_out_we0 => data_out_we0,
        data_out_d0 => data_out_d0);

    buf_U : component aescbc_buf
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf_address0,
        ce0 => buf_ce0,
        we0 => buf_we0,
        d0 => buf_d0,
        q0 => buf_q0,
        address1 => buf_address1,
        ce1 => buf_ce1,
        we1 => buf_we1,
        d1 => buf_d1,
        q1 => buf_q1);

    grp_aes_encrypt_ecb_fu_602 : component aes_encrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_encrypt_ecb_fu_602_ap_start,
        ap_done => grp_aes_encrypt_ecb_fu_602_ap_done,
        ap_idle => grp_aes_encrypt_ecb_fu_602_ap_idle,
        ap_ready => grp_aes_encrypt_ecb_fu_602_ap_ready,
        buf_r_address0 => grp_aes_encrypt_ecb_fu_602_buf_r_address0,
        buf_r_ce0 => grp_aes_encrypt_ecb_fu_602_buf_r_ce0,
        buf_r_we0 => grp_aes_encrypt_ecb_fu_602_buf_r_we0,
        buf_r_d0 => grp_aes_encrypt_ecb_fu_602_buf_r_d0,
        buf_r_q0 => buf_q0,
        buf_r_address1 => grp_aes_encrypt_ecb_fu_602_buf_r_address1,
        buf_r_ce1 => grp_aes_encrypt_ecb_fu_602_buf_r_ce1,
        buf_r_we1 => grp_aes_encrypt_ecb_fu_602_buf_r_we1,
        buf_r_d1 => grp_aes_encrypt_ecb_fu_602_buf_r_d1,
        buf_r_q1 => buf_q1,
        ctx_enckey_address0 => grp_aes_encrypt_ecb_fu_602_ctx_enckey_address0,
        ctx_enckey_ce0 => grp_aes_encrypt_ecb_fu_602_ctx_enckey_ce0,
        ctx_enckey_q0 => ctx_enckey_q0,
        ctx_enckey_address1 => grp_aes_encrypt_ecb_fu_602_ctx_enckey_address1,
        ctx_enckey_ce1 => grp_aes_encrypt_ecb_fu_602_ctx_enckey_ce1,
        ctx_enckey_q1 => ctx_enckey_q1,
        ctx_key_address0 => grp_aes_encrypt_ecb_fu_602_ctx_key_address0,
        ctx_key_ce0 => grp_aes_encrypt_ecb_fu_602_ctx_key_ce0,
        ctx_key_we0 => grp_aes_encrypt_ecb_fu_602_ctx_key_we0,
        ctx_key_d0 => grp_aes_encrypt_ecb_fu_602_ctx_key_d0,
        ctx_key_q0 => ctx_key_q0,
        ctx_key_address1 => grp_aes_encrypt_ecb_fu_602_ctx_key_address1,
        ctx_key_ce1 => grp_aes_encrypt_ecb_fu_602_ctx_key_ce1,
        ctx_key_we1 => grp_aes_encrypt_ecb_fu_602_ctx_key_we1,
        ctx_key_d1 => grp_aes_encrypt_ecb_fu_602_ctx_key_d1,
        ctx_key_q1 => ctx_key_q1);

    grp_aes_decrypt_ecb_fu_613 : component aes_decrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_decrypt_ecb_fu_613_ap_start,
        ap_done => grp_aes_decrypt_ecb_fu_613_ap_done,
        ap_idle => grp_aes_decrypt_ecb_fu_613_ap_idle,
        ap_ready => grp_aes_decrypt_ecb_fu_613_ap_ready,
        buf_r_address0 => grp_aes_decrypt_ecb_fu_613_buf_r_address0,
        buf_r_ce0 => grp_aes_decrypt_ecb_fu_613_buf_r_ce0,
        buf_r_we0 => grp_aes_decrypt_ecb_fu_613_buf_r_we0,
        buf_r_d0 => grp_aes_decrypt_ecb_fu_613_buf_r_d0,
        buf_r_q0 => buf_q0,
        buf_r_address1 => grp_aes_decrypt_ecb_fu_613_buf_r_address1,
        buf_r_ce1 => grp_aes_decrypt_ecb_fu_613_buf_r_ce1,
        buf_r_we1 => grp_aes_decrypt_ecb_fu_613_buf_r_we1,
        buf_r_d1 => grp_aes_decrypt_ecb_fu_613_buf_r_d1,
        buf_r_q1 => buf_q1,
        ctx_deckey_address0 => grp_aes_decrypt_ecb_fu_613_ctx_deckey_address0,
        ctx_deckey_ce0 => grp_aes_decrypt_ecb_fu_613_ctx_deckey_ce0,
        ctx_deckey_q0 => ctx_deckey_q0,
        ctx_deckey_address1 => grp_aes_decrypt_ecb_fu_613_ctx_deckey_address1,
        ctx_deckey_ce1 => grp_aes_decrypt_ecb_fu_613_ctx_deckey_ce1,
        ctx_deckey_q1 => ctx_deckey_q1,
        ctx_key_address0 => grp_aes_decrypt_ecb_fu_613_ctx_key_address0,
        ctx_key_ce0 => grp_aes_decrypt_ecb_fu_613_ctx_key_ce0,
        ctx_key_we0 => grp_aes_decrypt_ecb_fu_613_ctx_key_we0,
        ctx_key_d0 => grp_aes_decrypt_ecb_fu_613_ctx_key_d0,
        ctx_key_q0 => ctx_key_q0,
        ctx_key_address1 => grp_aes_decrypt_ecb_fu_613_ctx_key_address1,
        ctx_key_ce1 => grp_aes_decrypt_ecb_fu_613_ctx_key_ce1,
        ctx_key_we1 => grp_aes_decrypt_ecb_fu_613_ctx_key_we1,
        ctx_key_d1 => grp_aes_decrypt_ecb_fu_613_ctx_key_d1,
        ctx_key_q1 => ctx_key_q1);

    grp_aes_expandEncKey_fu_626 : component aes_expandEncKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_expandEncKey_fu_626_ap_start,
        ap_done => grp_aes_expandEncKey_fu_626_ap_done,
        ap_idle => grp_aes_expandEncKey_fu_626_ap_idle,
        ap_ready => grp_aes_expandEncKey_fu_626_ap_ready,
        k_address0 => grp_aes_expandEncKey_fu_626_k_address0,
        k_ce0 => grp_aes_expandEncKey_fu_626_k_ce0,
        k_we0 => grp_aes_expandEncKey_fu_626_k_we0,
        k_d0 => grp_aes_expandEncKey_fu_626_k_d0,
        k_q0 => ctx_deckey_q0,
        k_address1 => grp_aes_expandEncKey_fu_626_k_address1,
        k_ce1 => grp_aes_expandEncKey_fu_626_k_ce1,
        k_we1 => grp_aes_expandEncKey_fu_626_k_we1,
        k_d1 => grp_aes_expandEncKey_fu_626_k_d1,
        k_q1 => ctx_deckey_q1,
        rc_read => rcon_i_reg_579,
        ap_return => grp_aes_expandEncKey_fu_626_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_aes_decrypt_ecb_fu_613_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_decrypt_ecb_fu_613_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = tmp_12_fu_728_p2)))) then 
                    ap_reg_grp_aes_decrypt_ecb_fu_613_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_decrypt_ecb_fu_613_ap_ready)) then 
                    ap_reg_grp_aes_decrypt_ecb_fu_613_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes_encrypt_ecb_fu_602_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_encrypt_ecb_fu_602_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_lv1_0 = tmp_11_fu_814_p2)))) then 
                    ap_reg_grp_aes_encrypt_ecb_fu_602_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_encrypt_ecb_fu_602_ap_ready)) then 
                    ap_reg_grp_aes_encrypt_ecb_fu_602_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes_expandEncKey_fu_626_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_expandEncKey_fu_626_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_90_i_fu_917_p2))) then 
                    ap_reg_grp_aes_expandEncKey_fu_626_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_expandEncKey_fu_626_ap_ready)) then 
                    ap_reg_grp_aes_expandEncKey_fu_626_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_10_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and not((ap_const_lv1_0 = tmp_27_fu_763_p2)))) then 
                i_10_reg_491 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
                i_10_reg_491 <= i_28_reg_1060;
            end if; 
        end if;
    end process;

    i_11_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_4))) then 
                i_11_reg_403 <= ap_const_lv6_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                i_11_reg_403 <= i_18_reg_936;
            end if; 
        end if;
    end process;

    i_12_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_6_fu_677_p2)))) then 
                i_12_reg_436 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_13_fu_694_p2))) then 
                i_12_reg_436 <= i_22_fu_700_p2;
            end if; 
        end if;
    end process;

    i_14_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_7_fu_643_p2 = ap_const_lv1_0)))) then 
                i_14_reg_414 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_14_fu_660_p2))) then 
                i_14_reg_414 <= i_23_fu_666_p2;
            end if; 
        end if;
    end process;

    i_1_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28) and not((ap_const_lv1_0 = tmp_3_fu_866_p2)))) then 
                i_1_reg_557 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state30))) then 
                i_1_reg_557 <= i_19_reg_1158;
            end if; 
        end if;
    end process;

    i_2_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_1))) then 
                i_2_reg_502 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                i_2_reg_502 <= i_15_reg_1078;
            end if; 
        end if;
    end process;

    i_30_reg_591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31) and not((ap_const_lv1_0 = tmp_i_fu_900_p2)))) then 
                i_30_reg_591 <= ap_const_lv3_7;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state34) and not((ap_const_logic_0 = grp_aes_expandEncKey_fu_626_ap_done)))) then 
                i_30_reg_591 <= phitmp_i_reg_1195;
            end if; 
        end if;
    end process;

    i_3_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19) and not((ap_const_lv1_0 = tmp_4_fu_797_p2)))) then 
                i_3_reg_513 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                i_3_reg_513 <= i_20_reg_1096;
            end if; 
        end if;
    end process;

    i_4_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
                i_4_reg_524 <= i_24_reg_1114;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state23) and not((ap_const_logic_0 = grp_aes_encrypt_ecb_fu_602_ap_done)))) then 
                i_4_reg_524 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_5_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24) and not((ap_const_lv1_0 = tmp_21_fu_832_p2)))) then 
                i_5_reg_535 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
                i_5_reg_535 <= i_26_reg_1132;
            end if; 
        end if;
    end process;

    i_6_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_2))) then 
                i_6_reg_447 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                i_6_reg_447 <= i_16_reg_988;
            end if; 
        end if;
    end process;

    i_7_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = tmp_5_fu_711_p2)))) then 
                i_7_reg_458 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                i_7_reg_458 <= i_21_reg_1006;
            end if; 
        end if;
    end process;

    i_8_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                i_8_reg_469 <= i_25_reg_1024;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state12) and not((ap_const_logic_0 = grp_aes_decrypt_ecb_fu_613_ap_done)))) then 
                i_8_reg_469 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_9_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_22_fu_745_p2)))) then 
                i_9_reg_480 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                i_9_reg_480 <= i_27_reg_1042;
            end if; 
        end if;
    end process;

    i_i_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29) and not((ap_const_lv1_0 = tmp_10_fu_883_p2)))) then 
                i_i_reg_568 <= ap_const_lv6_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
                i_i_reg_568 <= i_29_reg_1176;
            end if; 
        end if;
    end process;

    i_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_0))) then 
                i_reg_546 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = tmp_3_fu_866_p2))) then 
                i_reg_546 <= i_13_fu_872_p2;
            end if; 
        end if;
    end process;

    i_s_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_3))) then 
                i_s_reg_425 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                i_s_reg_425 <= i_17_reg_962;
            end if; 
        end if;
    end process;

    rcon_i_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31) and not((ap_const_lv1_0 = tmp_i_fu_900_p2)))) then 
                rcon_i_reg_579 <= ap_const_lv8_1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state34) and not((ap_const_logic_0 = grp_aes_expandEncKey_fu_626_ap_done)))) then 
                rcon_i_reg_579 <= grp_aes_expandEncKey_fu_626_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = tmp_11_fu_814_p2))) then
                buf_addr_2_reg_1101 <= tmp_16_fu_826_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_22_fu_745_p2))) then
                buf_addr_5_reg_1029 <= tmp_24_fu_757_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then
                i_15_reg_1078 <= i_15_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                i_16_reg_988 <= i_16_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                i_17_reg_962 <= i_17_fu_683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_18_reg_936 <= i_18_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then
                i_19_reg_1158 <= i_19_fu_889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then
                i_20_reg_1096 <= i_20_fu_820_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                i_21_reg_1006 <= i_21_fu_734_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then
                i_24_reg_1114 <= i_24_fu_838_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                i_25_reg_1024 <= i_25_fu_751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then
                i_26_reg_1132 <= i_26_fu_855_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                i_27_reg_1042 <= i_27_fu_769_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and (mode_read_reg_929 = ap_const_lv3_2))) then
                i_28_reg_1060 <= i_28_fu_786_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then
                i_29_reg_1176 <= i_29_fu_906_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                mode_read_reg_929 <= mode;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_90_i_fu_917_p2))) then
                phitmp_i_reg_1195 <= phitmp_i_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = tmp_10_fu_883_p2))) then
                    tmp_15_reg_1163(4 downto 0) <= tmp_15_fu_895_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_12_fu_728_p2))) then
                    tmp_18_reg_1011(4 downto 0) <= tmp_18_fu_740_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_5_fu_711_p2))) then
                    tmp_1_reg_993(4 downto 0) <= tmp_1_fu_723_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = tmp_21_fu_832_p2))) then
                    tmp_23_reg_1119(4 downto 0) <= tmp_23_fu_844_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = tmp_26_fu_849_p2))) then
                    tmp_28_reg_1137(4 downto 0) <= tmp_28_fu_861_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_27_fu_763_p2))) then
                    tmp_29_reg_1047(4 downto 0) <= tmp_29_fu_775_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_6_fu_677_p2))) then
                    tmp_2_reg_967(4 downto 0) <= tmp_2_fu_689_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and (mode_read_reg_929 = ap_const_lv3_2) and (ap_const_lv1_0 = tmp_30_fu_780_p2))) then
                    tmp_31_reg_1065(4 downto 0) <= tmp_31_fu_792_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_7_fu_643_p2 = ap_const_lv1_0))) then
                    tmp_9_reg_941(5 downto 0) <= tmp_9_fu_655_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = tmp_i_fu_900_p2))) then
                    tmp_i_9_reg_1181(5 downto 0) <= tmp_i_9_fu_912_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_4_fu_797_p2))) then
                    tmp_s_reg_1083(4 downto 0) <= tmp_s_fu_809_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_9_reg_941(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_2_reg_967(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_993(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_1011(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_29_reg_1047(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_31_reg_1065(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_s_reg_1083(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_23_reg_1119(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_28_reg_1137(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_15_reg_1163(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_i_9_reg_1181(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, mode_read_read_fu_118_p2, mode_read_reg_929, tmp_7_fu_643_p2, tmp_6_fu_677_p2, tmp_5_fu_711_p2, tmp_12_fu_728_p2, tmp_22_fu_745_p2, tmp_27_fu_763_p2, tmp_30_fu_780_p2, tmp_4_fu_797_p2, tmp_11_fu_814_p2, tmp_21_fu_832_p2, tmp_26_fu_849_p2, tmp_10_fu_883_p2, tmp_i_fu_900_p2, tmp_90_i_fu_917_p2, grp_aes_expandEncKey_fu_626_ap_done, grp_aes_encrypt_ecb_fu_602_ap_done, grp_aes_decrypt_ecb_fu_613_ap_done, tmp_14_fu_660_p2, tmp_13_fu_694_p2, tmp_3_fu_866_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_118_p2 = ap_const_lv3_4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((ap_start = ap_const_logic_0)) and not((mode_read_read_fu_118_p2 = ap_const_lv3_0)) and not((mode_read_read_fu_118_p2 = ap_const_lv3_1)) and not((mode_read_read_fu_118_p2 = ap_const_lv3_2)) and not((mode_read_read_fu_118_p2 = ap_const_lv3_3)) and not((mode_read_read_fu_118_p2 = ap_const_lv3_4)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((tmp_7_fu_643_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = tmp_14_fu_660_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = tmp_6_fu_677_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (not((ap_const_lv1_0 = tmp_13_fu_694_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_lv1_0 = tmp_5_fu_711_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_lv1_0 = tmp_12_fu_728_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (not((ap_const_logic_0 = grp_aes_decrypt_ecb_fu_613_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (not((ap_const_lv1_0 = tmp_22_fu_745_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (not((ap_const_lv1_0 = tmp_27_fu_763_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((mode_read_reg_929 = ap_const_lv3_0) or (mode_read_reg_929 = ap_const_lv3_1) or not((mode_read_reg_929 = ap_const_lv3_2)) or (mode_read_reg_929 = ap_const_lv3_3) or (mode_read_reg_929 = ap_const_lv3_4) or not((ap_const_lv1_0 = tmp_30_fu_780_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                if (not((ap_const_lv1_0 = tmp_4_fu_797_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                if (not((ap_const_lv1_0 = tmp_11_fu_814_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state23 => 
                if (not((ap_const_logic_0 = grp_aes_encrypt_ecb_fu_602_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (not((ap_const_lv1_0 = tmp_21_fu_832_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                if (not((ap_const_lv1_0 = tmp_26_fu_849_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                if (not((ap_const_lv1_0 = tmp_3_fu_866_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (not((ap_const_lv1_0 = tmp_10_fu_883_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state31 => 
                if (not((ap_const_lv1_0 = tmp_i_fu_900_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state33 => 
                if (not((ap_const_lv1_0 = tmp_90_i_fu_917_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (not((ap_const_logic_0 = grp_aes_expandEncKey_fu_626_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33 downto 33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(mode_read_reg_929, ap_CS_fsm_state17, tmp_30_fu_780_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17) and ((mode_read_reg_929 = ap_const_lv3_0) or (mode_read_reg_929 = ap_const_lv3_1) or not((mode_read_reg_929 = ap_const_lv3_2)) or (mode_read_reg_929 = ap_const_lv3_3) or (mode_read_reg_929 = ap_const_lv3_4) or not((ap_const_lv1_0 = tmp_30_fu_780_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(mode_read_reg_929, ap_CS_fsm_state17, tmp_30_fu_780_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17) and ((mode_read_reg_929 = ap_const_lv3_0) or (mode_read_reg_929 = ap_const_lv3_1) or not((mode_read_reg_929 = ap_const_lv3_2)) or (mode_read_reg_929 = ap_const_lv3_3) or (mode_read_reg_929 = ap_const_lv3_4) or not((ap_const_lv1_0 = tmp_30_fu_780_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buf_address0_assign_proc : process(tmp_1_reg_993, ap_CS_fsm_state10, tmp_18_fu_740_p1, tmp_12_fu_728_p2, ap_CS_fsm_state13, buf_addr_5_reg_1029, ap_CS_fsm_state17, tmp_31_fu_792_p1, tmp_s_reg_1083, ap_CS_fsm_state21, buf_addr_2_reg_1101, tmp_11_fu_814_p2, ap_CS_fsm_state24, tmp_23_fu_844_p1, ap_CS_fsm_state26, tmp_28_fu_861_p1, grp_aes_encrypt_ecb_fu_602_buf_r_address0, grp_aes_decrypt_ecb_fu_613_buf_r_address0, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state23, tmp_24_fu_757_p1, tmp_16_fu_826_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            buf_address0 <= tmp_28_fu_861_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
            buf_address0 <= tmp_23_fu_844_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            buf_address0 <= buf_addr_2_reg_1101;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = tmp_11_fu_814_p2))) then 
            buf_address0 <= tmp_16_fu_826_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            buf_address0 <= tmp_s_reg_1083(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            buf_address0 <= tmp_31_fu_792_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            buf_address0 <= buf_addr_5_reg_1029;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            buf_address0 <= tmp_24_fu_757_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_12_fu_728_p2))) then 
            buf_address0 <= tmp_18_fu_740_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            buf_address0 <= tmp_1_reg_993(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            buf_address0 <= grp_aes_decrypt_ecb_fu_613_buf_r_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_address0 <= grp_aes_encrypt_ecb_fu_602_buf_r_address0;
        else 
            buf_address0 <= "XXXX";
        end if; 
    end process;


    buf_address1_assign_proc : process(grp_aes_encrypt_ecb_fu_602_buf_r_address1, grp_aes_decrypt_ecb_fu_613_buf_r_address1, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            buf_address1 <= grp_aes_decrypt_ecb_fu_613_buf_r_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_address1 <= grp_aes_encrypt_ecb_fu_602_buf_r_address1;
        else 
            buf_address1 <= "XXXX";
        end if; 
    end process;


    buf_ce0_assign_proc : process(ap_CS_fsm_state10, tmp_12_fu_728_p2, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state21, tmp_11_fu_814_p2, ap_CS_fsm_state24, ap_CS_fsm_state26, grp_aes_encrypt_ecb_fu_602_buf_r_ce0, grp_aes_decrypt_ecb_fu_613_buf_r_ce0, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_12_fu_728_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = tmp_11_fu_814_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state24)) or ((ap_const_lv1_1 = ap_CS_fsm_state26)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            buf_ce0 <= grp_aes_decrypt_ecb_fu_613_buf_r_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_ce0 <= grp_aes_encrypt_ecb_fu_602_buf_r_ce0;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_ce1_assign_proc : process(grp_aes_encrypt_ecb_fu_602_buf_r_ce1, grp_aes_decrypt_ecb_fu_613_buf_r_ce1, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            buf_ce1 <= grp_aes_decrypt_ecb_fu_613_buf_r_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_ce1 <= grp_aes_encrypt_ecb_fu_602_buf_r_ce1;
        else 
            buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_d0_assign_proc : process(data_in_q0, grp_aes_encrypt_ecb_fu_602_buf_r_d0, grp_aes_decrypt_ecb_fu_613_buf_r_d0, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_fu_636_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            buf_d0 <= grp_fu_636_p2;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)))) then 
            buf_d0 <= data_in_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            buf_d0 <= grp_aes_decrypt_ecb_fu_613_buf_r_d0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_d0 <= grp_aes_encrypt_ecb_fu_602_buf_r_d0;
        else 
            buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_d1_assign_proc : process(grp_aes_encrypt_ecb_fu_602_buf_r_d1, grp_aes_decrypt_ecb_fu_613_buf_r_d1, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            buf_d1 <= grp_aes_decrypt_ecb_fu_613_buf_r_d1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_d1 <= grp_aes_encrypt_ecb_fu_602_buf_r_d1;
        else 
            buf_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_we0_assign_proc : process(grp_aes_encrypt_ecb_fu_602_buf_r_we0, grp_aes_decrypt_ecb_fu_613_buf_r_we0, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            buf_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            buf_we0 <= grp_aes_decrypt_ecb_fu_613_buf_r_we0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_we0 <= grp_aes_encrypt_ecb_fu_602_buf_r_we0;
        else 
            buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_we1_assign_proc : process(grp_aes_encrypt_ecb_fu_602_buf_r_we1, grp_aes_decrypt_ecb_fu_613_buf_r_we1, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            buf_we1 <= grp_aes_decrypt_ecb_fu_613_buf_r_we1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_we1 <= grp_aes_encrypt_ecb_fu_602_buf_r_we1;
        else 
            buf_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_address0_assign_proc : process(tmp_i_9_reg_1181, ap_CS_fsm_state34, grp_aes_decrypt_ecb_fu_613_ctx_deckey_address0, grp_aes_expandEncKey_fu_626_k_address0, ap_CS_fsm_state12, ap_CS_fsm_state32)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
            ctx_deckey_address0 <= tmp_i_9_reg_1181(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state34))) then 
            ctx_deckey_address0 <= grp_aes_expandEncKey_fu_626_k_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_deckey_address0 <= grp_aes_decrypt_ecb_fu_613_ctx_deckey_address0;
        else 
            ctx_deckey_address0 <= "XXXXX";
        end if; 
    end process;


    ctx_deckey_address1_assign_proc : process(ap_CS_fsm_state34, grp_aes_decrypt_ecb_fu_613_ctx_deckey_address1, grp_aes_expandEncKey_fu_626_k_address1, ap_CS_fsm_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state34))) then 
            ctx_deckey_address1 <= grp_aes_expandEncKey_fu_626_k_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_deckey_address1 <= grp_aes_decrypt_ecb_fu_613_ctx_deckey_address1;
        else 
            ctx_deckey_address1 <= "XXXXX";
        end if; 
    end process;


    ctx_deckey_ce0_assign_proc : process(ap_CS_fsm_state34, grp_aes_decrypt_ecb_fu_613_ctx_deckey_ce0, grp_aes_expandEncKey_fu_626_k_ce0, ap_CS_fsm_state12, ap_CS_fsm_state32)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
            ctx_deckey_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state34))) then 
            ctx_deckey_ce0 <= grp_aes_expandEncKey_fu_626_k_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_deckey_ce0 <= grp_aes_decrypt_ecb_fu_613_ctx_deckey_ce0;
        else 
            ctx_deckey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_ce1_assign_proc : process(ap_CS_fsm_state34, grp_aes_decrypt_ecb_fu_613_ctx_deckey_ce1, grp_aes_expandEncKey_fu_626_k_ce1, ap_CS_fsm_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state34))) then 
            ctx_deckey_ce1 <= grp_aes_expandEncKey_fu_626_k_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_deckey_ce1 <= grp_aes_decrypt_ecb_fu_613_ctx_deckey_ce1;
        else 
            ctx_deckey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_d0_assign_proc : process(key_q0, ap_CS_fsm_state34, grp_aes_expandEncKey_fu_626_k_d0, ap_CS_fsm_state32)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
            ctx_deckey_d0 <= key_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state34))) then 
            ctx_deckey_d0 <= grp_aes_expandEncKey_fu_626_k_d0;
        else 
            ctx_deckey_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_deckey_we0_assign_proc : process(ap_CS_fsm_state34, grp_aes_expandEncKey_fu_626_k_we0, ap_CS_fsm_state32)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state32)))) then 
            ctx_deckey_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state34))) then 
            ctx_deckey_we0 <= grp_aes_expandEncKey_fu_626_k_we0;
        else 
            ctx_deckey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_we1_assign_proc : process(ap_CS_fsm_state34, grp_aes_expandEncKey_fu_626_k_we1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state34))) then 
            ctx_deckey_we1 <= grp_aes_expandEncKey_fu_626_k_we1;
        else 
            ctx_deckey_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_address0_assign_proc : process(tmp_i_9_reg_1181, grp_aes_encrypt_ecb_fu_602_ctx_enckey_address0, ap_CS_fsm_state23, ap_CS_fsm_state32)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
            ctx_enckey_address0 <= tmp_i_9_reg_1181(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_enckey_address0 <= grp_aes_encrypt_ecb_fu_602_ctx_enckey_address0;
        else 
            ctx_enckey_address0 <= "XXXXX";
        end if; 
    end process;


    ctx_enckey_ce0_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_enckey_ce0, ap_CS_fsm_state23, ap_CS_fsm_state32)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
            ctx_enckey_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_enckey_ce0 <= grp_aes_encrypt_ecb_fu_602_ctx_enckey_ce0;
        else 
            ctx_enckey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_ce1_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_enckey_ce1, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_enckey_ce1 <= grp_aes_encrypt_ecb_fu_602_ctx_enckey_ce1;
        else 
            ctx_enckey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state32)))) then 
            ctx_enckey_we0 <= ap_const_logic_1;
        else 
            ctx_enckey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_address0_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_key_address0, grp_aes_decrypt_ecb_fu_613_ctx_key_address0, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_key_address0 <= grp_aes_decrypt_ecb_fu_613_ctx_key_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_address0 <= grp_aes_encrypt_ecb_fu_602_ctx_key_address0;
        else 
            ctx_key_address0 <= "XXXXX";
        end if; 
    end process;


    ctx_key_address1_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_key_address1, grp_aes_decrypt_ecb_fu_613_ctx_key_address1, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_key_address1 <= grp_aes_decrypt_ecb_fu_613_ctx_key_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_address1 <= grp_aes_encrypt_ecb_fu_602_ctx_key_address1;
        else 
            ctx_key_address1 <= "XXXXX";
        end if; 
    end process;


    ctx_key_ce0_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_key_ce0, grp_aes_decrypt_ecb_fu_613_ctx_key_ce0, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_key_ce0 <= grp_aes_decrypt_ecb_fu_613_ctx_key_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_ce0 <= grp_aes_encrypt_ecb_fu_602_ctx_key_ce0;
        else 
            ctx_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_ce1_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_key_ce1, grp_aes_decrypt_ecb_fu_613_ctx_key_ce1, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_key_ce1 <= grp_aes_decrypt_ecb_fu_613_ctx_key_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_ce1 <= grp_aes_encrypt_ecb_fu_602_ctx_key_ce1;
        else 
            ctx_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_d0_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_key_d0, grp_aes_decrypt_ecb_fu_613_ctx_key_d0, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_key_d0 <= grp_aes_decrypt_ecb_fu_613_ctx_key_d0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_d0 <= grp_aes_encrypt_ecb_fu_602_ctx_key_d0;
        else 
            ctx_key_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_key_d1_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_key_d1, grp_aes_decrypt_ecb_fu_613_ctx_key_d1, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_key_d1 <= grp_aes_decrypt_ecb_fu_613_ctx_key_d1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_d1 <= grp_aes_encrypt_ecb_fu_602_ctx_key_d1;
        else 
            ctx_key_d1 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_key_we0_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_key_we0, grp_aes_decrypt_ecb_fu_613_ctx_key_we0, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_key_we0 <= grp_aes_decrypt_ecb_fu_613_ctx_key_we0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_we0 <= grp_aes_encrypt_ecb_fu_602_ctx_key_we0;
        else 
            ctx_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_we1_assign_proc : process(grp_aes_encrypt_ecb_fu_602_ctx_key_we1, grp_aes_decrypt_ecb_fu_613_ctx_key_we1, ap_CS_fsm_state12, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ctx_key_we1 <= grp_aes_decrypt_ecb_fu_613_ctx_key_we1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_we1 <= grp_aes_encrypt_ecb_fu_602_ctx_key_we1;
        else 
            ctx_key_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_address0_assign_proc : process(ap_CS_fsm_state2, tmp_9_fu_655_p1, ap_CS_fsm_state5, tmp_2_fu_689_p1, ap_CS_fsm_state8, tmp_1_fu_723_p1, ap_CS_fsm_state19, tmp_s_fu_809_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            data_in_address0 <= tmp_s_fu_809_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            data_in_address0 <= tmp_1_fu_723_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            data_in_address0 <= tmp_2_fu_689_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            data_in_address0 <= tmp_9_fu_655_p1(5 - 1 downto 0);
        else 
            data_in_address0 <= "XXXXX";
        end if; 
    end process;


    data_in_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state19)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)))) then 
            data_in_ce0 <= ap_const_logic_1;
        else 
            data_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, tmp_31_reg_1065, tmp_28_reg_1137, ap_CS_fsm_state28, ap_CS_fsm_state18, ap_CS_fsm_state27, tmp_20_fu_672_p1, tmp_19_fu_706_p1, tmp_8_fu_878_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
            data_out_address0 <= tmp_8_fu_878_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            data_out_address0 <= tmp_28_reg_1137(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            data_out_address0 <= tmp_31_reg_1065(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            data_out_address0 <= tmp_19_fu_706_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            data_out_address0 <= tmp_20_fu_672_p1(4 - 1 downto 0);
        else 
            data_out_address0 <= "XXXX";
        end if; 
    end process;


    data_out_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state28, ap_CS_fsm_state18, ap_CS_fsm_state27)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state27)))) then 
            data_out_ce0 <= ap_const_logic_1;
        else 
            data_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state28, buf_q0, ap_CS_fsm_state18, ap_CS_fsm_state27)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state27)))) then 
            data_out_d0 <= buf_q0;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state28)))) then 
            data_out_d0 <= ap_const_lv8_0;
        else 
            data_out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    data_out_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state28, tmp_14_fu_660_p2, tmp_13_fu_694_p2, ap_CS_fsm_state18, ap_CS_fsm_state27, tmp_3_fu_866_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_14_fu_660_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_13_fu_694_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state27)) or ((ap_const_lv1_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = tmp_3_fu_866_p2)))) then 
            data_out_we0 <= ap_const_logic_1;
        else 
            data_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_decrypt_ecb_fu_613_ap_start <= ap_reg_grp_aes_decrypt_ecb_fu_613_ap_start;
    grp_aes_encrypt_ecb_fu_602_ap_start <= ap_reg_grp_aes_encrypt_ecb_fu_602_ap_start;
    grp_aes_expandEncKey_fu_626_ap_start <= ap_reg_grp_aes_expandEncKey_fu_626_ap_start;
    grp_fu_636_p2 <= (xorv_q0 xor buf_q0);
    i_13_fu_872_p2 <= std_logic_vector(unsigned(i_reg_546) + unsigned(ap_const_lv5_1));
    i_15_fu_803_p2 <= std_logic_vector(unsigned(i_2_reg_502) + unsigned(ap_const_lv5_1));
    i_16_fu_717_p2 <= std_logic_vector(unsigned(i_6_reg_447) + unsigned(ap_const_lv5_1));
    i_17_fu_683_p2 <= std_logic_vector(unsigned(i_s_reg_425) + unsigned(ap_const_lv5_1));
    i_18_fu_649_p2 <= std_logic_vector(unsigned(i_11_reg_403) + unsigned(ap_const_lv6_1));
    i_19_fu_889_p2 <= std_logic_vector(unsigned(i_1_reg_557) + unsigned(ap_const_lv5_1));
    i_20_fu_820_p2 <= std_logic_vector(unsigned(i_3_reg_513) + unsigned(ap_const_lv5_1));
    i_21_fu_734_p2 <= std_logic_vector(unsigned(i_7_reg_458) + unsigned(ap_const_lv5_1));
    i_22_fu_700_p2 <= std_logic_vector(unsigned(i_12_reg_436) + unsigned(ap_const_lv5_1));
    i_23_fu_666_p2 <= std_logic_vector(unsigned(i_14_reg_414) + unsigned(ap_const_lv5_1));
    i_24_fu_838_p2 <= std_logic_vector(unsigned(i_4_reg_524) + unsigned(ap_const_lv5_1));
    i_25_fu_751_p2 <= std_logic_vector(unsigned(i_8_reg_469) + unsigned(ap_const_lv5_1));
    i_26_fu_855_p2 <= std_logic_vector(unsigned(i_5_reg_535) + unsigned(ap_const_lv5_1));
    i_27_fu_769_p2 <= std_logic_vector(unsigned(i_9_reg_480) + unsigned(ap_const_lv5_1));
    i_28_fu_786_p2 <= std_logic_vector(unsigned(i_10_reg_491) + unsigned(ap_const_lv5_1));
    i_29_fu_906_p2 <= std_logic_vector(unsigned(i_i_reg_568) + unsigned(ap_const_lv6_1));

    iv_address0_assign_proc : process(tmp_2_reg_967, ap_CS_fsm_state29, tmp_15_fu_895_p1, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
            iv_address0 <= tmp_15_fu_895_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            iv_address0 <= tmp_2_reg_967(4 - 1 downto 0);
        else 
            iv_address0 <= "XXXX";
        end if; 
    end process;


    iv_ce0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state29)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            iv_ce0 <= ap_const_logic_1;
        else 
            iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            iv_we0 <= ap_const_logic_1;
        else 
            iv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    key_address0_assign_proc : process(tmp_9_reg_941, ap_CS_fsm_state31, tmp_i_9_fu_912_p1, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            key_address0 <= tmp_i_9_fu_912_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            key_address0 <= tmp_9_reg_941(5 - 1 downto 0);
        else 
            key_address0 <= "XXXXX";
        end if; 
    end process;


    key_ce0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state31)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            key_we0 <= ap_const_logic_1;
        else 
            key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lastbuf_address0_assign_proc : process(tmp_18_reg_1011, ap_CS_fsm_state15, tmp_29_fu_775_p1, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            lastbuf_address0 <= tmp_29_fu_775_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            lastbuf_address0 <= tmp_18_reg_1011(4 - 1 downto 0);
        else 
            lastbuf_address0 <= "XXXX";
        end if; 
    end process;


    lastbuf_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            lastbuf_ce0 <= ap_const_logic_1;
        else 
            lastbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lastbuf_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            lastbuf_we0 <= ap_const_logic_1;
        else 
            lastbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mode_read_read_fu_118_p2 <= mode;
    phitmp_i_fu_923_p2 <= std_logic_vector(unsigned(i_30_reg_591) + unsigned(ap_const_lv3_7));
    tmp_10_fu_883_p2 <= "1" when (i_1_reg_557 = ap_const_lv5_10) else "0";
    tmp_11_fu_814_p2 <= "1" when (i_3_reg_513 = ap_const_lv5_10) else "0";
    tmp_12_fu_728_p2 <= "1" when (i_7_reg_458 = ap_const_lv5_10) else "0";
    tmp_13_fu_694_p2 <= "1" when (i_12_reg_436 = ap_const_lv5_10) else "0";
    tmp_14_fu_660_p2 <= "1" when (i_14_reg_414 = ap_const_lv5_10) else "0";
    tmp_15_fu_895_p1 <= std_logic_vector(resize(unsigned(i_1_reg_557),64));
    tmp_16_fu_826_p1 <= std_logic_vector(resize(unsigned(i_3_reg_513),64));
    tmp_18_fu_740_p1 <= std_logic_vector(resize(unsigned(i_7_reg_458),64));
    tmp_19_fu_706_p1 <= std_logic_vector(resize(unsigned(i_12_reg_436),64));
    tmp_1_fu_723_p1 <= std_logic_vector(resize(unsigned(i_6_reg_447),64));
    tmp_20_fu_672_p1 <= std_logic_vector(resize(unsigned(i_14_reg_414),64));
    tmp_21_fu_832_p2 <= "1" when (i_4_reg_524 = ap_const_lv5_10) else "0";
    tmp_22_fu_745_p2 <= "1" when (i_8_reg_469 = ap_const_lv5_10) else "0";
    tmp_23_fu_844_p1 <= std_logic_vector(resize(unsigned(i_4_reg_524),64));
    tmp_24_fu_757_p1 <= std_logic_vector(resize(unsigned(i_8_reg_469),64));
    tmp_26_fu_849_p2 <= "1" when (i_5_reg_535 = ap_const_lv5_10) else "0";
    tmp_27_fu_763_p2 <= "1" when (i_9_reg_480 = ap_const_lv5_10) else "0";
    tmp_28_fu_861_p1 <= std_logic_vector(resize(unsigned(i_5_reg_535),64));
    tmp_29_fu_775_p1 <= std_logic_vector(resize(unsigned(i_9_reg_480),64));
    tmp_2_fu_689_p1 <= std_logic_vector(resize(unsigned(i_s_reg_425),64));
    tmp_30_fu_780_p2 <= "1" when (i_10_reg_491 = ap_const_lv5_10) else "0";
    tmp_31_fu_792_p1 <= std_logic_vector(resize(unsigned(i_10_reg_491),64));
    tmp_3_fu_866_p2 <= "1" when (i_reg_546 = ap_const_lv5_10) else "0";
    tmp_4_fu_797_p2 <= "1" when (i_2_reg_502 = ap_const_lv5_10) else "0";
    tmp_5_fu_711_p2 <= "1" when (i_6_reg_447 = ap_const_lv5_10) else "0";
    tmp_6_fu_677_p2 <= "1" when (i_s_reg_425 = ap_const_lv5_10) else "0";
    tmp_7_fu_643_p2 <= "1" when (i_11_reg_403 = ap_const_lv6_20) else "0";
    tmp_8_fu_878_p1 <= std_logic_vector(resize(unsigned(i_reg_546),64));
    tmp_90_i_fu_917_p2 <= "1" when (i_30_reg_591 = ap_const_lv3_0) else "0";
    tmp_9_fu_655_p1 <= std_logic_vector(resize(unsigned(i_11_reg_403),64));
    tmp_i_9_fu_912_p1 <= std_logic_vector(resize(unsigned(i_i_reg_568),64));
    tmp_i_fu_900_p2 <= "1" when (i_i_reg_568 = ap_const_lv6_20) else "0";
    tmp_s_fu_809_p1 <= std_logic_vector(resize(unsigned(i_2_reg_502),64));

    xorv_address0_assign_proc : process(ap_CS_fsm_state13, tmp_29_reg_1047, ap_CS_fsm_state21, tmp_23_reg_1119, tmp_15_reg_1163, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state30, tmp_24_fu_757_p1, tmp_16_fu_826_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state30))) then 
            xorv_address0 <= tmp_15_reg_1163(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
            xorv_address0 <= tmp_23_reg_1119(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            xorv_address0 <= tmp_16_fu_826_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            xorv_address0 <= tmp_29_reg_1047(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            xorv_address0 <= tmp_24_fu_757_p1(4 - 1 downto 0);
        else 
            xorv_address0 <= "XXXX";
        end if; 
    end process;


    xorv_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state30)))) then 
            xorv_ce0 <= ap_const_logic_1;
        else 
            xorv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xorv_d0_assign_proc : process(iv_q0, lastbuf_q0, buf_q0, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state30))) then 
            xorv_d0 <= iv_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
            xorv_d0 <= buf_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            xorv_d0 <= lastbuf_q0;
        else 
            xorv_d0 <= "XXXXXXXX";
        end if; 
    end process;


    xorv_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state30)))) then 
            xorv_we0 <= ap_const_logic_1;
        else 
            xorv_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
