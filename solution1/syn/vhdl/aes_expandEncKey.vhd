-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_expandEncKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    k_ce0 : OUT STD_LOGIC;
    k_we0 : OUT STD_LOGIC;
    k_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    k_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    k_ce1 : OUT STD_LOGIC;
    k_we1 : OUT STD_LOGIC;
    k_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    k_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_expandEncKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce2 : STD_LOGIC;
    signal sbox_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_491 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_495 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_500 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal reg_506 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_516 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_521 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_addr_reg_832 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_3_reg_842 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_6_reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_536_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_857 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_addr_5_reg_867 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_7_reg_877 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_564_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_882 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_16_fu_570_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_20_fu_596_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_20_reg_892 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_fu_612_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_67_reg_899 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_66_fu_604_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_addr_9_reg_914 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_fu_632_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_920 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_11_reg_940 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_13_reg_950 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_15_reg_961 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_17_reg_981 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_19_reg_991 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_21_reg_1001 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_23_reg_1011 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_69_fu_726_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_69_reg_1019 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_68_fu_718_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_addr_25_reg_1034 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_fu_746_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_1040 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_addr_27_reg_1050 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_29_reg_1060 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_addr_31_reg_1071 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_451 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_1_reg_462 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_11_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_551_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_fu_590_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_616_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_638_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_fu_648_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_fu_658_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_29_fu_668_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_32_fu_678_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_fu_688_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_44_fu_730_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_48_fu_752_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_50_fu_762_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_53_fu_772_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_55_fu_782_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_58_fu_792_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_60_fu_802_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component aes_expandEncKey_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component aes_expandEncKey_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1,
        address2 => sbox_address2,
        ce2 => sbox_ce2,
        q2 => sbox_q2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
                i_1_reg_462 <= i_3_reg_1040;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                i_1_reg_462 <= ap_const_lv6_14;
            end if; 
        end if;
    end process;

    i_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
                i_reg_451 <= i_2_reg_920;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                i_reg_451 <= ap_const_lv5_4;
            end if; 
        end if;
    end process;

    reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                reg_495 <= k_q0;
            elsif ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)))) then 
                reg_495 <= k_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_66_fu_604_p3 = ap_const_lv1_0))) then
                i_2_reg_920 <= i_2_fu_632_p2;
                k_addr_9_reg_914 <= tmp_20_fu_627_p1(5 - 1 downto 0);
                tmp_67_reg_899 <= tmp_67_fu_612_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = tmp_68_fu_718_p3))) then
                i_3_reg_1040 <= i_3_fu_746_p2;
                k_addr_25_reg_1034 <= tmp_46_fu_741_p1(5 - 1 downto 0);
                tmp_69_reg_1019 <= tmp_69_fu_726_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                    k_addr_11_reg_940(3 downto 1) <= tmp_25_fu_653_p1(5 - 1 downto 0)(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                    k_addr_13_reg_950(0) <= tmp_30_fu_673_p1(5 - 1 downto 0)(0);    k_addr_13_reg_950(3 downto 2) <= tmp_30_fu_673_p1(5 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                    k_addr_15_reg_961(3 downto 2) <= tmp_35_fu_693_p1(5 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then
                    k_addr_27_reg_1050(4 downto 1) <= tmp_51_fu_767_p1(5 - 1 downto 0)(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                    k_addr_29_reg_1060(0) <= tmp_56_fu_787_p1(5 - 1 downto 0)(0);    k_addr_29_reg_1060(4 downto 2) <= tmp_56_fu_787_p1(5 - 1 downto 0)(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then
                    k_addr_31_reg_1071(4 downto 2) <= tmp_61_fu_807_p1(5 - 1 downto 0)(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                k_load_6_reg_847 <= k_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)))) then
                reg_491 <= k_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then
                reg_500 <= grp_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)))) then
                reg_506 <= grp_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)))) then
                reg_511 <= grp_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then
                reg_516 <= grp_fu_479_p2;
                reg_521 <= grp_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                tmp_12_reg_857 <= tmp_12_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                tmp_14_reg_882 <= tmp_14_fu_564_p2;
                tmp_16_reg_887 <= tmp_16_fu_570_p2;
                y_20_reg_892 <= y_20_fu_596_p3;
            end if;
        end if;
    end process;
    k_addr_11_reg_940(0) <= '1';
    k_addr_11_reg_940(4) <= '0';
    k_addr_13_reg_950(1) <= '1';
    k_addr_13_reg_950(4) <= '0';
    k_addr_15_reg_961(1 downto 0) <= "11";
    k_addr_15_reg_961(4) <= '0';
    k_addr_27_reg_1050(0) <= '1';
    k_addr_29_reg_1060(1) <= '1';
    k_addr_31_reg_1071(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_66_fu_604_p3, tmp_68_fu_718_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (not((tmp_66_fu_604_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (not((ap_const_lv1_0 = tmp_68_fu_718_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18, tmp_68_fu_718_p3)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state18) and not((ap_const_lv1_0 = tmp_68_fu_718_p3))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18, tmp_68_fu_718_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state18) and not((ap_const_lv1_0 = tmp_68_fu_718_p3)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= y_20_reg_892;
    grp_fu_473_p2 <= (k_q1 xor k_q0);
    grp_fu_479_p2 <= (k_q0 xor sbox_q0);
    grp_fu_485_p2 <= (k_q1 xor sbox_q1);
    i_2_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(i_reg_451));
    i_3_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) + unsigned(i_1_reg_462));
    k_addr_17_reg_981 <= ap_const_lv64_10(5 - 1 downto 0);
    k_addr_19_reg_991 <= ap_const_lv64_11(5 - 1 downto 0);
    k_addr_21_reg_1001 <= ap_const_lv64_12(5 - 1 downto 0);
    k_addr_23_reg_1011 <= ap_const_lv64_13(5 - 1 downto 0);
    k_addr_3_reg_842 <= ap_const_lv64_1(5 - 1 downto 0);
    k_addr_5_reg_867 <= ap_const_lv64_2(5 - 1 downto 0);
    k_addr_7_reg_877 <= ap_const_lv64_3(5 - 1 downto 0);
    k_addr_reg_832 <= ap_const_lv64_0(5 - 1 downto 0);

    k_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state9, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, k_addr_reg_832, k_addr_5_reg_867, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_66_fu_604_p3, k_addr_9_reg_914, k_addr_13_reg_950, k_addr_17_reg_981, k_addr_21_reg_1001, ap_CS_fsm_state18, k_addr_25_reg_1034, k_addr_29_reg_1060, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state23, tmp_19_fu_622_p1, tmp_23_fu_643_p1, tmp_28_fu_663_p1, tmp_33_fu_683_p1, tmp_45_fu_736_p1, tmp_49_fu_757_p1, tmp_54_fu_777_p1, tmp_59_fu_797_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            k_address0 <= k_addr_29_reg_1060;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            k_address0 <= k_addr_25_reg_1034;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            k_address0 <= tmp_59_fu_797_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            k_address0 <= tmp_54_fu_777_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            k_address0 <= tmp_49_fu_757_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            k_address0 <= tmp_45_fu_736_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            k_address0 <= k_addr_21_reg_1001;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            k_address0 <= k_addr_17_reg_981;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            k_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            k_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            k_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            k_address0 <= k_addr_13_reg_950;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            k_address0 <= k_addr_9_reg_914;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            k_address0 <= tmp_33_fu_683_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            k_address0 <= tmp_28_fu_663_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            k_address0 <= tmp_23_fu_643_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((tmp_66_fu_604_p3 = ap_const_lv1_0)))) then 
            k_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_66_fu_604_p3 = ap_const_lv1_0))) then 
            k_address0 <= tmp_19_fu_622_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            k_address0 <= k_addr_5_reg_867;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            k_address0 <= k_addr_reg_832;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            k_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            k_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            k_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            k_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        else 
            k_address0 <= "XXXXX";
        end if; 
    end process;


    k_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state9, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, k_addr_3_reg_842, k_addr_7_reg_877, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_66_fu_604_p3, k_addr_11_reg_940, k_addr_15_reg_961, k_addr_19_reg_991, k_addr_23_reg_1011, ap_CS_fsm_state18, k_addr_27_reg_1050, k_addr_31_reg_1071, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state23, tmp_20_fu_627_p1, tmp_25_fu_653_p1, tmp_30_fu_673_p1, tmp_35_fu_693_p1, tmp_46_fu_741_p1, tmp_51_fu_767_p1, tmp_56_fu_787_p1, tmp_61_fu_807_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            k_address1 <= k_addr_31_reg_1071;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            k_address1 <= k_addr_27_reg_1050;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            k_address1 <= tmp_61_fu_807_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            k_address1 <= tmp_56_fu_787_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            k_address1 <= tmp_51_fu_767_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            k_address1 <= tmp_46_fu_741_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            k_address1 <= k_addr_23_reg_1011;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            k_address1 <= k_addr_19_reg_991;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            k_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            k_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            k_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            k_address1 <= k_addr_15_reg_961;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            k_address1 <= k_addr_11_reg_940;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            k_address1 <= tmp_35_fu_693_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            k_address1 <= tmp_30_fu_673_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            k_address1 <= tmp_25_fu_653_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((tmp_66_fu_604_p3 = ap_const_lv1_0)))) then 
            k_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_66_fu_604_p3 = ap_const_lv1_0))) then 
            k_address1 <= tmp_20_fu_627_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            k_address1 <= k_addr_7_reg_877;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            k_address1 <= k_addr_3_reg_842;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            k_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            k_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            k_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            k_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        else 
            k_address1 <= "XXXXX";
        end if; 
    end process;


    k_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state9, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_66_fu_604_p3, ap_CS_fsm_state18, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_66_fu_604_p3 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((tmp_66_fu_604_p3 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state23)))) then 
            k_ce0 <= ap_const_logic_1;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state9, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_66_fu_604_p3, ap_CS_fsm_state18, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_66_fu_604_p3 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((tmp_66_fu_604_p3 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state23)))) then 
            k_ce1 <= ap_const_logic_1;
        else 
            k_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_d0_assign_proc : process(reg_500, ap_CS_fsm_state11, ap_CS_fsm_state22, reg_511, reg_516, ap_CS_fsm_state16, tmp_14_reg_882, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state23, tmp_s_fu_557_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then 
            k_d0 <= reg_516;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state23)))) then 
            k_d0 <= reg_511;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            k_d0 <= reg_500;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            k_d0 <= tmp_14_reg_882;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            k_d0 <= tmp_s_fu_557_p2;
        else 
            k_d0 <= "XXXXXXXX";
        end if; 
    end process;


    k_d1_assign_proc : process(reg_500, ap_CS_fsm_state11, ap_CS_fsm_state22, reg_506, ap_CS_fsm_state16, reg_521, tmp_12_reg_857, ap_CS_fsm_state5, tmp_16_reg_887, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then 
            k_d1 <= reg_521;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state23)))) then 
            k_d1 <= reg_500;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            k_d1 <= reg_506;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            k_d1 <= tmp_16_reg_887;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            k_d1 <= tmp_12_reg_857;
        else 
            k_d1 <= "XXXXXXXX";
        end if; 
    end process;


    k_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state23)))) then 
            k_we0 <= ap_const_logic_1;
        else 
            k_we0 <= ap_const_logic_0;
        end if; 
    end process;


    k_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state23)))) then 
            k_we1 <= ap_const_logic_1;
        else 
            k_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state15, tmp_11_fu_526_p1, tmp_fu_531_p1, tmp_17_fu_698_p1, tmp_40_fu_708_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            sbox_address0 <= tmp_40_fu_708_p1(8 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            sbox_address0 <= tmp_17_fu_698_p1(8 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            sbox_address0 <= tmp_fu_531_p1(8 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            sbox_address0 <= tmp_11_fu_526_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state15, tmp_13_fu_542_p1, tmp_38_fu_703_p1, tmp_42_fu_713_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            sbox_address1 <= tmp_42_fu_713_p1(8 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            sbox_address1 <= tmp_38_fu_703_p1(8 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            sbox_address1 <= tmp_13_fu_542_p1(8 - 1 downto 0);
        else 
            sbox_address1 <= "XXXXXXXX";
        end if; 
    end process;

    sbox_address2 <= tmp_15_fu_547_p1(8 - 1 downto 0);

    sbox_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            sbox_ce1 <= ap_const_logic_1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce2_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            sbox_ce2 <= ap_const_logic_1;
        else 
            sbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_551_p2 <= (reg_491 xor rc_read);
    tmp_11_fu_526_p1 <= std_logic_vector(resize(unsigned(reg_495),64));
    tmp_12_fu_536_p2 <= (k_q1 xor sbox_q0);
    tmp_13_fu_542_p1 <= std_logic_vector(resize(unsigned(reg_495),64));
    tmp_14_fu_564_p2 <= (k_q0 xor sbox_q1);
    tmp_15_fu_547_p1 <= std_logic_vector(resize(unsigned(k_load_6_reg_847),64));
    tmp_16_fu_570_p2 <= (k_q1 xor sbox_q2);
    tmp_17_fu_698_p1 <= std_logic_vector(resize(unsigned(reg_491),64));
    tmp_18_fu_616_p2 <= std_logic_vector(signed(ap_const_lv4_C) + signed(tmp_67_fu_612_p1));
    tmp_19_fu_622_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_616_p2),64));
    tmp_1_i_fu_590_p2 <= (y_fu_576_p2 xor ap_const_lv8_1B);
    tmp_20_fu_627_p1 <= std_logic_vector(resize(unsigned(i_reg_451),64));
    tmp_22_fu_638_p2 <= std_logic_vector(signed(ap_const_lv4_D) + signed(tmp_67_reg_899));
    tmp_23_fu_643_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_638_p2),64));
    tmp_24_fu_648_p2 <= (tmp_67_reg_899 or ap_const_lv4_1);
    tmp_25_fu_653_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_648_p2),64));
    tmp_27_fu_658_p2 <= std_logic_vector(signed(ap_const_lv4_E) + signed(tmp_67_reg_899));
    tmp_28_fu_663_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_658_p2),64));
    tmp_29_fu_668_p2 <= (tmp_67_reg_899 or ap_const_lv4_2);
    tmp_30_fu_673_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_668_p2),64));
    tmp_32_fu_678_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(tmp_67_reg_899));
    tmp_33_fu_683_p1 <= std_logic_vector(resize(unsigned(tmp_32_fu_678_p2),64));
    tmp_34_fu_688_p2 <= (tmp_67_reg_899 or ap_const_lv4_3);
    tmp_35_fu_693_p1 <= std_logic_vector(resize(unsigned(tmp_34_fu_688_p2),64));
    tmp_38_fu_703_p1 <= std_logic_vector(resize(unsigned(reg_495),64));
    tmp_40_fu_708_p1 <= std_logic_vector(resize(unsigned(reg_491),64));
    tmp_42_fu_713_p1 <= std_logic_vector(resize(unsigned(reg_495),64));
    tmp_44_fu_730_p2 <= std_logic_vector(signed(ap_const_lv5_1C) + signed(tmp_69_fu_726_p1));
    tmp_45_fu_736_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_730_p2),64));
    tmp_46_fu_741_p1 <= std_logic_vector(resize(unsigned(i_1_reg_462),64));
    tmp_48_fu_752_p2 <= std_logic_vector(signed(ap_const_lv5_1D) + signed(tmp_69_reg_1019));
    tmp_49_fu_757_p1 <= std_logic_vector(resize(unsigned(tmp_48_fu_752_p2),64));
    tmp_50_fu_762_p2 <= (tmp_69_reg_1019 or ap_const_lv5_1);
    tmp_51_fu_767_p1 <= std_logic_vector(resize(unsigned(tmp_50_fu_762_p2),64));
    tmp_53_fu_772_p2 <= std_logic_vector(signed(ap_const_lv5_1E) + signed(tmp_69_reg_1019));
    tmp_54_fu_777_p1 <= std_logic_vector(resize(unsigned(tmp_53_fu_772_p2),64));
    tmp_55_fu_782_p2 <= (tmp_69_reg_1019 or ap_const_lv5_2);
    tmp_56_fu_787_p1 <= std_logic_vector(resize(unsigned(tmp_55_fu_782_p2),64));
    tmp_58_fu_792_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(tmp_69_reg_1019));
    tmp_59_fu_797_p1 <= std_logic_vector(resize(unsigned(tmp_58_fu_792_p2),64));
    tmp_60_fu_802_p2 <= (tmp_69_reg_1019 or ap_const_lv5_3);
    tmp_61_fu_807_p1 <= std_logic_vector(resize(unsigned(tmp_60_fu_802_p2),64));
    tmp_65_fu_582_p3 <= rc_read(7 downto 7);
    tmp_66_fu_604_p3 <= i_reg_451(4 downto 4);
    tmp_67_fu_612_p1 <= i_reg_451(4 - 1 downto 0);
    tmp_68_fu_718_p3 <= i_1_reg_462(5 downto 5);
    tmp_69_fu_726_p1 <= i_1_reg_462(5 - 1 downto 0);
    tmp_fu_531_p1 <= std_logic_vector(resize(unsigned(reg_491),64));
    tmp_s_fu_557_p2 <= (tmp1_fu_551_p2 xor sbox_q0);
    y_20_fu_596_p3 <= 
        tmp_1_i_fu_590_p2 when (tmp_65_fu_582_p3(0) = '1') else 
        y_fu_576_p2;
    y_fu_576_p2 <= std_logic_vector(shift_left(unsigned(rc_read),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
end behav;
