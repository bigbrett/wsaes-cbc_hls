

================================================================
== Vivado HLS Report for 'aes_expandDecKey'
================================================================
* Date:           Tue Mar 14 13:06:40 2017

* Version:        2016.4 (Build 1733598 on Wed Dec 14 22:59:20 MST 2016)
* Project:        aes256cbc
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   8.00|      4.11|        1.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   48|   48|   48|   48|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |   18|   18|         6|          -|          -|     3|    no    |
        |- Loop 2  |   18|   18|         6|          -|          -|     3|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 23
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (tmp)
	8  / (!tmp)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	2  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / (!tmp_88)
	19  / (tmp_88)
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	13  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: rc_read_2 (4)  [1/1] 0.00ns
:0  %rc_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %rc_read)

ST_1: StgValue_25 (5)  [1/1] 1.57ns  loc: aes256cbc/src/aes256ecb.c:319
:1  br label %1


 <State 2>: 4.11ns
ST_2: i (7)  [1/1] 0.00ns
:0  %i = phi i5 [ -4, %0 ], [ %i_4, %2 ]

ST_2: tmp (8)  [1/1] 1.91ns  loc: aes256cbc/src/aes256ecb.c:319
:1  %tmp = icmp ugt i5 %i, -16

ST_2: empty (9)  [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)

ST_2: StgValue_29 (10)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:3  br i1 %tmp, label %2, label %3

ST_2: i_4 (12)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:319
:0  %i_4 = add i5 %i, -4

ST_2: tmp_63 (13)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:1  %tmp_63 = zext i5 %i_4 to i64

ST_2: ctx_key_addr (14)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:2  %ctx_key_addr = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_63

ST_2: ctx_key_load (15)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:3  %ctx_key_load = load i8* %ctx_key_addr, align 4

ST_2: tmp_64 (16)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:4  %tmp_64 = zext i5 %i to i64

ST_2: ctx_key_addr_1 (17)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:5  %ctx_key_addr_1 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_64

ST_2: ctx_key_load_1 (18)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:6  %ctx_key_load_1 = load i8* %ctx_key_addr_1, align 4

ST_2: ctx_key_load_8 (53)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:322
:0  %ctx_key_load_8 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 12), align 4

ST_2: ctx_key_load_10 (60)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:323
:7  %ctx_key_load_10 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 13), align 1


 <State 3>: 4.11ns
ST_3: ctx_key_load (15)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:3  %ctx_key_load = load i8* %ctx_key_addr, align 4

ST_3: ctx_key_load_1 (18)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:6  %ctx_key_load_1 = load i8* %ctx_key_addr_1, align 4

ST_3: tmp_65 (19)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:319
:7  %tmp_65 = xor i8 %ctx_key_load_1, %ctx_key_load

ST_3: tmp_66 (21)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:319
:9  %tmp_66 = add i5 %i, -3

ST_3: tmp_67 (22)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:10  %tmp_67 = zext i5 %tmp_66 to i64

ST_3: ctx_key_addr_2 (23)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:11  %ctx_key_addr_2 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_67

ST_3: ctx_key_load_2 (24)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:12  %ctx_key_load_2 = load i8* %ctx_key_addr_2, align 1

ST_3: tmp_68 (25)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:13  %tmp_68 = or i5 %i, 1

ST_3: tmp_69 (26)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:14  %tmp_69 = zext i5 %tmp_68 to i64

ST_3: ctx_key_addr_3 (27)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:15  %ctx_key_addr_3 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_69

ST_3: ctx_key_load_3 (28)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:16  %ctx_key_load_3 = load i8* %ctx_key_addr_3, align 1


 <State 4>: 4.11ns
ST_4: ctx_key_load_2 (24)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:12  %ctx_key_load_2 = load i8* %ctx_key_addr_2, align 1

ST_4: ctx_key_load_3 (28)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:16  %ctx_key_load_3 = load i8* %ctx_key_addr_3, align 1

ST_4: tmp_70 (29)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:319
:17  %tmp_70 = xor i8 %ctx_key_load_3, %ctx_key_load_2

ST_4: tmp_71 (31)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:319
:19  %tmp_71 = add i5 %i, -2

ST_4: tmp_72 (32)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:20  %tmp_72 = zext i5 %tmp_71 to i64

ST_4: ctx_key_addr_4 (33)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:21  %ctx_key_addr_4 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_72

ST_4: ctx_key_load_4 (34)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:22  %ctx_key_load_4 = load i8* %ctx_key_addr_4, align 2

ST_4: tmp_73 (35)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:23  %tmp_73 = or i5 %i, 2

ST_4: tmp_74 (36)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:24  %tmp_74 = zext i5 %tmp_73 to i64

ST_4: ctx_key_addr_5 (37)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:25  %ctx_key_addr_5 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_74

ST_4: ctx_key_load_5 (38)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:26  %ctx_key_load_5 = load i8* %ctx_key_addr_5, align 2


 <State 5>: 4.11ns
ST_5: ctx_key_load_4 (34)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:22  %ctx_key_load_4 = load i8* %ctx_key_addr_4, align 2

ST_5: ctx_key_load_5 (38)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:26  %ctx_key_load_5 = load i8* %ctx_key_addr_5, align 2

ST_5: tmp_75 (39)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:319
:27  %tmp_75 = xor i8 %ctx_key_load_5, %ctx_key_load_4

ST_5: tmp_76 (41)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:319
:29  %tmp_76 = add i5 %i, -1

ST_5: tmp_77 (42)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:30  %tmp_77 = zext i5 %tmp_76 to i64

ST_5: ctx_key_addr_6 (43)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:31  %ctx_key_addr_6 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_77

ST_5: ctx_key_load_6 (44)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:32  %ctx_key_load_6 = load i8* %ctx_key_addr_6, align 1

ST_5: tmp_78 (45)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:33  %tmp_78 = or i5 %i, 3

ST_5: tmp_79 (46)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:34  %tmp_79 = zext i5 %tmp_78 to i64

ST_5: ctx_key_addr_7 (47)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:35  %ctx_key_addr_7 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_79

ST_5: ctx_key_load_7 (48)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:36  %ctx_key_load_7 = load i8* %ctx_key_addr_7, align 1


 <State 6>: 3.76ns
ST_6: StgValue_72 (20)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:8  store i8 %tmp_65, i8* %ctx_key_addr_1, align 4

ST_6: StgValue_73 (30)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:18  store i8 %tmp_70, i8* %ctx_key_addr_3, align 1

ST_6: ctx_key_load_6 (44)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:32  %ctx_key_load_6 = load i8* %ctx_key_addr_6, align 1

ST_6: ctx_key_load_7 (48)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:36  %ctx_key_load_7 = load i8* %ctx_key_addr_7, align 1

ST_6: tmp_80 (49)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:319
:37  %tmp_80 = xor i8 %ctx_key_load_7, %ctx_key_load_6


 <State 7>: 2.39ns
ST_7: StgValue_77 (40)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:28  store i8 %tmp_75, i8* %ctx_key_addr_5, align 2

ST_7: StgValue_78 (50)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:319
:38  store i8 %tmp_80, i8* %ctx_key_addr_7, align 1

ST_7: StgValue_79 (51)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:319
:39  br label %1


 <State 8>: 2.39ns
ST_8: ctx_key_load_8 (53)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:322
:0  %ctx_key_load_8 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 12), align 4

ST_8: ctx_key_load_10 (60)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:323
:7  %ctx_key_load_10 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 13), align 1

ST_8: ctx_key_load_12 (67)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:324
:14  %ctx_key_load_12 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 14), align 2

ST_8: ctx_key_load_14 (74)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:325
:21  %ctx_key_load_14 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 15), align 1


 <State 9>: 2.39ns
ST_9: tmp_s (54)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:322
:1  %tmp_s = zext i8 %ctx_key_load_8 to i64

ST_9: sbox_addr (55)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:322
:2  %sbox_addr = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_s

ST_9: sbox_load (56)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:322
:3  %sbox_load = load i8* %sbox_addr, align 1

ST_9: ctx_key_load_9 (57)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:322
:4  %ctx_key_load_9 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 16), align 16

ST_9: tmp_82 (61)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:323
:8  %tmp_82 = zext i8 %ctx_key_load_10 to i64

ST_9: sbox_addr_8 (62)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:323
:9  %sbox_addr_8 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_82

ST_9: sbox_load_8 (63)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:323
:10  %sbox_load_8 = load i8* %sbox_addr_8, align 1

ST_9: ctx_key_load_11 (64)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:323
:11  %ctx_key_load_11 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 17), align 1

ST_9: ctx_key_load_12 (67)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:324
:14  %ctx_key_load_12 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 14), align 2

ST_9: ctx_key_load_14 (74)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:325
:21  %ctx_key_load_14 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 15), align 1


 <State 10>: 3.76ns
ST_10: sbox_load (56)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:322
:3  %sbox_load = load i8* %sbox_addr, align 1

ST_10: ctx_key_load_9 (57)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:322
:4  %ctx_key_load_9 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 16), align 16

ST_10: tmp_81 (58)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:322
:5  %tmp_81 = xor i8 %ctx_key_load_9, %sbox_load

ST_10: sbox_load_8 (63)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:323
:10  %sbox_load_8 = load i8* %sbox_addr_8, align 1

ST_10: ctx_key_load_11 (64)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:323
:11  %ctx_key_load_11 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 17), align 1

ST_10: tmp_83 (65)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:323
:12  %tmp_83 = xor i8 %ctx_key_load_11, %sbox_load_8

ST_10: tmp_84 (68)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:324
:15  %tmp_84 = zext i8 %ctx_key_load_12 to i64

ST_10: sbox_addr_9 (69)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:324
:16  %sbox_addr_9 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_84

ST_10: sbox_load_9 (70)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:324
:17  %sbox_load_9 = load i8* %sbox_addr_9, align 1

ST_10: ctx_key_load_13 (71)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:324
:18  %ctx_key_load_13 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 18), align 2

ST_10: tmp_86 (75)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:325
:22  %tmp_86 = zext i8 %ctx_key_load_14 to i64

ST_10: sbox_addr_10 (76)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:325
:23  %sbox_addr_10 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_86

ST_10: sbox_load_10 (77)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:325
:24  %sbox_load_10 = load i8* %sbox_addr_10, align 1

ST_10: ctx_key_load_15 (78)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:325
:25  %ctx_key_load_15 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 19), align 1


 <State 11>: 3.76ns
ST_11: StgValue_108 (59)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:322
:6  store i8 %tmp_81, i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 16), align 16

ST_11: StgValue_109 (66)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:323
:13  store i8 %tmp_83, i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 17), align 1

ST_11: sbox_load_9 (70)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:324
:17  %sbox_load_9 = load i8* %sbox_addr_9, align 1

ST_11: ctx_key_load_13 (71)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:324
:18  %ctx_key_load_13 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 18), align 2

ST_11: tmp_85 (72)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:324
:19  %tmp_85 = xor i8 %ctx_key_load_13, %sbox_load_9

ST_11: sbox_load_10 (77)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:325
:24  %sbox_load_10 = load i8* %sbox_addr_10, align 1

ST_11: ctx_key_load_15 (78)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:325
:25  %ctx_key_load_15 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 19), align 1

ST_11: tmp_87 (79)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:325
:26  %tmp_87 = xor i8 %ctx_key_load_15, %sbox_load_10


 <State 12>: 2.39ns
ST_12: StgValue_116 (73)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:324
:20  store i8 %tmp_85, i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 18), align 2

ST_12: StgValue_117 (80)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:325
:27  store i8 %tmp_87, i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 19), align 1

ST_12: StgValue_118 (81)  [1/1] 1.57ns  loc: aes256cbc/src/aes256ecb.c:327
:28  br label %4


 <State 13>: 3.19ns
ST_13: i_1 (83)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:0  %i_1 = phi i4 [ -4, %3 ], [ %i_5, %5 ]

ST_13: tmp_88 (84)  [1/1] 1.88ns  loc: aes256cbc/src/aes256ecb.c:327
:1  %tmp_88 = icmp eq i4 %i_1, 0

ST_13: empty_6 (85)  [1/1] 0.00ns
:2  %empty_6 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)

ST_13: StgValue_122 (86)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:3  br i1 %tmp_88, label %6, label %5

ST_13: tmp_123_cast (88)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:0  %tmp_123_cast = zext i4 %i_1 to i5

ST_13: tmp_101 (89)  [1/1] 0.80ns  loc: aes256cbc/src/aes256ecb.c:327
:1  %tmp_101 = add i5 %tmp_123_cast, -4

ST_13: tmp_102 (90)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:2  %tmp_102 = sext i5 %tmp_101 to i64

ST_13: ctx_key_addr_8 (91)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:3  %ctx_key_addr_8 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_102

ST_13: ctx_key_load_24 (92)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:4  %ctx_key_load_24 = load i8* %ctx_key_addr_8, align 4

ST_13: tmp_103 (93)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:5  %tmp_103 = zext i4 %i_1 to i64

ST_13: ctx_key_addr_9 (94)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:6  %ctx_key_addr_9 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_103

ST_13: ctx_key_load_25 (95)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:7  %ctx_key_load_25 = load i8* %ctx_key_addr_9, align 4

ST_13: ctx_key_load_16 (136)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:331
:5  %ctx_key_load_16 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 29), align 1

ST_13: ctx_key_load_18 (144)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:332
:13  %ctx_key_load_18 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 30), align 2


 <State 14>: 3.76ns
ST_14: ctx_key_load_24 (92)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:4  %ctx_key_load_24 = load i8* %ctx_key_addr_8, align 4

ST_14: ctx_key_load_25 (95)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:7  %ctx_key_load_25 = load i8* %ctx_key_addr_9, align 4

ST_14: tmp_104 (96)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:327
:8  %tmp_104 = xor i8 %ctx_key_load_25, %ctx_key_load_24

ST_14: tmp_105 (98)  [1/1] 0.80ns  loc: aes256cbc/src/aes256ecb.c:327
:10  %tmp_105 = add i5 %tmp_123_cast, -3

ST_14: tmp_106 (99)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:11  %tmp_106 = sext i5 %tmp_105 to i64

ST_14: ctx_key_addr_10 (100)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:12  %ctx_key_addr_10 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_106

ST_14: ctx_key_load_26 (101)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:13  %ctx_key_load_26 = load i8* %ctx_key_addr_10, align 1

ST_14: tmp_107 (102)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:14  %tmp_107 = or i4 %i_1, 1

ST_14: tmp_108 (103)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:15  %tmp_108 = zext i4 %tmp_107 to i64

ST_14: ctx_key_addr_11 (104)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:16  %ctx_key_addr_11 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_108

ST_14: ctx_key_load_27 (105)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:17  %ctx_key_load_27 = load i8* %ctx_key_addr_11, align 1


 <State 15>: 3.76ns
ST_15: ctx_key_load_26 (101)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:13  %ctx_key_load_26 = load i8* %ctx_key_addr_10, align 1

ST_15: ctx_key_load_27 (105)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:17  %ctx_key_load_27 = load i8* %ctx_key_addr_11, align 1

ST_15: tmp_109 (106)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:327
:18  %tmp_109 = xor i8 %ctx_key_load_27, %ctx_key_load_26

ST_15: tmp_110 (108)  [1/1] 0.80ns  loc: aes256cbc/src/aes256ecb.c:327
:20  %tmp_110 = add i5 %tmp_123_cast, -2

ST_15: tmp_111 (109)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:21  %tmp_111 = sext i5 %tmp_110 to i64

ST_15: ctx_key_addr_12 (110)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:22  %ctx_key_addr_12 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_111

ST_15: ctx_key_load_28 (111)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:23  %ctx_key_load_28 = load i8* %ctx_key_addr_12, align 2

ST_15: tmp_112 (112)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:24  %tmp_112 = or i4 %i_1, 2

ST_15: tmp_113 (113)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:25  %tmp_113 = zext i4 %tmp_112 to i64

ST_15: ctx_key_addr_13 (114)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:26  %ctx_key_addr_13 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_113

ST_15: ctx_key_load_29 (115)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:27  %ctx_key_load_29 = load i8* %ctx_key_addr_13, align 2


 <State 16>: 3.76ns
ST_16: ctx_key_load_28 (111)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:23  %ctx_key_load_28 = load i8* %ctx_key_addr_12, align 2

ST_16: ctx_key_load_29 (115)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:27  %ctx_key_load_29 = load i8* %ctx_key_addr_13, align 2

ST_16: tmp_114 (116)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:327
:28  %tmp_114 = xor i8 %ctx_key_load_29, %ctx_key_load_28

ST_16: tmp_115 (118)  [1/1] 0.80ns  loc: aes256cbc/src/aes256ecb.c:327
:30  %tmp_115 = add i4 %i_1, -1

ST_16: tmp_116 (119)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:31  %tmp_116 = zext i4 %tmp_115 to i64

ST_16: ctx_key_addr_14 (120)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:32  %ctx_key_addr_14 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_116

ST_16: ctx_key_load_30 (121)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:33  %ctx_key_load_30 = load i8* %ctx_key_addr_14, align 1

ST_16: tmp_117 (122)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:34  %tmp_117 = or i4 %i_1, 3

ST_16: tmp_118 (123)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:35  %tmp_118 = zext i4 %tmp_117 to i64

ST_16: ctx_key_addr_15 (124)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:36  %ctx_key_addr_15 = getelementptr [32 x i8]* @ctx_key, i64 0, i64 %tmp_118

ST_16: ctx_key_load_31 (125)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:37  %ctx_key_load_31 = load i8* %ctx_key_addr_15, align 1

ST_16: i_5 (128)  [1/1] 0.80ns  loc: aes256cbc/src/aes256ecb.c:327
:40  %i_5 = add i4 %i_1, -4


 <State 17>: 3.76ns
ST_17: StgValue_167 (97)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:9  store i8 %tmp_104, i8* %ctx_key_addr_9, align 4

ST_17: StgValue_168 (107)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:19  store i8 %tmp_109, i8* %ctx_key_addr_11, align 1

ST_17: ctx_key_load_30 (121)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:33  %ctx_key_load_30 = load i8* %ctx_key_addr_14, align 1

ST_17: ctx_key_load_31 (125)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:37  %ctx_key_load_31 = load i8* %ctx_key_addr_15, align 1

ST_17: tmp_119 (126)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:327
:38  %tmp_119 = xor i8 %ctx_key_load_31, %ctx_key_load_30


 <State 18>: 2.39ns
ST_18: StgValue_172 (117)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:29  store i8 %tmp_114, i8* %ctx_key_addr_13, align 2

ST_18: StgValue_173 (127)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:327
:39  store i8 %tmp_119, i8* %ctx_key_addr_15, align 1

ST_18: StgValue_174 (129)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:327
:41  br label %4


 <State 19>: 2.39ns
ST_19: ctx_key_load_16 (136)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:331
:5  %ctx_key_load_16 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 29), align 1

ST_19: ctx_key_load_18 (144)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:332
:13  %ctx_key_load_18 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 30), align 2

ST_19: ctx_key_load_20 (151)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:333
:20  %ctx_key_load_20 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 31), align 1

ST_19: ctx_key_load_22 (158)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:334
:27  %ctx_key_load_22 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 28), align 4


 <State 20>: 2.39ns
ST_20: tmp_93 (137)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:331
:6  %tmp_93 = zext i8 %ctx_key_load_16 to i64

ST_20: sbox_addr_11 (138)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:331
:7  %sbox_addr_11 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_93

ST_20: sbox_load_11 (139)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:331
:8  %sbox_load_11 = load i8* %sbox_addr_11, align 1

ST_20: ctx_key_load_17 (140)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:331
:9  %ctx_key_load_17 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 0), align 16

ST_20: tmp_95 (145)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:332
:14  %tmp_95 = zext i8 %ctx_key_load_18 to i64

ST_20: sbox_addr_12 (146)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:332
:15  %sbox_addr_12 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_95

ST_20: sbox_load_12 (147)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:332
:16  %sbox_load_12 = load i8* %sbox_addr_12, align 1

ST_20: ctx_key_load_19 (148)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:332
:17  %ctx_key_load_19 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 1), align 1

ST_20: ctx_key_load_20 (151)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:333
:20  %ctx_key_load_20 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 31), align 1

ST_20: ctx_key_load_22 (158)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:334
:27  %ctx_key_load_22 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 28), align 4


 <State 21>: 3.76ns
ST_21: tmp_89 (131)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:330 (grouped into LUT with out node rc_write_assign)
:0  %tmp_89 = call i7 @_ssdm_op_PartSelect.i7.i8.i32.i32(i8 %rc_read_2, i32 1, i32 7)

ST_21: tmp_90 (132)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:330 (grouped into LUT with out node rc_write_assign)
:1  %tmp_90 = zext i7 %tmp_89 to i8

ST_21: tmp_91 (133)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:330 (grouped into LUT with out node rc_write_assign)
:2  %tmp_91 = trunc i8 %rc_read_2 to i1

ST_21: tmp_92 (134)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:330 (grouped into LUT with out node rc_write_assign)
:3  %tmp_92 = select i1 %tmp_91, i8 -115, i8 0

ST_21: rc_write_assign (135)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:330 (out node of the LUT)
:4  %rc_write_assign = xor i8 %tmp_92, %tmp_90

ST_21: sbox_load_11 (139)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:331
:8  %sbox_load_11 = load i8* %sbox_addr_11, align 1

ST_21: ctx_key_load_17 (140)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:331
:9  %ctx_key_load_17 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 0), align 16

ST_21: tmp1 (141)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:331 (grouped into LUT with out node tmp_94)
:10  %tmp1 = xor i8 %ctx_key_load_17, %rc_write_assign

ST_21: tmp_94 (142)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:331 (out node of the LUT)
:11  %tmp_94 = xor i8 %tmp1, %sbox_load_11

ST_21: sbox_load_12 (147)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:332
:16  %sbox_load_12 = load i8* %sbox_addr_12, align 1

ST_21: ctx_key_load_19 (148)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:332
:17  %ctx_key_load_19 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 1), align 1

ST_21: tmp_96 (149)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:332
:18  %tmp_96 = xor i8 %ctx_key_load_19, %sbox_load_12

ST_21: tmp_97 (152)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:333
:21  %tmp_97 = zext i8 %ctx_key_load_20 to i64

ST_21: sbox_addr_13 (153)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:333
:22  %sbox_addr_13 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_97

ST_21: sbox_load_13 (154)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:333
:23  %sbox_load_13 = load i8* %sbox_addr_13, align 1

ST_21: ctx_key_load_21 (155)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:333
:24  %ctx_key_load_21 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 2), align 2

ST_21: tmp_99 (159)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:334
:28  %tmp_99 = zext i8 %ctx_key_load_22 to i64

ST_21: sbox_addr_14 (160)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:334
:29  %sbox_addr_14 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_99

ST_21: sbox_load_14 (161)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:334
:30  %sbox_load_14 = load i8* %sbox_addr_14, align 1

ST_21: ctx_key_load_23 (162)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:334
:31  %ctx_key_load_23 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 3), align 1


 <State 22>: 3.76ns
ST_22: StgValue_209 (143)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:331
:12  store i8 %tmp_94, i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 0), align 16

ST_22: StgValue_210 (150)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:332
:19  store i8 %tmp_96, i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 1), align 1

ST_22: sbox_load_13 (154)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:333
:23  %sbox_load_13 = load i8* %sbox_addr_13, align 1

ST_22: ctx_key_load_21 (155)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:333
:24  %ctx_key_load_21 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 2), align 2

ST_22: tmp_98 (156)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:333
:25  %tmp_98 = xor i8 %ctx_key_load_21, %sbox_load_13

ST_22: sbox_load_14 (161)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:334
:30  %sbox_load_14 = load i8* %sbox_addr_14, align 1

ST_22: ctx_key_load_23 (162)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:334
:31  %ctx_key_load_23 = load i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 3), align 1

ST_22: tmp_100 (163)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:334
:32  %tmp_100 = xor i8 %ctx_key_load_23, %sbox_load_14


 <State 23>: 2.39ns
ST_23: StgValue_217 (157)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:333
:26  store i8 %tmp_98, i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 2), align 2

ST_23: StgValue_218 (164)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:334
:33  store i8 %tmp_100, i8* getelementptr inbounds ([32 x i8]* @ctx_key, i64 0, i64 3), align 1

ST_23: StgValue_219 (165)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:335
:34  ret i8 %rc_write_assign



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8ns, clock uncertainty: 1ns.

 <State 1>: 1.57ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', aes256cbc/src/aes256ecb.c:319) [7]  (1.57 ns)

 <State 2>: 4.11ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', aes256cbc/src/aes256ecb.c:319) [7]  (0 ns)
	'add' operation ('i', aes256cbc/src/aes256ecb.c:319) [12]  (1.72 ns)
	'getelementptr' operation ('ctx_key_addr', aes256cbc/src/aes256ecb.c:319) [14]  (0 ns)
	'load' operation ('ctx_key_load', aes256cbc/src/aes256ecb.c:319) on array 'ctx_key' [15]  (2.39 ns)

 <State 3>: 4.11ns
The critical path consists of the following:
	'add' operation ('tmp_66', aes256cbc/src/aes256ecb.c:319) [21]  (1.72 ns)
	'getelementptr' operation ('ctx_key_addr_2', aes256cbc/src/aes256ecb.c:319) [23]  (0 ns)
	'load' operation ('ctx_key_load_2', aes256cbc/src/aes256ecb.c:319) on array 'ctx_key' [24]  (2.39 ns)

 <State 4>: 4.11ns
The critical path consists of the following:
	'add' operation ('tmp_71', aes256cbc/src/aes256ecb.c:319) [31]  (1.72 ns)
	'getelementptr' operation ('ctx_key_addr_4', aes256cbc/src/aes256ecb.c:319) [33]  (0 ns)
	'load' operation ('ctx_key_load_4', aes256cbc/src/aes256ecb.c:319) on array 'ctx_key' [34]  (2.39 ns)

 <State 5>: 4.11ns
The critical path consists of the following:
	'add' operation ('tmp_76', aes256cbc/src/aes256ecb.c:319) [41]  (1.72 ns)
	'getelementptr' operation ('ctx_key_addr_6', aes256cbc/src/aes256ecb.c:319) [43]  (0 ns)
	'load' operation ('ctx_key_load_6', aes256cbc/src/aes256ecb.c:319) on array 'ctx_key' [44]  (2.39 ns)

 <State 6>: 3.76ns
The critical path consists of the following:
	'load' operation ('ctx_key_load_6', aes256cbc/src/aes256ecb.c:319) on array 'ctx_key' [44]  (2.39 ns)
	'xor' operation ('tmp_80', aes256cbc/src/aes256ecb.c:319) [49]  (1.37 ns)

 <State 7>: 2.39ns
The critical path consists of the following:
	'store' operation (aes256cbc/src/aes256ecb.c:319) of variable 'tmp_75', aes256cbc/src/aes256ecb.c:319 on array 'ctx_key' [40]  (2.39 ns)

 <State 8>: 2.39ns
The critical path consists of the following:
	'load' operation ('ctx_key_load_8', aes256cbc/src/aes256ecb.c:322) on array 'ctx_key' [53]  (2.39 ns)

 <State 9>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('sbox_addr', aes256cbc/src/aes256ecb.c:322) [55]  (0 ns)
	'load' operation ('sbox_load', aes256cbc/src/aes256ecb.c:322) on array 'sbox' [56]  (2.39 ns)

 <State 10>: 3.76ns
The critical path consists of the following:
	'load' operation ('sbox_load', aes256cbc/src/aes256ecb.c:322) on array 'sbox' [56]  (2.39 ns)
	'xor' operation ('tmp_81', aes256cbc/src/aes256ecb.c:322) [58]  (1.37 ns)

 <State 11>: 3.76ns
The critical path consists of the following:
	'load' operation ('sbox_load_9', aes256cbc/src/aes256ecb.c:324) on array 'sbox' [70]  (2.39 ns)
	'xor' operation ('tmp_85', aes256cbc/src/aes256ecb.c:324) [72]  (1.37 ns)

 <State 12>: 2.39ns
The critical path consists of the following:
	'store' operation (aes256cbc/src/aes256ecb.c:324) of variable 'tmp_85', aes256cbc/src/aes256ecb.c:324 on array 'ctx_key' [73]  (2.39 ns)

 <State 13>: 3.19ns
The critical path consists of the following:
	'phi' operation ('i_1', aes256cbc/src/aes256ecb.c:327) with incoming values : ('i_5', aes256cbc/src/aes256ecb.c:327) [83]  (0 ns)
	'add' operation ('tmp_101', aes256cbc/src/aes256ecb.c:327) [89]  (0.8 ns)
	'getelementptr' operation ('ctx_key_addr_8', aes256cbc/src/aes256ecb.c:327) [91]  (0 ns)
	'load' operation ('ctx_key_load_24', aes256cbc/src/aes256ecb.c:327) on array 'ctx_key' [92]  (2.39 ns)

 <State 14>: 3.76ns
The critical path consists of the following:
	'load' operation ('ctx_key_load_24', aes256cbc/src/aes256ecb.c:327) on array 'ctx_key' [92]  (2.39 ns)
	'xor' operation ('tmp_104', aes256cbc/src/aes256ecb.c:327) [96]  (1.37 ns)

 <State 15>: 3.76ns
The critical path consists of the following:
	'load' operation ('ctx_key_load_26', aes256cbc/src/aes256ecb.c:327) on array 'ctx_key' [101]  (2.39 ns)
	'xor' operation ('tmp_109', aes256cbc/src/aes256ecb.c:327) [106]  (1.37 ns)

 <State 16>: 3.76ns
The critical path consists of the following:
	'load' operation ('ctx_key_load_28', aes256cbc/src/aes256ecb.c:327) on array 'ctx_key' [111]  (2.39 ns)
	'xor' operation ('tmp_114', aes256cbc/src/aes256ecb.c:327) [116]  (1.37 ns)

 <State 17>: 3.76ns
The critical path consists of the following:
	'load' operation ('ctx_key_load_30', aes256cbc/src/aes256ecb.c:327) on array 'ctx_key' [121]  (2.39 ns)
	'xor' operation ('tmp_119', aes256cbc/src/aes256ecb.c:327) [126]  (1.37 ns)

 <State 18>: 2.39ns
The critical path consists of the following:
	'store' operation (aes256cbc/src/aes256ecb.c:327) of variable 'tmp_114', aes256cbc/src/aes256ecb.c:327 on array 'ctx_key' [117]  (2.39 ns)

 <State 19>: 2.39ns
The critical path consists of the following:
	'load' operation ('ctx_key_load_16', aes256cbc/src/aes256ecb.c:331) on array 'ctx_key' [136]  (2.39 ns)

 <State 20>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('sbox_addr_11', aes256cbc/src/aes256ecb.c:331) [138]  (0 ns)
	'load' operation ('sbox_load_11', aes256cbc/src/aes256ecb.c:331) on array 'sbox' [139]  (2.39 ns)

 <State 21>: 3.76ns
The critical path consists of the following:
	'load' operation ('sbox_load_11', aes256cbc/src/aes256ecb.c:331) on array 'sbox' [139]  (2.39 ns)
	'xor' operation ('tmp_94', aes256cbc/src/aes256ecb.c:331) [142]  (1.37 ns)

 <State 22>: 3.76ns
The critical path consists of the following:
	'load' operation ('sbox_load_13', aes256cbc/src/aes256ecb.c:333) on array 'sbox' [154]  (2.39 ns)
	'xor' operation ('tmp_98', aes256cbc/src/aes256ecb.c:333) [156]  (1.37 ns)

 <State 23>: 2.39ns
The critical path consists of the following:
	'store' operation (aes256cbc/src/aes256ecb.c:333) of variable 'tmp_98', aes256cbc/src/aes256ecb.c:333 on array 'ctx_key' [157]  (2.39 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
