

================================================================
== Vivado HLS Report for 'aes_expandEncKey'
================================================================
* Date:           Sat Jun  3 11:51:51 2017

* Version:        2016.4 (Build 1756540 on Mon Jan 23 19:31:01 MST 2017)
* Project:        aes256cbc
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   8.00|      6.15|        1.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   48|   48|   48|   48|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |   18|   18|         6|          -|          -|     3|    no    |
        |- Loop 2  |   18|   18|         6|          -|          -|     3|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 23
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / (!tmp_66)
	13  / (tmp_66)
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	7  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / (!tmp_68)
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	18  / true
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: k_addr_1 (6)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:296
:2  %k_addr_1 = getelementptr [32 x i8]* %k, i64 0, i64 29

ST_1: k_load (7)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:296
:3  %k_load = load i8* %k_addr_1, align 1

ST_1: k_addr_2 (15)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:297
:11  %k_addr_2 = getelementptr [32 x i8]* %k, i64 0, i64 30

ST_1: k_load_2 (16)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:297
:12  %k_load_2 = load i8* %k_addr_2, align 1


 <State 2>: 2.39ns
ST_2: k_load (7)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:296
:3  %k_load = load i8* %k_addr_1, align 1

ST_2: k_load_2 (16)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:297
:12  %k_load_2 = load i8* %k_addr_2, align 1

ST_2: k_addr_4 (24)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:298
:20  %k_addr_4 = getelementptr [32 x i8]* %k, i64 0, i64 31

ST_2: k_load_4 (25)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:298
:21  %k_load_4 = load i8* %k_addr_4, align 1

ST_2: k_addr_6 (33)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:299
:29  %k_addr_6 = getelementptr [32 x i8]* %k, i64 0, i64 28

ST_2: k_load_6 (34)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:299
:30  %k_load_6 = load i8* %k_addr_6, align 1


 <State 3>: 2.39ns
ST_3: k_addr (5)  [1/1] 0.00ns
:1  %k_addr = getelementptr [32 x i8]* %k, i64 0, i64 0

ST_3: k_load_1 (11)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:296
:7  %k_load_1 = load i8* %k_addr, align 1

ST_3: tmp_11 (17)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:297
:13  %tmp_11 = zext i8 %k_load_2 to i64

ST_3: sbox_addr_1 (18)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:297
:14  %sbox_addr_1 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_11

ST_3: sbox_load_1 (19)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:297
:15  %sbox_load_1 = load i8* %sbox_addr_1, align 1

ST_3: k_addr_3 (20)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:297
:16  %k_addr_3 = getelementptr [32 x i8]* %k, i64 0, i64 1

ST_3: k_load_3 (21)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:297
:17  %k_load_3 = load i8* %k_addr_3, align 1

ST_3: k_load_4 (25)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:298
:21  %k_load_4 = load i8* %k_addr_4, align 1

ST_3: k_load_6 (34)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:299
:30  %k_load_6 = load i8* %k_addr_6, align 1


 <State 4>: 3.76ns
ST_4: tmp (8)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:296
:4  %tmp = zext i8 %k_load to i64

ST_4: sbox_addr (9)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:296
:5  %sbox_addr = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp

ST_4: sbox_load (10)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:296
:6  %sbox_load = load i8* %sbox_addr, align 1

ST_4: k_load_1 (11)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:296
:7  %k_load_1 = load i8* %k_addr, align 1

ST_4: sbox_load_1 (19)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:297
:15  %sbox_load_1 = load i8* %sbox_addr_1, align 1

ST_4: k_load_3 (21)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:297
:17  %k_load_3 = load i8* %k_addr_3, align 1

ST_4: tmp_12 (22)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:297
:18  %tmp_12 = xor i8 %k_load_3, %sbox_load_1

ST_4: tmp_13 (26)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:298
:22  %tmp_13 = zext i8 %k_load_4 to i64

ST_4: sbox_addr_2 (27)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:298
:23  %sbox_addr_2 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_13

ST_4: sbox_load_2 (28)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:298
:24  %sbox_load_2 = load i8* %sbox_addr_2, align 1

ST_4: k_addr_5 (29)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:298
:25  %k_addr_5 = getelementptr [32 x i8]* %k, i64 0, i64 2

ST_4: k_load_5 (30)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:298
:26  %k_load_5 = load i8* %k_addr_5, align 1

ST_4: tmp_15 (35)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:299
:31  %tmp_15 = zext i8 %k_load_6 to i64

ST_4: sbox_addr_3 (36)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:299
:32  %sbox_addr_3 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_15

ST_4: sbox_load_3 (37)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:299
:33  %sbox_load_3 = load i8* %sbox_addr_3, align 1

ST_4: k_addr_7 (38)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:299
:34  %k_addr_7 = getelementptr [32 x i8]* %k, i64 0, i64 3

ST_4: k_load_7 (39)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:299
:35  %k_load_7 = load i8* %k_addr_7, align 1


 <State 5>: 6.15ns
ST_5: rc_read_1 (4)  [1/1] 0.00ns
:0  %rc_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %rc_read)

ST_5: sbox_load (10)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:296
:6  %sbox_load = load i8* %sbox_addr, align 1

ST_5: tmp1 (12)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:296 (grouped into LUT with out node tmp_s)
:8  %tmp1 = xor i8 %k_load_1, %rc_read_1

ST_5: tmp_s (13)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:296 (out node of the LUT)
:9  %tmp_s = xor i8 %tmp1, %sbox_load

ST_5: StgValue_64 (14)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:296
:10  store i8 %tmp_s, i8* %k_addr, align 1

ST_5: StgValue_65 (23)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:297
:19  store i8 %tmp_12, i8* %k_addr_3, align 1

ST_5: sbox_load_2 (28)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:298
:24  %sbox_load_2 = load i8* %sbox_addr_2, align 1

ST_5: k_load_5 (30)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:298
:26  %k_load_5 = load i8* %k_addr_5, align 1

ST_5: tmp_14 (31)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:298
:27  %tmp_14 = xor i8 %k_load_5, %sbox_load_2

ST_5: sbox_load_3 (37)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:299
:33  %sbox_load_3 = load i8* %sbox_addr_3, align 1

ST_5: k_load_7 (39)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:299
:35  %k_load_7 = load i8* %k_addr_7, align 1

ST_5: tmp_16 (40)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:299
:36  %tmp_16 = xor i8 %k_load_7, %sbox_load_3

ST_5: y (42)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:189->aes256cbc/src/aes256ecb.c:300
:38  %y = shl i8 %rc_read_1, 1

ST_5: tmp_65 (43)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:190->aes256cbc/src/aes256ecb.c:300 (grouped into LUT with out node y_20)
:39  %tmp_65 = call i1 @_ssdm_op_BitSelect.i1.i8.i32(i8 %rc_read_1, i32 7)

ST_5: tmp_1_i (44)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:190->aes256cbc/src/aes256ecb.c:300 (grouped into LUT with out node y_20)
:40  %tmp_1_i = xor i8 %y, 27

ST_5: y_20 (45)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:190->aes256cbc/src/aes256ecb.c:300 (out node of the LUT)
:41  %y_20 = select i1 %tmp_65, i8 %tmp_1_i, i8 %y


 <State 6>: 2.39ns
ST_6: StgValue_76 (32)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:298
:28  store i8 %tmp_14, i8* %k_addr_5, align 1

ST_6: StgValue_77 (41)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:299
:37  store i8 %tmp_16, i8* %k_addr_7, align 1

ST_6: StgValue_78 (46)  [1/1] 1.57ns  loc: aes256cbc/src/aes256ecb.c:302
:42  br label %1


 <State 7>: 3.19ns
ST_7: i (48)  [1/1] 0.00ns
:0  %i = phi i5 [ 4, %0 ], [ %i_2, %2 ]

ST_7: tmp_66 (49)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:1  %tmp_66 = call i1 @_ssdm_op_BitSelect.i1.i5.i32(i5 %i, i32 4)

ST_7: empty (50)  [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)

ST_7: StgValue_82 (51)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:3  br i1 %tmp_66, label %3, label %2

ST_7: tmp_67 (53)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:0  %tmp_67 = trunc i5 %i to i4

ST_7: tmp_18 (54)  [1/1] 0.80ns  loc: aes256cbc/src/aes256ecb.c:302
:1  %tmp_18 = add i4 -4, %tmp_67

ST_7: tmp_19 (55)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:2  %tmp_19 = zext i4 %tmp_18 to i64

ST_7: k_addr_8 (56)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:3  %k_addr_8 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_19

ST_7: k_load_8 (57)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:4  %k_load_8 = load i8* %k_addr_8, align 1

ST_7: tmp_20 (58)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:5  %tmp_20 = zext i5 %i to i64

ST_7: k_addr_9 (59)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:6  %k_addr_9 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_20

ST_7: k_load_9 (60)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:7  %k_load_9 = load i8* %k_addr_9, align 1

ST_7: i_2 (93)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:302
:40  %i_2 = add i5 4, %i

ST_7: k_addr_16 (96)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:304
:0  %k_addr_16 = getelementptr [32 x i8]* %k, i64 0, i64 12

ST_7: k_load_16 (97)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:304
:1  %k_load_16 = load i8* %k_addr_16, align 1

ST_7: k_addr_18 (105)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:305
:9  %k_addr_18 = getelementptr [32 x i8]* %k, i64 0, i64 13

ST_7: k_load_18 (106)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:305
:10  %k_load_18 = load i8* %k_addr_18, align 1


 <State 8>: 3.76ns
ST_8: k_load_8 (57)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:4  %k_load_8 = load i8* %k_addr_8, align 1

ST_8: k_load_9 (60)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:7  %k_load_9 = load i8* %k_addr_9, align 1

ST_8: tmp_21 (61)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:302
:8  %tmp_21 = xor i8 %k_load_9, %k_load_8

ST_8: tmp_22 (63)  [1/1] 0.80ns  loc: aes256cbc/src/aes256ecb.c:302
:10  %tmp_22 = add i4 -3, %tmp_67

ST_8: tmp_23 (64)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:11  %tmp_23 = zext i4 %tmp_22 to i64

ST_8: k_addr_10 (65)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:12  %k_addr_10 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_23

ST_8: k_load_10 (66)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:13  %k_load_10 = load i8* %k_addr_10, align 1

ST_8: tmp_24 (67)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:14  %tmp_24 = or i4 %tmp_67, 1

ST_8: tmp_25 (68)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:15  %tmp_25 = zext i4 %tmp_24 to i64

ST_8: k_addr_11 (69)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:16  %k_addr_11 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_25

ST_8: k_load_11 (70)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:17  %k_load_11 = load i8* %k_addr_11, align 1


 <State 9>: 3.76ns
ST_9: k_load_10 (66)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:13  %k_load_10 = load i8* %k_addr_10, align 1

ST_9: k_load_11 (70)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:17  %k_load_11 = load i8* %k_addr_11, align 1

ST_9: tmp_26 (71)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:302
:18  %tmp_26 = xor i8 %k_load_11, %k_load_10

ST_9: tmp_27 (73)  [1/1] 0.80ns  loc: aes256cbc/src/aes256ecb.c:302
:20  %tmp_27 = add i4 -2, %tmp_67

ST_9: tmp_28 (74)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:21  %tmp_28 = zext i4 %tmp_27 to i64

ST_9: k_addr_12 (75)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:22  %k_addr_12 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_28

ST_9: k_load_12 (76)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:23  %k_load_12 = load i8* %k_addr_12, align 1

ST_9: tmp_29 (77)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:24  %tmp_29 = or i4 %tmp_67, 2

ST_9: tmp_30 (78)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:25  %tmp_30 = zext i4 %tmp_29 to i64

ST_9: k_addr_13 (79)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:26  %k_addr_13 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_30

ST_9: k_load_13 (80)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:27  %k_load_13 = load i8* %k_addr_13, align 1


 <State 10>: 3.76ns
ST_10: k_load_12 (76)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:23  %k_load_12 = load i8* %k_addr_12, align 1

ST_10: k_load_13 (80)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:27  %k_load_13 = load i8* %k_addr_13, align 1

ST_10: tmp_31 (81)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:302
:28  %tmp_31 = xor i8 %k_load_13, %k_load_12

ST_10: tmp_32 (83)  [1/1] 0.80ns  loc: aes256cbc/src/aes256ecb.c:302
:30  %tmp_32 = add i4 -1, %tmp_67

ST_10: tmp_33 (84)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:31  %tmp_33 = zext i4 %tmp_32 to i64

ST_10: k_addr_14 (85)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:32  %k_addr_14 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_33

ST_10: k_load_14 (86)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:33  %k_load_14 = load i8* %k_addr_14, align 1

ST_10: tmp_34 (87)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:34  %tmp_34 = or i4 %tmp_67, 3

ST_10: tmp_35 (88)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:35  %tmp_35 = zext i4 %tmp_34 to i64

ST_10: k_addr_15 (89)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:36  %k_addr_15 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_35

ST_10: k_load_15 (90)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:37  %k_load_15 = load i8* %k_addr_15, align 1


 <State 11>: 3.76ns
ST_11: StgValue_129 (62)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:9  store i8 %tmp_21, i8* %k_addr_9, align 1

ST_11: StgValue_130 (72)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:19  store i8 %tmp_26, i8* %k_addr_11, align 1

ST_11: k_load_14 (86)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:33  %k_load_14 = load i8* %k_addr_14, align 1

ST_11: k_load_15 (90)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:37  %k_load_15 = load i8* %k_addr_15, align 1

ST_11: tmp_36 (91)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:302
:38  %tmp_36 = xor i8 %k_load_15, %k_load_14


 <State 12>: 2.39ns
ST_12: StgValue_134 (82)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:29  store i8 %tmp_31, i8* %k_addr_13, align 1

ST_12: StgValue_135 (92)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:302
:39  store i8 %tmp_36, i8* %k_addr_15, align 1

ST_12: StgValue_136 (94)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:302
:41  br label %1


 <State 13>: 2.39ns
ST_13: k_load_16 (97)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:304
:1  %k_load_16 = load i8* %k_addr_16, align 1

ST_13: k_load_18 (106)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:305
:10  %k_load_18 = load i8* %k_addr_18, align 1

ST_13: k_addr_20 (114)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:306
:18  %k_addr_20 = getelementptr [32 x i8]* %k, i64 0, i64 14

ST_13: k_load_20 (115)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:306
:19  %k_load_20 = load i8* %k_addr_20, align 1

ST_13: k_addr_22 (123)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:307
:27  %k_addr_22 = getelementptr [32 x i8]* %k, i64 0, i64 15

ST_13: k_load_22 (124)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:307
:28  %k_load_22 = load i8* %k_addr_22, align 1


 <State 14>: 2.39ns
ST_14: tmp_17 (98)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:304
:2  %tmp_17 = zext i8 %k_load_16 to i64

ST_14: sbox_addr_4 (99)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:304
:3  %sbox_addr_4 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_17

ST_14: sbox_load_4 (100)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:304
:4  %sbox_load_4 = load i8* %sbox_addr_4, align 1

ST_14: k_addr_17 (101)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:304
:5  %k_addr_17 = getelementptr [32 x i8]* %k, i64 0, i64 16

ST_14: k_load_17 (102)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:304
:6  %k_load_17 = load i8* %k_addr_17, align 1

ST_14: tmp_38 (107)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:305
:11  %tmp_38 = zext i8 %k_load_18 to i64

ST_14: sbox_addr_5 (108)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:305
:12  %sbox_addr_5 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_38

ST_14: sbox_load_5 (109)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:305
:13  %sbox_load_5 = load i8* %sbox_addr_5, align 1

ST_14: k_addr_19 (110)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:305
:14  %k_addr_19 = getelementptr [32 x i8]* %k, i64 0, i64 17

ST_14: k_load_19 (111)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:305
:15  %k_load_19 = load i8* %k_addr_19, align 1

ST_14: k_load_20 (115)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:306
:19  %k_load_20 = load i8* %k_addr_20, align 1

ST_14: k_load_22 (124)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:307
:28  %k_load_22 = load i8* %k_addr_22, align 1


 <State 15>: 3.76ns
ST_15: sbox_load_4 (100)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:304
:4  %sbox_load_4 = load i8* %sbox_addr_4, align 1

ST_15: k_load_17 (102)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:304
:6  %k_load_17 = load i8* %k_addr_17, align 1

ST_15: tmp_37 (103)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:304
:7  %tmp_37 = xor i8 %k_load_17, %sbox_load_4

ST_15: sbox_load_5 (109)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:305
:13  %sbox_load_5 = load i8* %sbox_addr_5, align 1

ST_15: k_load_19 (111)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:305
:15  %k_load_19 = load i8* %k_addr_19, align 1

ST_15: tmp_39 (112)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:305
:16  %tmp_39 = xor i8 %k_load_19, %sbox_load_5

ST_15: tmp_40 (116)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:306
:20  %tmp_40 = zext i8 %k_load_20 to i64

ST_15: sbox_addr_6 (117)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:306
:21  %sbox_addr_6 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_40

ST_15: sbox_load_6 (118)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:306
:22  %sbox_load_6 = load i8* %sbox_addr_6, align 1

ST_15: k_addr_21 (119)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:306
:23  %k_addr_21 = getelementptr [32 x i8]* %k, i64 0, i64 18

ST_15: k_load_21 (120)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:306
:24  %k_load_21 = load i8* %k_addr_21, align 1

ST_15: tmp_42 (125)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:307
:29  %tmp_42 = zext i8 %k_load_22 to i64

ST_15: sbox_addr_7 (126)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:307
:30  %sbox_addr_7 = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %tmp_42

ST_15: sbox_load_7 (127)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:307
:31  %sbox_load_7 = load i8* %sbox_addr_7, align 1

ST_15: k_addr_23 (128)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:307
:32  %k_addr_23 = getelementptr [32 x i8]* %k, i64 0, i64 19

ST_15: k_load_23 (129)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:307
:33  %k_load_23 = load i8* %k_addr_23, align 1


 <State 16>: 3.76ns
ST_16: StgValue_171 (104)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:304
:8  store i8 %tmp_37, i8* %k_addr_17, align 1

ST_16: StgValue_172 (113)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:305
:17  store i8 %tmp_39, i8* %k_addr_19, align 1

ST_16: sbox_load_6 (118)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:306
:22  %sbox_load_6 = load i8* %sbox_addr_6, align 1

ST_16: k_load_21 (120)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:306
:24  %k_load_21 = load i8* %k_addr_21, align 1

ST_16: tmp_41 (121)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:306
:25  %tmp_41 = xor i8 %k_load_21, %sbox_load_6

ST_16: sbox_load_7 (127)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:307
:31  %sbox_load_7 = load i8* %sbox_addr_7, align 1

ST_16: k_load_23 (129)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:307
:33  %k_load_23 = load i8* %k_addr_23, align 1

ST_16: tmp_43 (130)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:307
:34  %tmp_43 = xor i8 %k_load_23, %sbox_load_7


 <State 17>: 2.39ns
ST_17: StgValue_179 (122)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:306
:26  store i8 %tmp_41, i8* %k_addr_21, align 1

ST_17: StgValue_180 (131)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:307
:35  store i8 %tmp_43, i8* %k_addr_23, align 1

ST_17: StgValue_181 (132)  [1/1] 1.57ns  loc: aes256cbc/src/aes256ecb.c:309
:36  br label %4


 <State 18>: 4.11ns
ST_18: i_1 (134)  [1/1] 0.00ns
:0  %i_1 = phi i6 [ 20, %3 ], [ %i_3, %5 ]

ST_18: tmp_68 (135)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:1  %tmp_68 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %i_1, i32 5)

ST_18: empty_5 (136)  [1/1] 0.00ns
:2  %empty_5 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)

ST_18: StgValue_185 (137)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:3  br i1 %tmp_68, label %6, label %5

ST_18: tmp_69 (139)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:0  %tmp_69 = trunc i6 %i_1 to i5

ST_18: tmp_44 (140)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:309
:1  %tmp_44 = add i5 -4, %tmp_69

ST_18: tmp_45 (141)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:2  %tmp_45 = zext i5 %tmp_44 to i64

ST_18: k_addr_24 (142)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:3  %k_addr_24 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_45

ST_18: k_load_24 (143)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:4  %k_load_24 = load i8* %k_addr_24, align 1

ST_18: tmp_46 (144)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:5  %tmp_46 = zext i6 %i_1 to i64

ST_18: k_addr_25 (145)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:6  %k_addr_25 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_46

ST_18: k_load_25 (146)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:7  %k_load_25 = load i8* %k_addr_25, align 1

ST_18: i_3 (179)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:309
:40  %i_3 = add i6 4, %i_1

ST_18: StgValue_195 (182)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:312
:0  ret i8 %y_20


 <State 19>: 4.11ns
ST_19: k_load_24 (143)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:4  %k_load_24 = load i8* %k_addr_24, align 1

ST_19: k_load_25 (146)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:7  %k_load_25 = load i8* %k_addr_25, align 1

ST_19: tmp_47 (147)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:309
:8  %tmp_47 = xor i8 %k_load_25, %k_load_24

ST_19: tmp_48 (149)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:309
:10  %tmp_48 = add i5 -3, %tmp_69

ST_19: tmp_49 (150)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:11  %tmp_49 = zext i5 %tmp_48 to i64

ST_19: k_addr_26 (151)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:12  %k_addr_26 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_49

ST_19: k_load_26 (152)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:13  %k_load_26 = load i8* %k_addr_26, align 1

ST_19: tmp_50 (153)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:14  %tmp_50 = or i5 %tmp_69, 1

ST_19: tmp_51 (154)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:15  %tmp_51 = zext i5 %tmp_50 to i64

ST_19: k_addr_27 (155)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:16  %k_addr_27 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_51

ST_19: k_load_27 (156)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:17  %k_load_27 = load i8* %k_addr_27, align 1


 <State 20>: 4.11ns
ST_20: k_load_26 (152)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:13  %k_load_26 = load i8* %k_addr_26, align 1

ST_20: k_load_27 (156)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:17  %k_load_27 = load i8* %k_addr_27, align 1

ST_20: tmp_52 (157)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:309
:18  %tmp_52 = xor i8 %k_load_27, %k_load_26

ST_20: tmp_53 (159)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:309
:20  %tmp_53 = add i5 -2, %tmp_69

ST_20: tmp_54 (160)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:21  %tmp_54 = zext i5 %tmp_53 to i64

ST_20: k_addr_28 (161)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:22  %k_addr_28 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_54

ST_20: k_load_28 (162)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:23  %k_load_28 = load i8* %k_addr_28, align 1

ST_20: tmp_55 (163)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:24  %tmp_55 = or i5 %tmp_69, 2

ST_20: tmp_56 (164)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:25  %tmp_56 = zext i5 %tmp_55 to i64

ST_20: k_addr_29 (165)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:26  %k_addr_29 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_56

ST_20: k_load_29 (166)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:27  %k_load_29 = load i8* %k_addr_29, align 1


 <State 21>: 4.11ns
ST_21: k_load_28 (162)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:23  %k_load_28 = load i8* %k_addr_28, align 1

ST_21: k_load_29 (166)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:27  %k_load_29 = load i8* %k_addr_29, align 1

ST_21: tmp_57 (167)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:309
:28  %tmp_57 = xor i8 %k_load_29, %k_load_28

ST_21: tmp_58 (169)  [1/1] 1.72ns  loc: aes256cbc/src/aes256ecb.c:309
:30  %tmp_58 = add i5 -1, %tmp_69

ST_21: tmp_59 (170)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:31  %tmp_59 = zext i5 %tmp_58 to i64

ST_21: k_addr_30 (171)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:32  %k_addr_30 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_59

ST_21: k_load_30 (172)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:33  %k_load_30 = load i8* %k_addr_30, align 1

ST_21: tmp_60 (173)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:34  %tmp_60 = or i5 %tmp_69, 3

ST_21: tmp_61 (174)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:35  %tmp_61 = zext i5 %tmp_60 to i64

ST_21: k_addr_31 (175)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:36  %k_addr_31 = getelementptr [32 x i8]* %k, i64 0, i64 %tmp_61

ST_21: k_load_31 (176)  [2/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:37  %k_load_31 = load i8* %k_addr_31, align 1


 <State 22>: 3.76ns
ST_22: StgValue_229 (148)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:9  store i8 %tmp_47, i8* %k_addr_25, align 1

ST_22: StgValue_230 (158)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:19  store i8 %tmp_52, i8* %k_addr_27, align 1

ST_22: k_load_30 (172)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:33  %k_load_30 = load i8* %k_addr_30, align 1

ST_22: k_load_31 (176)  [1/2] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:37  %k_load_31 = load i8* %k_addr_31, align 1

ST_22: tmp_62 (177)  [1/1] 1.37ns  loc: aes256cbc/src/aes256ecb.c:309
:38  %tmp_62 = xor i8 %k_load_31, %k_load_30


 <State 23>: 2.39ns
ST_23: StgValue_234 (168)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:29  store i8 %tmp_57, i8* %k_addr_29, align 1

ST_23: StgValue_235 (178)  [1/1] 2.39ns  loc: aes256cbc/src/aes256ecb.c:309
:39  store i8 %tmp_62, i8* %k_addr_31, align 1

ST_23: StgValue_236 (180)  [1/1] 0.00ns  loc: aes256cbc/src/aes256ecb.c:309
:41  br label %4



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8ns, clock uncertainty: 1ns.

 <State 1>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('k_addr_1', aes256cbc/src/aes256ecb.c:296) [6]  (0 ns)
	'load' operation ('k_load', aes256cbc/src/aes256ecb.c:296) on array 'k' [7]  (2.39 ns)

 <State 2>: 2.39ns
The critical path consists of the following:
	'load' operation ('k_load', aes256cbc/src/aes256ecb.c:296) on array 'k' [7]  (2.39 ns)

 <State 3>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('k_addr') [5]  (0 ns)
	'load' operation ('k_load_1', aes256cbc/src/aes256ecb.c:296) on array 'k' [11]  (2.39 ns)

 <State 4>: 3.76ns
The critical path consists of the following:
	'load' operation ('sbox_load_1', aes256cbc/src/aes256ecb.c:297) on array 'sbox' [19]  (2.39 ns)
	'xor' operation ('tmp_12', aes256cbc/src/aes256ecb.c:297) [22]  (1.37 ns)

 <State 5>: 6.15ns
The critical path consists of the following:
	'load' operation ('sbox_load', aes256cbc/src/aes256ecb.c:296) on array 'sbox' [10]  (2.39 ns)
	'xor' operation ('tmp_s', aes256cbc/src/aes256ecb.c:296) [13]  (1.37 ns)
	'store' operation (aes256cbc/src/aes256ecb.c:296) of variable 'tmp_s', aes256cbc/src/aes256ecb.c:296 on array 'k' [14]  (2.39 ns)

 <State 6>: 2.39ns
The critical path consists of the following:
	'store' operation (aes256cbc/src/aes256ecb.c:298) of variable 'tmp_14', aes256cbc/src/aes256ecb.c:298 on array 'k' [32]  (2.39 ns)

 <State 7>: 3.19ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', aes256cbc/src/aes256ecb.c:302) [48]  (0 ns)
	'add' operation ('tmp_18', aes256cbc/src/aes256ecb.c:302) [54]  (0.8 ns)
	'getelementptr' operation ('k_addr_8', aes256cbc/src/aes256ecb.c:302) [56]  (0 ns)
	'load' operation ('k_load_8', aes256cbc/src/aes256ecb.c:302) on array 'k' [57]  (2.39 ns)

 <State 8>: 3.76ns
The critical path consists of the following:
	'load' operation ('k_load_8', aes256cbc/src/aes256ecb.c:302) on array 'k' [57]  (2.39 ns)
	'xor' operation ('tmp_21', aes256cbc/src/aes256ecb.c:302) [61]  (1.37 ns)

 <State 9>: 3.76ns
The critical path consists of the following:
	'load' operation ('k_load_10', aes256cbc/src/aes256ecb.c:302) on array 'k' [66]  (2.39 ns)
	'xor' operation ('tmp_26', aes256cbc/src/aes256ecb.c:302) [71]  (1.37 ns)

 <State 10>: 3.76ns
The critical path consists of the following:
	'load' operation ('k_load_12', aes256cbc/src/aes256ecb.c:302) on array 'k' [76]  (2.39 ns)
	'xor' operation ('tmp_31', aes256cbc/src/aes256ecb.c:302) [81]  (1.37 ns)

 <State 11>: 3.76ns
The critical path consists of the following:
	'load' operation ('k_load_14', aes256cbc/src/aes256ecb.c:302) on array 'k' [86]  (2.39 ns)
	'xor' operation ('tmp_36', aes256cbc/src/aes256ecb.c:302) [91]  (1.37 ns)

 <State 12>: 2.39ns
The critical path consists of the following:
	'store' operation (aes256cbc/src/aes256ecb.c:302) of variable 'tmp_31', aes256cbc/src/aes256ecb.c:302 on array 'k' [82]  (2.39 ns)

 <State 13>: 2.39ns
The critical path consists of the following:
	'load' operation ('k_load_16', aes256cbc/src/aes256ecb.c:304) on array 'k' [97]  (2.39 ns)

 <State 14>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('sbox_addr_4', aes256cbc/src/aes256ecb.c:304) [99]  (0 ns)
	'load' operation ('sbox_load_4', aes256cbc/src/aes256ecb.c:304) on array 'sbox' [100]  (2.39 ns)

 <State 15>: 3.76ns
The critical path consists of the following:
	'load' operation ('sbox_load_4', aes256cbc/src/aes256ecb.c:304) on array 'sbox' [100]  (2.39 ns)
	'xor' operation ('tmp_37', aes256cbc/src/aes256ecb.c:304) [103]  (1.37 ns)

 <State 16>: 3.76ns
The critical path consists of the following:
	'load' operation ('sbox_load_6', aes256cbc/src/aes256ecb.c:306) on array 'sbox' [118]  (2.39 ns)
	'xor' operation ('tmp_41', aes256cbc/src/aes256ecb.c:306) [121]  (1.37 ns)

 <State 17>: 2.39ns
The critical path consists of the following:
	'store' operation (aes256cbc/src/aes256ecb.c:306) of variable 'tmp_41', aes256cbc/src/aes256ecb.c:306 on array 'k' [122]  (2.39 ns)

 <State 18>: 4.11ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', aes256cbc/src/aes256ecb.c:309) [134]  (0 ns)
	'add' operation ('tmp_44', aes256cbc/src/aes256ecb.c:309) [140]  (1.72 ns)
	'getelementptr' operation ('k_addr_24', aes256cbc/src/aes256ecb.c:309) [142]  (0 ns)
	'load' operation ('k_load_24', aes256cbc/src/aes256ecb.c:309) on array 'k' [143]  (2.39 ns)

 <State 19>: 4.11ns
The critical path consists of the following:
	'add' operation ('tmp_48', aes256cbc/src/aes256ecb.c:309) [149]  (1.72 ns)
	'getelementptr' operation ('k_addr_26', aes256cbc/src/aes256ecb.c:309) [151]  (0 ns)
	'load' operation ('k_load_26', aes256cbc/src/aes256ecb.c:309) on array 'k' [152]  (2.39 ns)

 <State 20>: 4.11ns
The critical path consists of the following:
	'add' operation ('tmp_53', aes256cbc/src/aes256ecb.c:309) [159]  (1.72 ns)
	'getelementptr' operation ('k_addr_28', aes256cbc/src/aes256ecb.c:309) [161]  (0 ns)
	'load' operation ('k_load_28', aes256cbc/src/aes256ecb.c:309) on array 'k' [162]  (2.39 ns)

 <State 21>: 4.11ns
The critical path consists of the following:
	'add' operation ('tmp_58', aes256cbc/src/aes256ecb.c:309) [169]  (1.72 ns)
	'getelementptr' operation ('k_addr_30', aes256cbc/src/aes256ecb.c:309) [171]  (0 ns)
	'load' operation ('k_load_30', aes256cbc/src/aes256ecb.c:309) on array 'k' [172]  (2.39 ns)

 <State 22>: 3.76ns
The critical path consists of the following:
	'load' operation ('k_load_30', aes256cbc/src/aes256ecb.c:309) on array 'k' [172]  (2.39 ns)
	'xor' operation ('tmp_62', aes256cbc/src/aes256ecb.c:309) [177]  (1.37 ns)

 <State 23>: 2.39ns
The critical path consists of the following:
	'store' operation (aes256cbc/src/aes256ecb.c:309) of variable 'tmp_57', aes256cbc/src/aes256ecb.c:309 on array 'k' [168]  (2.39 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
