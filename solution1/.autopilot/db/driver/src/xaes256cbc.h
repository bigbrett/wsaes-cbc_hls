// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XAES256CBC_H
#define XAES256CBC_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xaes256cbc_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XAes256cbc_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XAes256cbc;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XAes256cbc_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XAes256cbc_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XAes256cbc_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XAes256cbc_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XAes256cbc_Initialize(XAes256cbc *InstancePtr, u16 DeviceId);
XAes256cbc_Config* XAes256cbc_LookupConfig(u16 DeviceId);
int XAes256cbc_CfgInitialize(XAes256cbc *InstancePtr, XAes256cbc_Config *ConfigPtr);
#else
int XAes256cbc_Initialize(XAes256cbc *InstancePtr, const char* InstanceName);
int XAes256cbc_Release(XAes256cbc *InstancePtr);
#endif

void XAes256cbc_Start(XAes256cbc *InstancePtr);
u32 XAes256cbc_IsDone(XAes256cbc *InstancePtr);
u32 XAes256cbc_IsIdle(XAes256cbc *InstancePtr);
u32 XAes256cbc_IsReady(XAes256cbc *InstancePtr);
void XAes256cbc_EnableAutoRestart(XAes256cbc *InstancePtr);
void XAes256cbc_DisableAutoRestart(XAes256cbc *InstancePtr);

void XAes256cbc_Set_mode(XAes256cbc *InstancePtr, u32 Data);
u32 XAes256cbc_Get_mode(XAes256cbc *InstancePtr);
void XAes256cbc_Set_inbuf_addr(XAes256cbc *InstancePtr, u32 Data);
u32 XAes256cbc_Get_inbuf_addr(XAes256cbc *InstancePtr);
void XAes256cbc_Set_outbuf_addr(XAes256cbc *InstancePtr, u32 Data);
u32 XAes256cbc_Get_outbuf_addr(XAes256cbc *InstancePtr);
u32 XAes256cbc_Get_memptr_BaseAddress(XAes256cbc *InstancePtr);
u32 XAes256cbc_Get_memptr_HighAddress(XAes256cbc *InstancePtr);
u32 XAes256cbc_Get_memptr_TotalBytes(XAes256cbc *InstancePtr);
u32 XAes256cbc_Get_memptr_BitWidth(XAes256cbc *InstancePtr);
u32 XAes256cbc_Get_memptr_Depth(XAes256cbc *InstancePtr);
u32 XAes256cbc_Write_memptr_Words(XAes256cbc *InstancePtr, int offset, int *data, int length);
u32 XAes256cbc_Read_memptr_Words(XAes256cbc *InstancePtr, int offset, int *data, int length);
u32 XAes256cbc_Write_memptr_Bytes(XAes256cbc *InstancePtr, int offset, char *data, int length);
u32 XAes256cbc_Read_memptr_Bytes(XAes256cbc *InstancePtr, int offset, char *data, int length);

void XAes256cbc_InterruptGlobalEnable(XAes256cbc *InstancePtr);
void XAes256cbc_InterruptGlobalDisable(XAes256cbc *InstancePtr);
void XAes256cbc_InterruptEnable(XAes256cbc *InstancePtr, u32 Mask);
void XAes256cbc_InterruptDisable(XAes256cbc *InstancePtr, u32 Mask);
void XAes256cbc_InterruptClear(XAes256cbc *InstancePtr, u32 Mask);
u32 XAes256cbc_InterruptGetEnabled(XAes256cbc *InstancePtr);
u32 XAes256cbc_InterruptGetStatus(XAes256cbc *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
