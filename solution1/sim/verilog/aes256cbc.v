// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes256cbc,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.500000,HLS_SYN_LAT=823,HLS_SYN_TPT=none,HLS_SYN_MEM=13,HLS_SYN_DSP=0,HLS_SYN_FF=1714,HLS_SYN_LUT=2811}" *)

module aes256cbc (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 31'b1;
parameter    ap_ST_fsm_state2 = 31'b10;
parameter    ap_ST_fsm_state3 = 31'b100;
parameter    ap_ST_fsm_state4 = 31'b1000;
parameter    ap_ST_fsm_state5 = 31'b10000;
parameter    ap_ST_fsm_state6 = 31'b100000;
parameter    ap_ST_fsm_state7 = 31'b1000000;
parameter    ap_ST_fsm_state8 = 31'b10000000;
parameter    ap_ST_fsm_state9 = 31'b100000000;
parameter    ap_ST_fsm_state10 = 31'b1000000000;
parameter    ap_ST_fsm_state11 = 31'b10000000000;
parameter    ap_ST_fsm_state12 = 31'b100000000000;
parameter    ap_ST_fsm_state13 = 31'b1000000000000;
parameter    ap_ST_fsm_state14 = 31'b10000000000000;
parameter    ap_ST_fsm_state15 = 31'b100000000000000;
parameter    ap_ST_fsm_state16 = 31'b1000000000000000;
parameter    ap_ST_fsm_state17 = 31'b10000000000000000;
parameter    ap_ST_fsm_state18 = 31'b100000000000000000;
parameter    ap_ST_fsm_state19 = 31'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 31'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 31'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 31'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 31'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 31'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 31'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 31'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 31'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 31'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 31'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 31'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 31'b1000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
reg   [5:0] memptr_address0;
reg    memptr_ce0;
reg    memptr_we0;
wire   [7:0] memptr_q0;
wire   [2:0] mode;
wire   [31:0] inbuf_addr;
wire   [31:0] outbuf_addr;
reg   [3:0] iv_address0;
reg    iv_ce0;
reg    iv_we0;
wire   [7:0] iv_q0;
reg   [3:0] xorv_address0;
reg    xorv_ce0;
reg    xorv_we0;
reg   [7:0] xorv_d0;
wire   [7:0] xorv_q0;
reg   [4:0] key_address0;
reg    key_ce0;
reg    key_we0;
wire   [7:0] key_q0;
reg   [4:0] ctx_deckey_address0;
reg    ctx_deckey_ce0;
reg    ctx_deckey_we0;
reg   [7:0] ctx_deckey_d0;
wire   [7:0] ctx_deckey_q0;
reg   [4:0] ctx_deckey_address1;
reg    ctx_deckey_ce1;
reg    ctx_deckey_we1;
wire   [7:0] ctx_deckey_q1;
reg   [4:0] ctx_enckey_address0;
reg    ctx_enckey_ce0;
reg    ctx_enckey_we0;
wire   [7:0] ctx_enckey_q0;
reg    ctx_enckey_ce1;
wire   [7:0] ctx_enckey_q1;
reg   [4:0] ctx_key_address0;
reg    ctx_key_ce0;
reg    ctx_key_we0;
reg   [7:0] ctx_key_d0;
wire   [7:0] ctx_key_q0;
reg   [4:0] ctx_key_address1;
reg    ctx_key_ce1;
reg    ctx_key_we1;
reg   [7:0] ctx_key_d1;
wire   [7:0] ctx_key_q1;
reg   [3:0] lastbuf_address0;
reg    lastbuf_ce0;
reg    lastbuf_we0;
wire   [7:0] lastbuf_q0;
reg   [31:0] outbuf_addr_read_reg_920;
wire   [2:0] mode_read_read_fu_114_p2;
reg   [2:0] mode_read_reg_926;
wire   [7:0] tmp_95_fu_581_p1;
reg   [7:0] tmp_95_reg_930;
wire   [7:0] tmp_94_fu_585_p1;
reg   [7:0] tmp_94_reg_935;
wire   [7:0] tmp_93_fu_589_p1;
reg   [7:0] tmp_93_reg_940;
wire   [7:0] tmp_fu_593_p1;
reg   [7:0] tmp_reg_945;
wire   [5:0] i_15_fu_603_p2;
reg   [5:0] i_15_reg_953;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_124_fu_597_p2;
wire   [4:0] i_14_fu_634_p2;
reg   [4:0] i_14_reg_966;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] tmp_123_fu_628_p2;
wire   [4:0] i_13_fu_665_p2;
reg   [4:0] i_13_reg_979;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] tmp_122_fu_659_p2;
wire   [4:0] i_17_fu_696_p2;
reg   [4:0] i_17_reg_992;
wire   [0:0] ap_CS_fsm_state8;
wire   [63:0] tmp_134_fu_702_p1;
reg   [63:0] tmp_134_reg_997;
wire   [0:0] tmp_131_fu_690_p2;
wire   [4:0] i_19_fu_713_p2;
reg   [4:0] i_19_reg_1010;
wire   [0:0] ap_CS_fsm_state11;
reg   [3:0] buf_addr_8_reg_1015;
wire   [0:0] tmp_136_fu_707_p2;
wire   [4:0] i_21_fu_731_p2;
reg   [4:0] i_21_reg_1028;
wire   [0:0] ap_CS_fsm_state13;
wire   [63:0] tmp_143_fu_737_p1;
reg   [63:0] tmp_143_reg_1033;
wire   [0:0] tmp_141_fu_725_p2;
wire   [7:0] tmp_97_fu_742_p1;
reg   [7:0] tmp_97_reg_1043;
wire   [4:0] i_22_fu_751_p2;
reg   [4:0] i_22_reg_1051;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] tmp_144_fu_745_p2;
wire   [7:0] sum6_fu_766_p2;
reg   [7:0] sum6_reg_1061;
wire   [4:0] i_12_fu_781_p2;
reg   [4:0] i_12_reg_1069;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] tmp_121_fu_775_p2;
wire   [4:0] i_16_fu_812_p2;
reg   [4:0] i_16_reg_1082;
wire   [0:0] ap_CS_fsm_state19;
reg   [3:0] buf_addr_5_reg_1087;
wire   [0:0] tmp_130_fu_806_p2;
wire   [4:0] i_18_fu_830_p2;
reg   [4:0] i_18_reg_1100;
wire   [0:0] ap_CS_fsm_state22;
wire   [63:0] tmp_137_fu_836_p1;
reg   [63:0] tmp_137_reg_1105;
wire   [0:0] tmp_135_fu_824_p2;
wire   [7:0] tmp_96_fu_841_p1;
reg   [7:0] tmp_96_reg_1115;
wire   [4:0] i_20_fu_850_p2;
reg   [4:0] i_20_reg_1123;
wire   [0:0] ap_CS_fsm_state24;
wire   [0:0] tmp_140_fu_844_p2;
wire   [7:0] sum2_fu_865_p2;
reg   [7:0] sum2_reg_1133;
wire   [4:0] i_11_fu_880_p2;
reg   [4:0] i_11_reg_1141;
wire   [0:0] ap_CS_fsm_state26;
wire   [63:0] tmp_125_fu_886_p1;
reg   [63:0] tmp_125_reg_1146;
wire   [0:0] tmp_s_fu_874_p2;
wire   [5:0] i_23_fu_897_p2;
reg   [5:0] i_23_reg_1159;
wire   [0:0] ap_CS_fsm_state28;
wire   [63:0] tmp_i_9_fu_903_p1;
reg   [63:0] tmp_i_9_reg_1164;
wire   [0:0] tmp_i_fu_891_p2;
wire   [2:0] phitmp_i_fu_914_p2;
reg   [2:0] phitmp_i_reg_1178;
wire   [0:0] ap_CS_fsm_state30;
wire   [0:0] tmp_212_i_fu_908_p2;
wire   [7:0] grp_aes_expandEncKey_fu_564_ap_return;
wire   [0:0] ap_CS_fsm_state31;
wire    grp_aes_expandEncKey_fu_564_ap_done;
reg   [3:0] buf_address0;
reg    buf_ce0;
reg    buf_we0;
reg   [7:0] buf_d0;
wire   [7:0] buf_q0;
reg   [3:0] buf_address1;
reg    buf_ce1;
reg    buf_we1;
reg   [7:0] buf_d1;
wire   [7:0] buf_q1;
wire    grp_aes256_encrypt_ecb_fu_540_ap_start;
wire    grp_aes256_encrypt_ecb_fu_540_ap_done;
wire    grp_aes256_encrypt_ecb_fu_540_ap_idle;
wire    grp_aes256_encrypt_ecb_fu_540_ap_ready;
wire   [3:0] grp_aes256_encrypt_ecb_fu_540_buf_r_address0;
wire    grp_aes256_encrypt_ecb_fu_540_buf_r_ce0;
wire    grp_aes256_encrypt_ecb_fu_540_buf_r_we0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_540_buf_r_d0;
wire   [3:0] grp_aes256_encrypt_ecb_fu_540_buf_r_address1;
wire    grp_aes256_encrypt_ecb_fu_540_buf_r_ce1;
wire    grp_aes256_encrypt_ecb_fu_540_buf_r_we1;
wire   [7:0] grp_aes256_encrypt_ecb_fu_540_buf_r_d1;
wire   [4:0] grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address0;
wire    grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce0;
wire   [4:0] grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address1;
wire    grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce1;
wire   [4:0] grp_aes256_encrypt_ecb_fu_540_ctx_key_address0;
wire    grp_aes256_encrypt_ecb_fu_540_ctx_key_ce0;
wire    grp_aes256_encrypt_ecb_fu_540_ctx_key_we0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_540_ctx_key_d0;
wire   [4:0] grp_aes256_encrypt_ecb_fu_540_ctx_key_address1;
wire    grp_aes256_encrypt_ecb_fu_540_ctx_key_ce1;
wire    grp_aes256_encrypt_ecb_fu_540_ctx_key_we1;
wire   [7:0] grp_aes256_encrypt_ecb_fu_540_ctx_key_d1;
wire    grp_aes256_decrypt_ecb_fu_551_ap_start;
wire    grp_aes256_decrypt_ecb_fu_551_ap_done;
wire    grp_aes256_decrypt_ecb_fu_551_ap_idle;
wire    grp_aes256_decrypt_ecb_fu_551_ap_ready;
wire   [3:0] grp_aes256_decrypt_ecb_fu_551_buf_r_address0;
wire    grp_aes256_decrypt_ecb_fu_551_buf_r_ce0;
wire    grp_aes256_decrypt_ecb_fu_551_buf_r_we0;
wire   [7:0] grp_aes256_decrypt_ecb_fu_551_buf_r_d0;
wire   [3:0] grp_aes256_decrypt_ecb_fu_551_buf_r_address1;
wire    grp_aes256_decrypt_ecb_fu_551_buf_r_ce1;
wire    grp_aes256_decrypt_ecb_fu_551_buf_r_we1;
wire   [7:0] grp_aes256_decrypt_ecb_fu_551_buf_r_d1;
wire   [4:0] grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address0;
wire    grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce0;
wire   [4:0] grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address1;
wire    grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce1;
wire   [4:0] grp_aes256_decrypt_ecb_fu_551_ctx_key_address0;
wire    grp_aes256_decrypt_ecb_fu_551_ctx_key_ce0;
wire    grp_aes256_decrypt_ecb_fu_551_ctx_key_we0;
wire   [7:0] grp_aes256_decrypt_ecb_fu_551_ctx_key_d0;
wire   [4:0] grp_aes256_decrypt_ecb_fu_551_ctx_key_address1;
wire    grp_aes256_decrypt_ecb_fu_551_ctx_key_ce1;
wire    grp_aes256_decrypt_ecb_fu_551_ctx_key_we1;
wire   [7:0] grp_aes256_decrypt_ecb_fu_551_ctx_key_d1;
wire    grp_aes_expandEncKey_fu_564_ap_start;
wire    grp_aes_expandEncKey_fu_564_ap_idle;
wire    grp_aes_expandEncKey_fu_564_ap_ready;
wire   [4:0] grp_aes_expandEncKey_fu_564_k_address0;
wire    grp_aes_expandEncKey_fu_564_k_ce0;
wire    grp_aes_expandEncKey_fu_564_k_we0;
wire   [7:0] grp_aes_expandEncKey_fu_564_k_d0;
wire   [4:0] grp_aes_expandEncKey_fu_564_k_address1;
wire    grp_aes_expandEncKey_fu_564_k_ce1;
wire    grp_aes_expandEncKey_fu_564_k_we1;
wire   [7:0] grp_aes_expandEncKey_fu_564_k_d1;
reg   [5:0] i_10_reg_370;
wire   [0:0] ap_CS_fsm_state3;
reg   [4:0] i_s_reg_382;
wire   [0:0] ap_CS_fsm_state5;
reg   [4:0] i_5_reg_394;
wire   [0:0] ap_CS_fsm_state7;
reg   [4:0] i_6_reg_406;
wire   [0:0] ap_CS_fsm_state9;
reg   [4:0] i_7_reg_417;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state12;
reg   [4:0] i_8_reg_428;
wire   [0:0] ap_CS_fsm_state14;
reg   [4:0] i_9_reg_439;
wire   [0:0] ap_CS_fsm_state16;
reg   [4:0] i_1_reg_450;
wire   [0:0] ap_CS_fsm_state18;
reg   [4:0] i_2_reg_462;
wire   [0:0] ap_CS_fsm_state20;
reg   [4:0] i_3_reg_473;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] ap_CS_fsm_state23;
reg   [4:0] i_4_reg_484;
wire   [0:0] ap_CS_fsm_state25;
reg   [4:0] i_reg_495;
wire   [0:0] ap_CS_fsm_state27;
reg   [5:0] i_i_reg_506;
wire   [0:0] ap_CS_fsm_state29;
reg   [7:0] rcon_i_reg_517;
reg   [2:0] i_24_reg_529;
reg    ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start;
reg    ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start;
reg    ap_reg_grp_aes_expandEncKey_fu_564_ap_start;
wire   [63:0] sum1_cast_fu_618_p1;
wire   [63:0] tmp_129_fu_623_p1;
wire   [63:0] sum8_cast_fu_649_p1;
wire   [63:0] tmp_128_fu_654_p1;
wire   [63:0] sum4_cast_fu_680_p1;
wire   [63:0] tmp_127_fu_685_p1;
wire   [63:0] tmp_138_fu_719_p1;
wire   [63:0] tmp_145_fu_757_p1;
wire   [63:0] sum6_cast_fu_771_p1;
wire   [63:0] sum_cast_fu_796_p1;
wire   [63:0] tmp_126_fu_801_p1;
wire   [63:0] tmp_132_fu_818_p1;
wire   [63:0] tmp_142_fu_856_p1;
wire   [63:0] sum2_cast_fu_870_p1;
wire   [7:0] grp_fu_574_p2;
wire   [7:0] tmp_156_cast_fu_609_p1;
wire   [7:0] sum1_fu_613_p2;
wire   [7:0] tmp_155_cast_fu_640_p1;
wire   [7:0] sum8_fu_644_p2;
wire   [7:0] tmp_154_cast_fu_671_p1;
wire   [7:0] sum4_fu_675_p2;
wire   [7:0] tmp_174_cast_fu_762_p1;
wire   [7:0] tmp_153_cast_fu_787_p1;
wire   [7:0] sum_fu_791_p2;
wire   [7:0] tmp_170_cast_fu_861_p1;
reg   [30:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'b1;
#0 ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start = 1'b0;
#0 ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start = 1'b0;
#0 ap_reg_grp_aes_expandEncKey_fu_564_ap_start = 1'b0;
end

aes256cbc_iv #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
iv_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(iv_address0),
    .ce0(iv_ce0),
    .we0(iv_we0),
    .d0(memptr_q0),
    .q0(iv_q0)
);

aes256cbc_iv #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
xorv_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xorv_address0),
    .ce0(xorv_ce0),
    .we0(xorv_we0),
    .d0(xorv_d0),
    .q0(xorv_q0)
);

aes256cbc_key #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
key_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(key_address0),
    .ce0(key_ce0),
    .we0(key_we0),
    .d0(memptr_q0),
    .q0(key_q0)
);

aes256cbc_ctx_decfYi #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ctx_deckey_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_deckey_address0),
    .ce0(ctx_deckey_ce0),
    .we0(ctx_deckey_we0),
    .d0(ctx_deckey_d0),
    .q0(ctx_deckey_q0),
    .address1(ctx_deckey_address1),
    .ce1(ctx_deckey_ce1),
    .we1(ctx_deckey_we1),
    .d1(grp_aes_expandEncKey_fu_564_k_d1),
    .q1(ctx_deckey_q1)
);

aes256cbc_ctx_encg8j #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ctx_enckey_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_enckey_address0),
    .ce0(ctx_enckey_ce0),
    .we0(ctx_enckey_we0),
    .d0(key_q0),
    .q0(ctx_enckey_q0),
    .address1(grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address1),
    .ce1(ctx_enckey_ce1),
    .q1(ctx_enckey_q1)
);

aes256cbc_ctx_decfYi #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ctx_key_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_key_address0),
    .ce0(ctx_key_ce0),
    .we0(ctx_key_we0),
    .d0(ctx_key_d0),
    .q0(ctx_key_q0),
    .address1(ctx_key_address1),
    .ce1(ctx_key_ce1),
    .we1(ctx_key_we1),
    .d1(ctx_key_d1),
    .q1(ctx_key_q1)
);

aes256cbc_iv #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
lastbuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lastbuf_address0),
    .ce0(lastbuf_ce0),
    .we0(lastbuf_we0),
    .d0(buf_q0),
    .q0(lastbuf_q0)
);

aes256cbc_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
aes256cbc_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .memptr_address0(memptr_address0),
    .memptr_ce0(memptr_ce0),
    .memptr_we0(memptr_we0),
    .memptr_d0(buf_q0),
    .memptr_q0(memptr_q0),
    .mode(mode),
    .inbuf_addr(inbuf_addr),
    .outbuf_addr(outbuf_addr)
);

aes256cbc_buf #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .we0(buf_we0),
    .d0(buf_d0),
    .q0(buf_q0),
    .address1(buf_address1),
    .ce1(buf_ce1),
    .we1(buf_we1),
    .d1(buf_d1),
    .q1(buf_q1)
);

aes256_encrypt_ecb grp_aes256_encrypt_ecb_fu_540(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes256_encrypt_ecb_fu_540_ap_start),
    .ap_done(grp_aes256_encrypt_ecb_fu_540_ap_done),
    .ap_idle(grp_aes256_encrypt_ecb_fu_540_ap_idle),
    .ap_ready(grp_aes256_encrypt_ecb_fu_540_ap_ready),
    .buf_r_address0(grp_aes256_encrypt_ecb_fu_540_buf_r_address0),
    .buf_r_ce0(grp_aes256_encrypt_ecb_fu_540_buf_r_ce0),
    .buf_r_we0(grp_aes256_encrypt_ecb_fu_540_buf_r_we0),
    .buf_r_d0(grp_aes256_encrypt_ecb_fu_540_buf_r_d0),
    .buf_r_q0(buf_q0),
    .buf_r_address1(grp_aes256_encrypt_ecb_fu_540_buf_r_address1),
    .buf_r_ce1(grp_aes256_encrypt_ecb_fu_540_buf_r_ce1),
    .buf_r_we1(grp_aes256_encrypt_ecb_fu_540_buf_r_we1),
    .buf_r_d1(grp_aes256_encrypt_ecb_fu_540_buf_r_d1),
    .buf_r_q1(buf_q1),
    .ctx_enckey_address0(grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address0),
    .ctx_enckey_ce0(grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce0),
    .ctx_enckey_q0(ctx_enckey_q0),
    .ctx_enckey_address1(grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address1),
    .ctx_enckey_ce1(grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce1),
    .ctx_enckey_q1(ctx_enckey_q1),
    .ctx_key_address0(grp_aes256_encrypt_ecb_fu_540_ctx_key_address0),
    .ctx_key_ce0(grp_aes256_encrypt_ecb_fu_540_ctx_key_ce0),
    .ctx_key_we0(grp_aes256_encrypt_ecb_fu_540_ctx_key_we0),
    .ctx_key_d0(grp_aes256_encrypt_ecb_fu_540_ctx_key_d0),
    .ctx_key_q0(ctx_key_q0),
    .ctx_key_address1(grp_aes256_encrypt_ecb_fu_540_ctx_key_address1),
    .ctx_key_ce1(grp_aes256_encrypt_ecb_fu_540_ctx_key_ce1),
    .ctx_key_we1(grp_aes256_encrypt_ecb_fu_540_ctx_key_we1),
    .ctx_key_d1(grp_aes256_encrypt_ecb_fu_540_ctx_key_d1),
    .ctx_key_q1(ctx_key_q1)
);

aes256_decrypt_ecb grp_aes256_decrypt_ecb_fu_551(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes256_decrypt_ecb_fu_551_ap_start),
    .ap_done(grp_aes256_decrypt_ecb_fu_551_ap_done),
    .ap_idle(grp_aes256_decrypt_ecb_fu_551_ap_idle),
    .ap_ready(grp_aes256_decrypt_ecb_fu_551_ap_ready),
    .buf_r_address0(grp_aes256_decrypt_ecb_fu_551_buf_r_address0),
    .buf_r_ce0(grp_aes256_decrypt_ecb_fu_551_buf_r_ce0),
    .buf_r_we0(grp_aes256_decrypt_ecb_fu_551_buf_r_we0),
    .buf_r_d0(grp_aes256_decrypt_ecb_fu_551_buf_r_d0),
    .buf_r_q0(buf_q0),
    .buf_r_address1(grp_aes256_decrypt_ecb_fu_551_buf_r_address1),
    .buf_r_ce1(grp_aes256_decrypt_ecb_fu_551_buf_r_ce1),
    .buf_r_we1(grp_aes256_decrypt_ecb_fu_551_buf_r_we1),
    .buf_r_d1(grp_aes256_decrypt_ecb_fu_551_buf_r_d1),
    .buf_r_q1(buf_q1),
    .ctx_deckey_address0(grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address0),
    .ctx_deckey_ce0(grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce0),
    .ctx_deckey_q0(ctx_deckey_q0),
    .ctx_deckey_address1(grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address1),
    .ctx_deckey_ce1(grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce1),
    .ctx_deckey_q1(ctx_deckey_q1),
    .ctx_key_address0(grp_aes256_decrypt_ecb_fu_551_ctx_key_address0),
    .ctx_key_ce0(grp_aes256_decrypt_ecb_fu_551_ctx_key_ce0),
    .ctx_key_we0(grp_aes256_decrypt_ecb_fu_551_ctx_key_we0),
    .ctx_key_d0(grp_aes256_decrypt_ecb_fu_551_ctx_key_d0),
    .ctx_key_q0(ctx_key_q0),
    .ctx_key_address1(grp_aes256_decrypt_ecb_fu_551_ctx_key_address1),
    .ctx_key_ce1(grp_aes256_decrypt_ecb_fu_551_ctx_key_ce1),
    .ctx_key_we1(grp_aes256_decrypt_ecb_fu_551_ctx_key_we1),
    .ctx_key_d1(grp_aes256_decrypt_ecb_fu_551_ctx_key_d1),
    .ctx_key_q1(ctx_key_q1)
);

aes_expandEncKey grp_aes_expandEncKey_fu_564(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_expandEncKey_fu_564_ap_start),
    .ap_done(grp_aes_expandEncKey_fu_564_ap_done),
    .ap_idle(grp_aes_expandEncKey_fu_564_ap_idle),
    .ap_ready(grp_aes_expandEncKey_fu_564_ap_ready),
    .k_address0(grp_aes_expandEncKey_fu_564_k_address0),
    .k_ce0(grp_aes_expandEncKey_fu_564_k_ce0),
    .k_we0(grp_aes_expandEncKey_fu_564_k_we0),
    .k_d0(grp_aes_expandEncKey_fu_564_k_d0),
    .k_q0(ctx_deckey_q0),
    .k_address1(grp_aes_expandEncKey_fu_564_k_address1),
    .k_ce1(grp_aes_expandEncKey_fu_564_k_ce1),
    .k_we1(grp_aes_expandEncKey_fu_564_k_we1),
    .k_d1(grp_aes_expandEncKey_fu_564_k_d1),
    .k_q1(ctx_deckey_q1),
    .rc_read(rcon_i_reg_517),
    .ap_return(grp_aes_expandEncKey_fu_564_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == tmp_131_fu_690_p2))) begin
            ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes256_decrypt_ecb_fu_551_ap_ready)) begin
            ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state19) & ~(1'b0 == tmp_130_fu_806_p2))) begin
            ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes256_encrypt_ecb_fu_540_ap_ready)) begin
            ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes_expandEncKey_fu_564_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == tmp_212_i_fu_908_p2))) begin
            ap_reg_grp_aes_expandEncKey_fu_564_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_expandEncKey_fu_564_ap_ready)) begin
            ap_reg_grp_aes_expandEncKey_fu_564_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_4))) begin
        i_10_reg_370 <= ap_const_lv6_0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_10_reg_370 <= i_15_reg_953;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_1))) begin
        i_1_reg_450 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_1_reg_450 <= i_12_reg_1069;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & ~(1'b0 == tmp_i_fu_891_p2))) begin
        i_24_reg_529 <= ap_const_lv3_7;
    end else if (((1'b1 == ap_CS_fsm_state31) & ~(1'b0 == grp_aes_expandEncKey_fu_564_ap_done))) begin
        i_24_reg_529 <= phitmp_i_reg_1178;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == tmp_121_fu_775_p2))) begin
        i_2_reg_462 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_2_reg_462 <= i_16_reg_1082;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_3_reg_473 <= i_18_reg_1100;
    end else if (((1'b1 == ap_CS_fsm_state21) & ~(1'b0 == grp_aes256_encrypt_ecb_fu_540_ap_done))) begin
        i_3_reg_473 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == tmp_135_fu_824_p2))) begin
        i_4_reg_484 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i_4_reg_484 <= i_20_reg_1123;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_2))) begin
        i_5_reg_394 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_5_reg_394 <= i_13_reg_979;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == tmp_122_fu_659_p2))) begin
        i_6_reg_406 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_6_reg_406 <= i_17_reg_992;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_7_reg_417 <= i_19_reg_1010;
    end else if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == grp_aes256_decrypt_ecb_fu_551_ap_done))) begin
        i_7_reg_417 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(1'b0 == tmp_136_fu_707_p2))) begin
        i_8_reg_428 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_8_reg_428 <= i_21_reg_1028;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == tmp_141_fu_725_p2))) begin
        i_9_reg_439 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_9_reg_439 <= i_22_reg_1051;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_s_fu_874_p2))) begin
        i_i_reg_506 <= ap_const_lv6_0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_i_reg_506 <= i_23_reg_1159;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_0))) begin
        i_reg_495 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        i_reg_495 <= i_11_reg_1141;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_3))) begin
        i_s_reg_382 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_s_reg_382 <= i_14_reg_966;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & ~(1'b0 == tmp_i_fu_891_p2))) begin
        rcon_i_reg_517 <= ap_const_lv8_1;
    end else if (((1'b1 == ap_CS_fsm_state31) & ~(1'b0 == grp_aes_expandEncKey_fu_564_ap_done))) begin
        rcon_i_reg_517 <= grp_aes_expandEncKey_fu_564_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (1'b0 == tmp_130_fu_806_p2))) begin
        buf_addr_5_reg_1087 <= tmp_132_fu_818_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'b0 == tmp_136_fu_707_p2))) begin
        buf_addr_8_reg_1015 <= tmp_138_fu_719_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_11_reg_1141 <= i_11_fu_880_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_12_reg_1069 <= i_12_fu_781_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_13_reg_979 <= i_13_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_14_reg_966 <= i_14_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_15_reg_953 <= i_15_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_16_reg_1082 <= i_16_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_17_reg_992 <= i_17_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_18_reg_1100 <= i_18_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_19_reg_1010 <= i_19_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_20_reg_1123 <= i_20_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_21_reg_1028 <= i_21_fu_731_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (mode_read_reg_926 == ap_const_lv3_2))) begin
        i_22_reg_1051 <= i_22_fu_751_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_23_reg_1159 <= i_23_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        mode_read_reg_926 <= mode;
        outbuf_addr_read_reg_920 <= outbuf_addr;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == tmp_212_i_fu_908_p2))) begin
        phitmp_i_reg_1178 <= phitmp_i_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == tmp_140_fu_844_p2))) begin
        sum2_reg_1133 <= sum2_fu_865_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (mode_read_reg_926 == ap_const_lv3_2) & (1'b0 == tmp_144_fu_745_p2))) begin
        sum6_reg_1061 <= sum6_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_s_fu_874_p2))) begin
        tmp_125_reg_1146[4 : 0] <= tmp_125_fu_886_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == tmp_131_fu_690_p2))) begin
        tmp_134_reg_997[4 : 0] <= tmp_134_fu_702_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (1'b0 == tmp_135_fu_824_p2))) begin
        tmp_137_reg_1105[4 : 0] <= tmp_137_fu_836_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == tmp_141_fu_725_p2))) begin
        tmp_143_reg_1033[4 : 0] <= tmp_143_fu_737_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_2))) begin
        tmp_93_reg_940 <= tmp_93_fu_589_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_3))) begin
        tmp_94_reg_935 <= tmp_94_fu_585_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_4))) begin
        tmp_95_reg_930 <= tmp_95_fu_581_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == tmp_135_fu_824_p2))) begin
        tmp_96_reg_1115 <= tmp_96_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == tmp_141_fu_725_p2))) begin
        tmp_97_reg_1043 <= tmp_97_fu_742_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'b0 == tmp_i_fu_891_p2))) begin
        tmp_i_9_reg_1164[5 : 0] <= tmp_i_9_fu_903_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_1))) begin
        tmp_reg_945 <= tmp_fu_593_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & ((mode_read_reg_926 == ap_const_lv3_0) | (mode_read_reg_926 == ap_const_lv3_1) | ~(mode_read_reg_926 == ap_const_lv3_2) | (mode_read_reg_926 == ap_const_lv3_3) | (mode_read_reg_926 == ap_const_lv3_4) | ~(1'b0 == tmp_144_fu_745_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & ((mode_read_reg_926 == ap_const_lv3_0) | (mode_read_reg_926 == ap_const_lv3_1) | ~(mode_read_reg_926 == ap_const_lv3_2) | (mode_read_reg_926 == ap_const_lv3_3) | (mode_read_reg_926 == ap_const_lv3_4) | ~(1'b0 == tmp_144_fu_745_p2)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_address0 = tmp_142_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_address0 = tmp_137_fu_836_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buf_address0 = buf_addr_5_reg_1087;
    end else if (((1'b1 == ap_CS_fsm_state19) & (1'b0 == tmp_130_fu_806_p2))) begin
        buf_address0 = tmp_132_fu_818_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buf_address0 = tmp_126_fu_801_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_address0 = tmp_145_fu_757_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buf_address0 = buf_addr_8_reg_1015;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf_address0 = tmp_138_fu_719_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == tmp_131_fu_690_p2))) begin
        buf_address0 = tmp_134_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_address0 = tmp_127_fu_685_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_address0 = grp_aes256_decrypt_ecb_fu_551_buf_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_address0 = grp_aes256_encrypt_ecb_fu_540_buf_r_address0;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_address1 = grp_aes256_decrypt_ecb_fu_551_buf_r_address1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_address1 = grp_aes256_encrypt_ecb_fu_540_buf_r_address1;
    end else begin
        buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'b0 == tmp_131_fu_690_p2)) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state19) & (1'b0 == tmp_130_fu_806_p2)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20))) begin
        buf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_ce0 = grp_aes256_decrypt_ecb_fu_551_buf_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_ce0 = grp_aes256_encrypt_ecb_fu_540_buf_r_ce0;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_ce1 = grp_aes256_decrypt_ecb_fu_551_buf_r_ce1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_ce1 = grp_aes256_encrypt_ecb_fu_540_buf_r_ce1;
    end else begin
        buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20))) begin
        buf_d0 = grp_fu_574_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state18))) begin
        buf_d0 = memptr_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_d0 = grp_aes256_decrypt_ecb_fu_551_buf_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_d0 = grp_aes256_encrypt_ecb_fu_540_buf_r_d0;
    end else begin
        buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_d1 = grp_aes256_decrypt_ecb_fu_551_buf_r_d1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_d1 = grp_aes256_encrypt_ecb_fu_540_buf_r_d1;
    end else begin
        buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20))) begin
        buf_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_we0 = grp_aes256_decrypt_ecb_fu_551_buf_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_we0 = grp_aes256_encrypt_ecb_fu_540_buf_r_we0;
    end else begin
        buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_we1 = grp_aes256_decrypt_ecb_fu_551_buf_r_we1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_we1 = grp_aes256_encrypt_ecb_fu_540_buf_r_we1;
    end else begin
        buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ctx_deckey_address0 = tmp_i_9_reg_1164;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        ctx_deckey_address0 = grp_aes_expandEncKey_fu_564_k_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_deckey_address0 = grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address0;
    end else begin
        ctx_deckey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ctx_deckey_address1 = grp_aes_expandEncKey_fu_564_k_address1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_deckey_address1 = grp_aes256_decrypt_ecb_fu_551_ctx_deckey_address1;
    end else begin
        ctx_deckey_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ctx_deckey_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        ctx_deckey_ce0 = grp_aes_expandEncKey_fu_564_k_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_deckey_ce0 = grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce0;
    end else begin
        ctx_deckey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ctx_deckey_ce1 = grp_aes_expandEncKey_fu_564_k_ce1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_deckey_ce1 = grp_aes256_decrypt_ecb_fu_551_ctx_deckey_ce1;
    end else begin
        ctx_deckey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ctx_deckey_d0 = key_q0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        ctx_deckey_d0 = grp_aes_expandEncKey_fu_564_k_d0;
    end else begin
        ctx_deckey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ctx_deckey_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        ctx_deckey_we0 = grp_aes_expandEncKey_fu_564_k_we0;
    end else begin
        ctx_deckey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ctx_deckey_we1 = grp_aes_expandEncKey_fu_564_k_we1;
    end else begin
        ctx_deckey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ctx_enckey_address0 = tmp_i_9_reg_1164;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_enckey_address0 = grp_aes256_encrypt_ecb_fu_540_ctx_enckey_address0;
    end else begin
        ctx_enckey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ctx_enckey_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_enckey_ce0 = grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce0;
    end else begin
        ctx_enckey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_enckey_ce1 = grp_aes256_encrypt_ecb_fu_540_ctx_enckey_ce1;
    end else begin
        ctx_enckey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ctx_enckey_we0 = 1'b1;
    end else begin
        ctx_enckey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_key_address0 = grp_aes256_decrypt_ecb_fu_551_ctx_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_key_address0 = grp_aes256_encrypt_ecb_fu_540_ctx_key_address0;
    end else begin
        ctx_key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_key_address1 = grp_aes256_decrypt_ecb_fu_551_ctx_key_address1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_key_address1 = grp_aes256_encrypt_ecb_fu_540_ctx_key_address1;
    end else begin
        ctx_key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_key_ce0 = grp_aes256_decrypt_ecb_fu_551_ctx_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_key_ce0 = grp_aes256_encrypt_ecb_fu_540_ctx_key_ce0;
    end else begin
        ctx_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_key_ce1 = grp_aes256_decrypt_ecb_fu_551_ctx_key_ce1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_key_ce1 = grp_aes256_encrypt_ecb_fu_540_ctx_key_ce1;
    end else begin
        ctx_key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_key_d0 = grp_aes256_decrypt_ecb_fu_551_ctx_key_d0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_key_d0 = grp_aes256_encrypt_ecb_fu_540_ctx_key_d0;
    end else begin
        ctx_key_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_key_d1 = grp_aes256_decrypt_ecb_fu_551_ctx_key_d1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_key_d1 = grp_aes256_encrypt_ecb_fu_540_ctx_key_d1;
    end else begin
        ctx_key_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_key_we0 = grp_aes256_decrypt_ecb_fu_551_ctx_key_we0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_key_we0 = grp_aes256_encrypt_ecb_fu_540_ctx_key_we0;
    end else begin
        ctx_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_key_we1 = grp_aes256_decrypt_ecb_fu_551_ctx_key_we1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ctx_key_we1 = grp_aes256_encrypt_ecb_fu_540_ctx_key_we1;
    end else begin
        ctx_key_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        iv_address0 = tmp_125_fu_886_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        iv_address0 = tmp_128_fu_654_p1;
    end else begin
        iv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state5))) begin
        iv_ce0 = 1'b1;
    end else begin
        iv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        iv_we0 = 1'b1;
    end else begin
        iv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        key_address0 = tmp_i_9_fu_903_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_address0 = tmp_129_fu_623_p1;
    end else begin
        key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state3))) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        key_we0 = 1'b1;
    end else begin
        key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        lastbuf_address0 = tmp_143_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        lastbuf_address0 = tmp_134_reg_997;
    end else begin
        lastbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        lastbuf_ce0 = 1'b1;
    end else begin
        lastbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        lastbuf_we0 = 1'b1;
    end else begin
        lastbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        memptr_address0 = sum2_cast_fu_870_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        memptr_address0 = sum_cast_fu_796_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        memptr_address0 = sum6_cast_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        memptr_address0 = sum4_cast_fu_680_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        memptr_address0 = sum8_cast_fu_649_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        memptr_address0 = sum1_cast_fu_618_p1;
    end else begin
        memptr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25))) begin
        memptr_ce0 = 1'b1;
    end else begin
        memptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25))) begin
        memptr_we0 = 1'b1;
    end else begin
        memptr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        xorv_address0 = tmp_125_reg_1146;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        xorv_address0 = tmp_137_reg_1105;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        xorv_address0 = tmp_132_fu_818_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xorv_address0 = tmp_143_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        xorv_address0 = tmp_138_fu_719_p1;
    end else begin
        xorv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state27))) begin
        xorv_ce0 = 1'b1;
    end else begin
        xorv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        xorv_d0 = iv_q0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        xorv_d0 = buf_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xorv_d0 = lastbuf_q0;
    end else begin
        xorv_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state27))) begin
        xorv_we0 = 1'b1;
    end else begin
        xorv_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else if ((~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if ((~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~(ap_start == 1'b0) & (mode_read_read_fu_114_p2 == ap_const_lv3_4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(ap_start == 1'b0) & ~(mode_read_read_fu_114_p2 == ap_const_lv3_0) & ~(mode_read_read_fu_114_p2 == ap_const_lv3_1) & ~(mode_read_read_fu_114_p2 == ap_const_lv3_2) & ~(mode_read_read_fu_114_p2 == ap_const_lv3_3) & ~(mode_read_read_fu_114_p2 == ap_const_lv3_4))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(tmp_124_fu_597_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == tmp_123_fu_628_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (~(1'b0 == tmp_122_fu_659_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == tmp_131_fu_690_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == grp_aes256_decrypt_ecb_fu_551_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(1'b0 == tmp_136_fu_707_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            if (~(1'b0 == tmp_141_fu_725_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state15 : begin
            if (((mode_read_reg_926 == ap_const_lv3_0) | (mode_read_reg_926 == ap_const_lv3_1) | ~(mode_read_reg_926 == ap_const_lv3_2) | (mode_read_reg_926 == ap_const_lv3_3) | (mode_read_reg_926 == ap_const_lv3_4) | ~(1'b0 == tmp_144_fu_745_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state17 : begin
            if (~(1'b0 == tmp_121_fu_775_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state19 : begin
            if (~(1'b0 == tmp_130_fu_806_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state21 : begin
            if (~(1'b0 == grp_aes256_encrypt_ecb_fu_540_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (~(1'b0 == tmp_135_fu_824_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            if (~(1'b0 == tmp_140_fu_844_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state26 : begin
            if (~(1'b0 == tmp_s_fu_874_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state28 : begin
            if (~(1'b0 == tmp_i_fu_891_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state30 : begin
            if (~(1'b0 == tmp_212_i_fu_908_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (~(1'b0 == grp_aes_expandEncKey_fu_564_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_aes256_decrypt_ecb_fu_551_ap_start = ap_reg_grp_aes256_decrypt_ecb_fu_551_ap_start;

assign grp_aes256_encrypt_ecb_fu_540_ap_start = ap_reg_grp_aes256_encrypt_ecb_fu_540_ap_start;

assign grp_aes_expandEncKey_fu_564_ap_start = ap_reg_grp_aes_expandEncKey_fu_564_ap_start;

assign grp_fu_574_p2 = (xorv_q0 ^ buf_q0);

assign i_11_fu_880_p2 = (i_reg_495 + ap_const_lv5_1);

assign i_12_fu_781_p2 = (i_1_reg_450 + ap_const_lv5_1);

assign i_13_fu_665_p2 = (i_5_reg_394 + ap_const_lv5_1);

assign i_14_fu_634_p2 = (i_s_reg_382 + ap_const_lv5_1);

assign i_15_fu_603_p2 = (i_10_reg_370 + ap_const_lv6_1);

assign i_16_fu_812_p2 = (i_2_reg_462 + ap_const_lv5_1);

assign i_17_fu_696_p2 = (i_6_reg_406 + ap_const_lv5_1);

assign i_18_fu_830_p2 = (i_3_reg_473 + ap_const_lv5_1);

assign i_19_fu_713_p2 = (i_7_reg_417 + ap_const_lv5_1);

assign i_20_fu_850_p2 = (i_4_reg_484 + ap_const_lv5_1);

assign i_21_fu_731_p2 = (i_8_reg_428 + ap_const_lv5_1);

assign i_22_fu_751_p2 = (i_9_reg_439 + ap_const_lv5_1);

assign i_23_fu_897_p2 = (i_i_reg_506 + ap_const_lv6_1);

assign mode_read_read_fu_114_p2 = mode;

assign phitmp_i_fu_914_p2 = ($signed(i_24_reg_529) + $signed(ap_const_lv3_7));

assign sum1_cast_fu_618_p1 = sum1_fu_613_p2;

assign sum1_fu_613_p2 = (tmp_95_reg_930 + tmp_156_cast_fu_609_p1);

assign sum2_cast_fu_870_p1 = sum2_reg_1133;

assign sum2_fu_865_p2 = (tmp_96_reg_1115 + tmp_170_cast_fu_861_p1);

assign sum4_cast_fu_680_p1 = sum4_fu_675_p2;

assign sum4_fu_675_p2 = (tmp_93_reg_940 + tmp_154_cast_fu_671_p1);

assign sum6_cast_fu_771_p1 = sum6_reg_1061;

assign sum6_fu_766_p2 = (tmp_97_reg_1043 + tmp_174_cast_fu_762_p1);

assign sum8_cast_fu_649_p1 = sum8_fu_644_p2;

assign sum8_fu_644_p2 = (tmp_94_reg_935 + tmp_155_cast_fu_640_p1);

assign sum_cast_fu_796_p1 = sum_fu_791_p2;

assign sum_fu_791_p2 = (tmp_reg_945 + tmp_153_cast_fu_787_p1);

assign tmp_121_fu_775_p2 = ((i_1_reg_450 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_122_fu_659_p2 = ((i_5_reg_394 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_123_fu_628_p2 = ((i_s_reg_382 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_124_fu_597_p2 = ((i_10_reg_370 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign tmp_125_fu_886_p1 = i_reg_495;

assign tmp_126_fu_801_p1 = i_1_reg_450;

assign tmp_127_fu_685_p1 = i_5_reg_394;

assign tmp_128_fu_654_p1 = i_s_reg_382;

assign tmp_129_fu_623_p1 = i_10_reg_370;

assign tmp_130_fu_806_p2 = ((i_2_reg_462 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_131_fu_690_p2 = ((i_6_reg_406 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_132_fu_818_p1 = i_2_reg_462;

assign tmp_134_fu_702_p1 = i_6_reg_406;

assign tmp_135_fu_824_p2 = ((i_3_reg_473 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_136_fu_707_p2 = ((i_7_reg_417 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_137_fu_836_p1 = i_3_reg_473;

assign tmp_138_fu_719_p1 = i_7_reg_417;

assign tmp_140_fu_844_p2 = ((i_4_reg_484 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_141_fu_725_p2 = ((i_8_reg_428 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_142_fu_856_p1 = i_4_reg_484;

assign tmp_143_fu_737_p1 = i_8_reg_428;

assign tmp_144_fu_745_p2 = ((i_9_reg_439 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_145_fu_757_p1 = i_9_reg_439;

assign tmp_153_cast_fu_787_p1 = i_1_reg_450;

assign tmp_154_cast_fu_671_p1 = i_5_reg_394;

assign tmp_155_cast_fu_640_p1 = i_s_reg_382;

assign tmp_156_cast_fu_609_p1 = i_10_reg_370;

assign tmp_170_cast_fu_861_p1 = i_4_reg_484;

assign tmp_174_cast_fu_762_p1 = i_9_reg_439;

assign tmp_212_i_fu_908_p2 = ((i_24_reg_529 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_93_fu_589_p1 = inbuf_addr[7:0];

assign tmp_94_fu_585_p1 = inbuf_addr[7:0];

assign tmp_95_fu_581_p1 = inbuf_addr[7:0];

assign tmp_96_fu_841_p1 = outbuf_addr_read_reg_920[7:0];

assign tmp_97_fu_742_p1 = outbuf_addr_read_reg_920[7:0];

assign tmp_fu_593_p1 = inbuf_addr[7:0];

assign tmp_i_9_fu_903_p1 = i_i_reg_506;

assign tmp_i_fu_891_p2 = ((i_i_reg_506 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign tmp_s_fu_874_p2 = ((i_reg_495 == ap_const_lv5_10) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_134_reg_997[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_143_reg_1033[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_137_reg_1105[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_125_reg_1146[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_i_9_reg_1164[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //aes256cbc
