// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes256cbc,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=813,HLS_SYN_TPT=none,HLS_SYN_MEM=13,HLS_SYN_DSP=0,HLS_SYN_FF=2255,HLS_SYN_LUT=3606}" *)

module aes256cbc (
        ap_clk,
        ap_rst_n,
        m_axi_memptr_AWVALID,
        m_axi_memptr_AWREADY,
        m_axi_memptr_AWADDR,
        m_axi_memptr_AWID,
        m_axi_memptr_AWLEN,
        m_axi_memptr_AWSIZE,
        m_axi_memptr_AWBURST,
        m_axi_memptr_AWLOCK,
        m_axi_memptr_AWCACHE,
        m_axi_memptr_AWPROT,
        m_axi_memptr_AWQOS,
        m_axi_memptr_AWREGION,
        m_axi_memptr_AWUSER,
        m_axi_memptr_WVALID,
        m_axi_memptr_WREADY,
        m_axi_memptr_WDATA,
        m_axi_memptr_WSTRB,
        m_axi_memptr_WLAST,
        m_axi_memptr_WID,
        m_axi_memptr_WUSER,
        m_axi_memptr_ARVALID,
        m_axi_memptr_ARREADY,
        m_axi_memptr_ARADDR,
        m_axi_memptr_ARID,
        m_axi_memptr_ARLEN,
        m_axi_memptr_ARSIZE,
        m_axi_memptr_ARBURST,
        m_axi_memptr_ARLOCK,
        m_axi_memptr_ARCACHE,
        m_axi_memptr_ARPROT,
        m_axi_memptr_ARQOS,
        m_axi_memptr_ARREGION,
        m_axi_memptr_ARUSER,
        m_axi_memptr_RVALID,
        m_axi_memptr_RREADY,
        m_axi_memptr_RDATA,
        m_axi_memptr_RLAST,
        m_axi_memptr_RID,
        m_axi_memptr_RUSER,
        m_axi_memptr_RRESP,
        m_axi_memptr_BVALID,
        m_axi_memptr_BREADY,
        m_axi_memptr_BRESP,
        m_axi_memptr_BID,
        m_axi_memptr_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt,
        s_axi_p0_AWVALID,
        s_axi_p0_AWREADY,
        s_axi_p0_AWADDR,
        s_axi_p0_WVALID,
        s_axi_p0_WREADY,
        s_axi_p0_WDATA,
        s_axi_p0_WSTRB,
        s_axi_p0_ARVALID,
        s_axi_p0_ARREADY,
        s_axi_p0_ARADDR,
        s_axi_p0_RVALID,
        s_axi_p0_RREADY,
        s_axi_p0_RDATA,
        s_axi_p0_RRESP,
        s_axi_p0_BVALID,
        s_axi_p0_BREADY,
        s_axi_p0_BRESP
);

parameter    ap_ST_fsm_state1 = 46'b1;
parameter    ap_ST_fsm_state2 = 46'b10;
parameter    ap_ST_fsm_state3 = 46'b100;
parameter    ap_ST_fsm_state4 = 46'b1000;
parameter    ap_ST_fsm_state5 = 46'b10000;
parameter    ap_ST_fsm_state6 = 46'b100000;
parameter    ap_ST_fsm_state7 = 46'b1000000;
parameter    ap_ST_fsm_state8 = 46'b10000000;
parameter    ap_ST_fsm_pp0_stage0 = 46'b100000000;
parameter    ap_ST_fsm_state12 = 46'b1000000000;
parameter    ap_ST_fsm_pp1_stage0 = 46'b10000000000;
parameter    ap_ST_fsm_state16 = 46'b100000000000;
parameter    ap_ST_fsm_pp2_stage0 = 46'b1000000000000;
parameter    ap_ST_fsm_state20 = 46'b10000000000000;
parameter    ap_ST_fsm_state21 = 46'b100000000000000;
parameter    ap_ST_fsm_state22 = 46'b1000000000000000;
parameter    ap_ST_fsm_state23 = 46'b10000000000000000;
parameter    ap_ST_fsm_state24 = 46'b100000000000000000;
parameter    ap_ST_fsm_state25 = 46'b1000000000000000000;
parameter    ap_ST_fsm_state26 = 46'b10000000000000000000;
parameter    ap_ST_fsm_state27 = 46'b100000000000000000000;
parameter    ap_ST_fsm_pp3_stage0 = 46'b1000000000000000000000;
parameter    ap_ST_fsm_state31 = 46'b10000000000000000000000;
parameter    ap_ST_fsm_state32 = 46'b100000000000000000000000;
parameter    ap_ST_fsm_state33 = 46'b1000000000000000000000000;
parameter    ap_ST_fsm_state34 = 46'b10000000000000000000000000;
parameter    ap_ST_fsm_state35 = 46'b100000000000000000000000000;
parameter    ap_ST_fsm_pp4_stage0 = 46'b1000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 46'b10000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 46'b100000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 46'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 46'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 46'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 46'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_pp5_stage0 = 46'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 46'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 46'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 46'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 46'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 46'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 46'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 46'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 46'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 46'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 46'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 46'b1000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_P0_DATA_WIDTH = 32;
parameter    C_S_AXI_P0_ADDR_WIDTH = 6;
parameter    C_M_AXI_MEMPTR_ID_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEMPTR_DATA_WIDTH = 32;
parameter    C_M_AXI_MEMPTR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEMPTR_TARGET_ADDR = 0;
parameter    C_M_AXI_MEMPTR_USER_VALUE = 0;
parameter    C_M_AXI_MEMPTR_PROT_VALUE = 0;
parameter    C_M_AXI_MEMPTR_CACHE_VALUE = 3;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv32_2D = 32'b101101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_P0_WSTRB_WIDTH = (C_S_AXI_P0_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_MEMPTR_WSTRB_WIDTH = (C_M_AXI_MEMPTR_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_memptr_AWVALID;
input   m_axi_memptr_AWREADY;
output  [C_M_AXI_MEMPTR_ADDR_WIDTH - 1 : 0] m_axi_memptr_AWADDR;
output  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_AWID;
output  [7:0] m_axi_memptr_AWLEN;
output  [2:0] m_axi_memptr_AWSIZE;
output  [1:0] m_axi_memptr_AWBURST;
output  [1:0] m_axi_memptr_AWLOCK;
output  [3:0] m_axi_memptr_AWCACHE;
output  [2:0] m_axi_memptr_AWPROT;
output  [3:0] m_axi_memptr_AWQOS;
output  [3:0] m_axi_memptr_AWREGION;
output  [C_M_AXI_MEMPTR_AWUSER_WIDTH - 1 : 0] m_axi_memptr_AWUSER;
output   m_axi_memptr_WVALID;
input   m_axi_memptr_WREADY;
output  [C_M_AXI_MEMPTR_DATA_WIDTH - 1 : 0] m_axi_memptr_WDATA;
output  [C_M_AXI_MEMPTR_WSTRB_WIDTH - 1 : 0] m_axi_memptr_WSTRB;
output   m_axi_memptr_WLAST;
output  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_WID;
output  [C_M_AXI_MEMPTR_WUSER_WIDTH - 1 : 0] m_axi_memptr_WUSER;
output   m_axi_memptr_ARVALID;
input   m_axi_memptr_ARREADY;
output  [C_M_AXI_MEMPTR_ADDR_WIDTH - 1 : 0] m_axi_memptr_ARADDR;
output  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_ARID;
output  [7:0] m_axi_memptr_ARLEN;
output  [2:0] m_axi_memptr_ARSIZE;
output  [1:0] m_axi_memptr_ARBURST;
output  [1:0] m_axi_memptr_ARLOCK;
output  [3:0] m_axi_memptr_ARCACHE;
output  [2:0] m_axi_memptr_ARPROT;
output  [3:0] m_axi_memptr_ARQOS;
output  [3:0] m_axi_memptr_ARREGION;
output  [C_M_AXI_MEMPTR_ARUSER_WIDTH - 1 : 0] m_axi_memptr_ARUSER;
input   m_axi_memptr_RVALID;
output   m_axi_memptr_RREADY;
input  [C_M_AXI_MEMPTR_DATA_WIDTH - 1 : 0] m_axi_memptr_RDATA;
input   m_axi_memptr_RLAST;
input  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_RID;
input  [C_M_AXI_MEMPTR_RUSER_WIDTH - 1 : 0] m_axi_memptr_RUSER;
input  [1:0] m_axi_memptr_RRESP;
input   m_axi_memptr_BVALID;
output   m_axi_memptr_BREADY;
input  [1:0] m_axi_memptr_BRESP;
input  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_BID;
input  [C_M_AXI_MEMPTR_BUSER_WIDTH - 1 : 0] m_axi_memptr_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;
input   s_axi_p0_AWVALID;
output   s_axi_p0_AWREADY;
input  [C_S_AXI_P0_ADDR_WIDTH - 1 : 0] s_axi_p0_AWADDR;
input   s_axi_p0_WVALID;
output   s_axi_p0_WREADY;
input  [C_S_AXI_P0_DATA_WIDTH - 1 : 0] s_axi_p0_WDATA;
input  [C_S_AXI_P0_WSTRB_WIDTH - 1 : 0] s_axi_p0_WSTRB;
input   s_axi_p0_ARVALID;
output   s_axi_p0_ARREADY;
input  [C_S_AXI_P0_ADDR_WIDTH - 1 : 0] s_axi_p0_ARADDR;
output   s_axi_p0_RVALID;
input   s_axi_p0_RREADY;
output  [C_S_AXI_P0_DATA_WIDTH - 1 : 0] s_axi_p0_RDATA;
output  [1:0] s_axi_p0_RRESP;
output   s_axi_p0_BVALID;
input   s_axi_p0_BREADY;
output  [1:0] s_axi_p0_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [2:0] mode;
wire   [31:0] inbuf_addr;
wire   [31:0] outbuf_addr;
reg   [3:0] iv_address0;
reg    iv_ce0;
reg    iv_we0;
wire   [7:0] iv_q0;
reg   [3:0] xorv_address0;
reg    xorv_ce0;
reg    xorv_we0;
reg   [7:0] xorv_d0;
wire   [7:0] xorv_q0;
reg   [4:0] key_address0;
reg    key_ce0;
reg    key_we0;
wire   [7:0] key_q0;
reg   [4:0] ctx_deckey_address0;
reg    ctx_deckey_ce0;
reg    ctx_deckey_we0;
reg   [7:0] ctx_deckey_d0;
wire   [7:0] ctx_deckey_q0;
reg   [4:0] ctx_deckey_address1;
reg    ctx_deckey_ce1;
reg    ctx_deckey_we1;
wire   [7:0] ctx_deckey_q1;
reg   [4:0] ctx_enckey_address0;
reg    ctx_enckey_ce0;
reg    ctx_enckey_we0;
wire   [7:0] ctx_enckey_q0;
reg    ctx_enckey_ce1;
wire   [7:0] ctx_enckey_q1;
reg   [4:0] ctx_key_address0;
reg    ctx_key_ce0;
reg    ctx_key_we0;
reg   [7:0] ctx_key_d0;
wire   [7:0] ctx_key_q0;
reg   [4:0] ctx_key_address1;
reg    ctx_key_ce1;
reg    ctx_key_we1;
reg   [7:0] ctx_key_d1;
wire   [7:0] ctx_key_q1;
reg   [3:0] lastbuf_address0;
reg    lastbuf_ce0;
reg    lastbuf_we0;
wire   [7:0] lastbuf_q0;
reg    memptr_blk_n_AR;
wire   [0:0] ap_CS_fsm_state2;
reg   [2:0] mode_read_reg_906;
reg    memptr_blk_n_R;
wire   [0:0] ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
reg   [0:0] exitcond_reg_1035;
reg    memptr_blk_n_AW;
wire   [0:0] ap_CS_fsm_state43;
wire   [0:0] tmp_135_fu_802_p2;
reg    memptr_blk_n_W;
reg    ap_enable_reg_pp5_iter2;
reg   [0:0] exitcond9_reg_1086;
reg   [0:0] ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086;
reg    memptr_blk_n_B;
wire   [0:0] ap_CS_fsm_state52;
wire   [0:0] ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] exitcond1_reg_952;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] tmp_141_fu_723_p2;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] exitcond4_reg_1021;
reg   [0:0] ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021;
wire   [0:0] ap_CS_fsm_state35;
wire   [0:0] ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond2_reg_943;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond3_reg_934;
reg    memptr_AWVALID;
wire    memptr_AWREADY;
reg   [31:0] memptr_AWADDR;
reg    memptr_WVALID;
wire    memptr_WREADY;
reg    memptr_ARVALID;
wire    memptr_ARREADY;
reg   [31:0] memptr_ARADDR;
reg   [31:0] memptr_ARLEN;
wire    memptr_RVALID;
reg    memptr_RREADY;
wire   [7:0] memptr_RDATA;
wire    memptr_RLAST;
wire   [0:0] memptr_RID;
wire   [0:0] memptr_RUSER;
wire   [1:0] memptr_RRESP;
wire    memptr_BVALID;
reg    memptr_BREADY;
wire   [1:0] memptr_BRESP;
wire   [0:0] memptr_BID;
wire   [0:0] memptr_BUSER;
reg   [5:0] indvar3_reg_374;
reg   [5:0] ap_pipeline_reg_pp0_iter1_indvar3_reg_374;
reg   [4:0] indvar2_reg_386;
reg   [4:0] ap_pipeline_reg_pp1_iter1_indvar2_reg_386;
reg   [4:0] indvar1_reg_398;
reg   [4:0] ap_pipeline_reg_pp2_iter1_indvar1_reg_398;
reg   [4:0] indvar4_reg_443;
reg   [4:0] indvar_reg_454;
reg   [4:0] ap_pipeline_reg_pp4_iter1_indvar_reg_454;
reg   [4:0] indvar7_reg_488;
reg   [7:0] reg_585;
wire   [7:0] buf_q0;
reg   [7:0] reg_592;
wire   [0:0] ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
reg    ap_sig_ioackin_memptr_WREADY;
wire   [0:0] ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
reg   [31:0] outbuf_addr_read_reg_892;
reg   [31:0] inbuf_addr_read_reg_898;
wire   [2:0] mode_read_read_fu_156_p2;
reg    ap_sig_ioackin_memptr_ARREADY;
wire   [0:0] exitcond3_fu_637_p2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond3_reg_934;
wire   [5:0] indvar_next3_fu_643_p2;
reg   [5:0] indvar_next3_reg_938;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond2_fu_654_p2;
reg   [0:0] ap_pipeline_reg_pp1_iter1_exitcond2_reg_943;
wire   [4:0] indvar_next2_fu_660_p2;
reg   [4:0] indvar_next2_reg_947;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond1_fu_671_p2;
reg   [0:0] ap_pipeline_reg_pp2_iter1_exitcond1_reg_952;
wire   [4:0] indvar_next1_fu_677_p2;
reg   [4:0] indvar_next1_reg_956;
reg    ap_enable_reg_pp2_iter0;
wire   [4:0] i_9_fu_694_p2;
reg   [4:0] i_9_reg_964;
wire   [0:0] ap_CS_fsm_state21;
wire   [63:0] tmp_134_fu_700_p1;
reg   [63:0] tmp_134_reg_969;
wire   [0:0] tmp_131_fu_688_p2;
wire   [4:0] i_11_fu_711_p2;
reg   [4:0] i_11_reg_982;
wire   [0:0] ap_CS_fsm_state24;
reg   [3:0] buf_addr_8_reg_987;
wire   [0:0] tmp_136_fu_705_p2;
reg    ap_sig_ioackin_memptr_AWREADY;
wire   [4:0] i_13_fu_729_p2;
reg   [4:0] i_13_reg_1001;
wire   [63:0] tmp_144_fu_735_p1;
reg   [63:0] tmp_144_reg_1006;
wire   [0:0] exitcond4_fu_750_p2;
wire   [4:0] indvar_next4_fu_756_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] exitcond_fu_767_p2;
reg   [0:0] ap_pipeline_reg_pp4_iter1_exitcond_reg_1035;
wire   [4:0] indvar_next_fu_773_p2;
reg   [4:0] indvar_next_reg_1039;
reg    ap_enable_reg_pp4_iter0;
wire   [4:0] i_8_fu_790_p2;
reg   [4:0] i_8_reg_1047;
wire   [0:0] ap_CS_fsm_state40;
reg   [3:0] buf_addr_5_reg_1052;
wire   [0:0] tmp_130_fu_784_p2;
wire   [4:0] i_12_fu_808_p2;
reg   [4:0] i_12_reg_1066;
wire   [63:0] tmp_138_fu_814_p1;
reg   [63:0] tmp_138_reg_1071;
wire   [0:0] exitcond9_fu_829_p2;
wire   [4:0] indvar_next8_fu_835_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [4:0] i_6_fu_852_p2;
reg   [4:0] i_6_reg_1103;
wire   [0:0] ap_CS_fsm_state53;
wire   [63:0] tmp_125_fu_858_p1;
reg   [63:0] tmp_125_reg_1108;
wire   [0:0] tmp_124_fu_846_p2;
wire   [5:0] i_7_fu_869_p2;
reg   [5:0] i_7_reg_1121;
wire   [0:0] ap_CS_fsm_state55;
wire   [63:0] tmp_i_8_fu_875_p1;
reg   [63:0] tmp_i_8_reg_1126;
wire   [0:0] tmp_i_fu_863_p2;
wire   [2:0] phitmp_i_fu_886_p2;
reg   [2:0] phitmp_i_reg_1140;
wire   [0:0] ap_CS_fsm_state57;
wire   [0:0] tmp_212_i_fu_880_p2;
wire   [7:0] grp_aes_expandEncKey_fu_568_ap_return;
wire   [0:0] ap_CS_fsm_state58;
wire    grp_aes_expandEncKey_fu_568_ap_done;
wire   [0:0] ap_CS_fsm_state8;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp4_iter2;
reg   [3:0] buf_address0;
reg    buf_ce0;
reg    buf_we0;
reg   [7:0] buf_d0;
reg   [3:0] buf_address1;
reg    buf_ce1;
reg    buf_we1;
reg   [7:0] buf_d1;
wire   [7:0] buf_q1;
wire    grp_aes256_encrypt_ecb_fu_544_ap_start;
wire    grp_aes256_encrypt_ecb_fu_544_ap_done;
wire    grp_aes256_encrypt_ecb_fu_544_ap_idle;
wire    grp_aes256_encrypt_ecb_fu_544_ap_ready;
wire   [3:0] grp_aes256_encrypt_ecb_fu_544_buf_r_address0;
wire    grp_aes256_encrypt_ecb_fu_544_buf_r_ce0;
wire    grp_aes256_encrypt_ecb_fu_544_buf_r_we0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_544_buf_r_d0;
wire   [3:0] grp_aes256_encrypt_ecb_fu_544_buf_r_address1;
wire    grp_aes256_encrypt_ecb_fu_544_buf_r_ce1;
wire    grp_aes256_encrypt_ecb_fu_544_buf_r_we1;
wire   [7:0] grp_aes256_encrypt_ecb_fu_544_buf_r_d1;
wire   [4:0] grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address0;
wire    grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce0;
wire   [4:0] grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address1;
wire    grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce1;
wire   [4:0] grp_aes256_encrypt_ecb_fu_544_ctx_key_address0;
wire    grp_aes256_encrypt_ecb_fu_544_ctx_key_ce0;
wire    grp_aes256_encrypt_ecb_fu_544_ctx_key_we0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_544_ctx_key_d0;
wire   [4:0] grp_aes256_encrypt_ecb_fu_544_ctx_key_address1;
wire    grp_aes256_encrypt_ecb_fu_544_ctx_key_ce1;
wire    grp_aes256_encrypt_ecb_fu_544_ctx_key_we1;
wire   [7:0] grp_aes256_encrypt_ecb_fu_544_ctx_key_d1;
wire    grp_aes256_decrypt_ecb_fu_555_ap_start;
wire    grp_aes256_decrypt_ecb_fu_555_ap_done;
wire    grp_aes256_decrypt_ecb_fu_555_ap_idle;
wire    grp_aes256_decrypt_ecb_fu_555_ap_ready;
wire   [3:0] grp_aes256_decrypt_ecb_fu_555_buf_r_address0;
wire    grp_aes256_decrypt_ecb_fu_555_buf_r_ce0;
wire    grp_aes256_decrypt_ecb_fu_555_buf_r_we0;
wire   [7:0] grp_aes256_decrypt_ecb_fu_555_buf_r_d0;
wire   [3:0] grp_aes256_decrypt_ecb_fu_555_buf_r_address1;
wire    grp_aes256_decrypt_ecb_fu_555_buf_r_ce1;
wire    grp_aes256_decrypt_ecb_fu_555_buf_r_we1;
wire   [7:0] grp_aes256_decrypt_ecb_fu_555_buf_r_d1;
wire   [4:0] grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address0;
wire    grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce0;
wire   [4:0] grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address1;
wire    grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce1;
wire   [4:0] grp_aes256_decrypt_ecb_fu_555_ctx_key_address0;
wire    grp_aes256_decrypt_ecb_fu_555_ctx_key_ce0;
wire    grp_aes256_decrypt_ecb_fu_555_ctx_key_we0;
wire   [7:0] grp_aes256_decrypt_ecb_fu_555_ctx_key_d0;
wire   [4:0] grp_aes256_decrypt_ecb_fu_555_ctx_key_address1;
wire    grp_aes256_decrypt_ecb_fu_555_ctx_key_ce1;
wire    grp_aes256_decrypt_ecb_fu_555_ctx_key_we1;
wire   [7:0] grp_aes256_decrypt_ecb_fu_555_ctx_key_d1;
wire    grp_aes_expandEncKey_fu_568_ap_start;
wire    grp_aes_expandEncKey_fu_568_ap_idle;
wire    grp_aes_expandEncKey_fu_568_ap_ready;
wire   [4:0] grp_aes_expandEncKey_fu_568_k_address0;
wire    grp_aes_expandEncKey_fu_568_k_ce0;
wire    grp_aes_expandEncKey_fu_568_k_we0;
wire   [7:0] grp_aes_expandEncKey_fu_568_k_d0;
wire   [4:0] grp_aes_expandEncKey_fu_568_k_address1;
wire    grp_aes_expandEncKey_fu_568_k_ce1;
wire    grp_aes_expandEncKey_fu_568_k_we1;
wire   [7:0] grp_aes_expandEncKey_fu_568_k_d1;
reg   [5:0] indvar3_phi_fu_378_p4;
reg   [4:0] indvar2_phi_fu_390_p4;
reg   [4:0] indvar1_phi_fu_402_p4;
reg   [4:0] i_3_reg_410;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] ap_CS_fsm_state20;
reg   [4:0] i_4_reg_421;
wire   [0:0] ap_CS_fsm_state23;
wire   [0:0] ap_CS_fsm_state25;
reg   [4:0] i_5_reg_432;
wire   [0:0] ap_CS_fsm_state27;
reg   [4:0] indvar_phi_fu_458_p4;
reg   [4:0] i_1_reg_466;
wire   [0:0] ap_CS_fsm_state41;
wire   [0:0] ap_CS_fsm_state39;
reg   [4:0] i_2_reg_477;
wire   [0:0] ap_CS_fsm_state42;
wire   [0:0] ap_CS_fsm_state44;
reg   [4:0] i_reg_499;
wire   [0:0] ap_CS_fsm_state54;
reg   [5:0] i_i_reg_510;
wire   [0:0] ap_CS_fsm_state56;
reg   [7:0] rcon_i_reg_521;
reg   [2:0] i_10_reg_533;
reg    ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start;
reg    ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start;
reg    ap_reg_grp_aes_expandEncKey_fu_568_ap_start;
wire   [63:0] tmp_129_fu_649_p1;
wire   [63:0] tmp_128_fu_666_p1;
wire   [63:0] tmp_127_fu_683_p1;
wire   [63:0] tmp_139_fu_717_p1;
wire   [63:0] tmp_145_fu_762_p1;
wire   [63:0] tmp_126_fu_779_p1;
wire   [63:0] tmp_132_fu_796_p1;
wire   [63:0] tmp_142_fu_841_p1;
wire   [63:0] tmp_123_fu_597_p1;
wire   [63:0] tmp_122_fu_607_p1;
wire   [63:0] tmp_121_fu_617_p1;
wire   [63:0] tmp_s_fu_627_p1;
wire   [63:0] tmp_143_fu_740_p1;
wire   [63:0] tmp_137_fu_819_p1;
reg    ap_reg_ioackin_memptr_ARREADY;
reg    ap_reg_ioackin_memptr_AWREADY;
reg    ap_reg_ioackin_memptr_WREADY;
wire   [7:0] grp_fu_578_p2;
reg   [45:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'b1;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start = 1'b0;
#0 ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start = 1'b0;
#0 ap_reg_grp_aes_expandEncKey_fu_568_ap_start = 1'b0;
#0 ap_reg_ioackin_memptr_ARREADY = 1'b0;
#0 ap_reg_ioackin_memptr_AWREADY = 1'b0;
#0 ap_reg_ioackin_memptr_WREADY = 1'b0;
end

aes256cbc_iv #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
iv_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(iv_address0),
    .ce0(iv_ce0),
    .we0(iv_we0),
    .d0(reg_585),
    .q0(iv_q0)
);

aes256cbc_iv #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
xorv_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xorv_address0),
    .ce0(xorv_ce0),
    .we0(xorv_we0),
    .d0(xorv_d0),
    .q0(xorv_q0)
);

aes256cbc_key #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
key_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(key_address0),
    .ce0(key_ce0),
    .we0(key_we0),
    .d0(reg_585),
    .q0(key_q0)
);

aes256cbc_ctx_decfYi #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ctx_deckey_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_deckey_address0),
    .ce0(ctx_deckey_ce0),
    .we0(ctx_deckey_we0),
    .d0(ctx_deckey_d0),
    .q0(ctx_deckey_q0),
    .address1(ctx_deckey_address1),
    .ce1(ctx_deckey_ce1),
    .we1(ctx_deckey_we1),
    .d1(grp_aes_expandEncKey_fu_568_k_d1),
    .q1(ctx_deckey_q1)
);

aes256cbc_ctx_encg8j #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ctx_enckey_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_enckey_address0),
    .ce0(ctx_enckey_ce0),
    .we0(ctx_enckey_we0),
    .d0(key_q0),
    .q0(ctx_enckey_q0),
    .address1(grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address1),
    .ce1(ctx_enckey_ce1),
    .q1(ctx_enckey_q1)
);

aes256cbc_ctx_decfYi #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ctx_key_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_key_address0),
    .ce0(ctx_key_ce0),
    .we0(ctx_key_we0),
    .d0(ctx_key_d0),
    .q0(ctx_key_q0),
    .address1(ctx_key_address1),
    .ce1(ctx_key_ce1),
    .we1(ctx_key_we1),
    .d1(ctx_key_d1),
    .q1(ctx_key_q1)
);

aes256cbc_iv #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
lastbuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lastbuf_address0),
    .ce0(lastbuf_ce0),
    .we0(lastbuf_we0),
    .d0(buf_q0),
    .q0(lastbuf_q0)
);

aes256cbc_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
aes256cbc_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

aes256cbc_p0_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_P0_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_P0_DATA_WIDTH ))
aes256cbc_p0_s_axi_U(
    .AWVALID(s_axi_p0_AWVALID),
    .AWREADY(s_axi_p0_AWREADY),
    .AWADDR(s_axi_p0_AWADDR),
    .WVALID(s_axi_p0_WVALID),
    .WREADY(s_axi_p0_WREADY),
    .WDATA(s_axi_p0_WDATA),
    .WSTRB(s_axi_p0_WSTRB),
    .ARVALID(s_axi_p0_ARVALID),
    .ARREADY(s_axi_p0_ARREADY),
    .ARADDR(s_axi_p0_ARADDR),
    .RVALID(s_axi_p0_RVALID),
    .RREADY(s_axi_p0_RREADY),
    .RDATA(s_axi_p0_RDATA),
    .RRESP(s_axi_p0_RRESP),
    .BVALID(s_axi_p0_BVALID),
    .BREADY(s_axi_p0_BREADY),
    .BRESP(s_axi_p0_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mode(mode),
    .inbuf_addr(inbuf_addr),
    .outbuf_addr(outbuf_addr)
);

aes256cbc_memptr_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEMPTR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEMPTR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEMPTR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEMPTR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEMPTR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEMPTR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEMPTR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEMPTR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEMPTR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEMPTR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEMPTR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEMPTR_CACHE_VALUE ))
aes256cbc_memptr_m_axi_U(
    .AWVALID(m_axi_memptr_AWVALID),
    .AWREADY(m_axi_memptr_AWREADY),
    .AWADDR(m_axi_memptr_AWADDR),
    .AWID(m_axi_memptr_AWID),
    .AWLEN(m_axi_memptr_AWLEN),
    .AWSIZE(m_axi_memptr_AWSIZE),
    .AWBURST(m_axi_memptr_AWBURST),
    .AWLOCK(m_axi_memptr_AWLOCK),
    .AWCACHE(m_axi_memptr_AWCACHE),
    .AWPROT(m_axi_memptr_AWPROT),
    .AWQOS(m_axi_memptr_AWQOS),
    .AWREGION(m_axi_memptr_AWREGION),
    .AWUSER(m_axi_memptr_AWUSER),
    .WVALID(m_axi_memptr_WVALID),
    .WREADY(m_axi_memptr_WREADY),
    .WDATA(m_axi_memptr_WDATA),
    .WSTRB(m_axi_memptr_WSTRB),
    .WLAST(m_axi_memptr_WLAST),
    .WID(m_axi_memptr_WID),
    .WUSER(m_axi_memptr_WUSER),
    .ARVALID(m_axi_memptr_ARVALID),
    .ARREADY(m_axi_memptr_ARREADY),
    .ARADDR(m_axi_memptr_ARADDR),
    .ARID(m_axi_memptr_ARID),
    .ARLEN(m_axi_memptr_ARLEN),
    .ARSIZE(m_axi_memptr_ARSIZE),
    .ARBURST(m_axi_memptr_ARBURST),
    .ARLOCK(m_axi_memptr_ARLOCK),
    .ARCACHE(m_axi_memptr_ARCACHE),
    .ARPROT(m_axi_memptr_ARPROT),
    .ARQOS(m_axi_memptr_ARQOS),
    .ARREGION(m_axi_memptr_ARREGION),
    .ARUSER(m_axi_memptr_ARUSER),
    .RVALID(m_axi_memptr_RVALID),
    .RREADY(m_axi_memptr_RREADY),
    .RDATA(m_axi_memptr_RDATA),
    .RLAST(m_axi_memptr_RLAST),
    .RID(m_axi_memptr_RID),
    .RUSER(m_axi_memptr_RUSER),
    .RRESP(m_axi_memptr_RRESP),
    .BVALID(m_axi_memptr_BVALID),
    .BREADY(m_axi_memptr_BREADY),
    .BRESP(m_axi_memptr_BRESP),
    .BID(m_axi_memptr_BID),
    .BUSER(m_axi_memptr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(memptr_ARVALID),
    .I_ARREADY(memptr_ARREADY),
    .I_ARADDR(memptr_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(memptr_ARLEN),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(memptr_RVALID),
    .I_RREADY(memptr_RREADY),
    .I_RDATA(memptr_RDATA),
    .I_RID(memptr_RID),
    .I_RUSER(memptr_RUSER),
    .I_RRESP(memptr_RRESP),
    .I_RLAST(memptr_RLAST),
    .I_AWVALID(memptr_AWVALID),
    .I_AWREADY(memptr_AWREADY),
    .I_AWADDR(memptr_AWADDR),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_10),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(memptr_WVALID),
    .I_WREADY(memptr_WREADY),
    .I_WDATA(reg_592),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'b1),
    .I_BVALID(memptr_BVALID),
    .I_BREADY(memptr_BREADY),
    .I_BRESP(memptr_BRESP),
    .I_BID(memptr_BID),
    .I_BUSER(memptr_BUSER)
);

aes256cbc_buf #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .we0(buf_we0),
    .d0(buf_d0),
    .q0(buf_q0),
    .address1(buf_address1),
    .ce1(buf_ce1),
    .we1(buf_we1),
    .d1(buf_d1),
    .q1(buf_q1)
);

aes256_encrypt_ecb grp_aes256_encrypt_ecb_fu_544(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes256_encrypt_ecb_fu_544_ap_start),
    .ap_done(grp_aes256_encrypt_ecb_fu_544_ap_done),
    .ap_idle(grp_aes256_encrypt_ecb_fu_544_ap_idle),
    .ap_ready(grp_aes256_encrypt_ecb_fu_544_ap_ready),
    .buf_r_address0(grp_aes256_encrypt_ecb_fu_544_buf_r_address0),
    .buf_r_ce0(grp_aes256_encrypt_ecb_fu_544_buf_r_ce0),
    .buf_r_we0(grp_aes256_encrypt_ecb_fu_544_buf_r_we0),
    .buf_r_d0(grp_aes256_encrypt_ecb_fu_544_buf_r_d0),
    .buf_r_q0(buf_q0),
    .buf_r_address1(grp_aes256_encrypt_ecb_fu_544_buf_r_address1),
    .buf_r_ce1(grp_aes256_encrypt_ecb_fu_544_buf_r_ce1),
    .buf_r_we1(grp_aes256_encrypt_ecb_fu_544_buf_r_we1),
    .buf_r_d1(grp_aes256_encrypt_ecb_fu_544_buf_r_d1),
    .buf_r_q1(buf_q1),
    .ctx_enckey_address0(grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address0),
    .ctx_enckey_ce0(grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce0),
    .ctx_enckey_q0(ctx_enckey_q0),
    .ctx_enckey_address1(grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address1),
    .ctx_enckey_ce1(grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce1),
    .ctx_enckey_q1(ctx_enckey_q1),
    .ctx_key_address0(grp_aes256_encrypt_ecb_fu_544_ctx_key_address0),
    .ctx_key_ce0(grp_aes256_encrypt_ecb_fu_544_ctx_key_ce0),
    .ctx_key_we0(grp_aes256_encrypt_ecb_fu_544_ctx_key_we0),
    .ctx_key_d0(grp_aes256_encrypt_ecb_fu_544_ctx_key_d0),
    .ctx_key_q0(ctx_key_q0),
    .ctx_key_address1(grp_aes256_encrypt_ecb_fu_544_ctx_key_address1),
    .ctx_key_ce1(grp_aes256_encrypt_ecb_fu_544_ctx_key_ce1),
    .ctx_key_we1(grp_aes256_encrypt_ecb_fu_544_ctx_key_we1),
    .ctx_key_d1(grp_aes256_encrypt_ecb_fu_544_ctx_key_d1),
    .ctx_key_q1(ctx_key_q1)
);

aes256_decrypt_ecb grp_aes256_decrypt_ecb_fu_555(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes256_decrypt_ecb_fu_555_ap_start),
    .ap_done(grp_aes256_decrypt_ecb_fu_555_ap_done),
    .ap_idle(grp_aes256_decrypt_ecb_fu_555_ap_idle),
    .ap_ready(grp_aes256_decrypt_ecb_fu_555_ap_ready),
    .buf_r_address0(grp_aes256_decrypt_ecb_fu_555_buf_r_address0),
    .buf_r_ce0(grp_aes256_decrypt_ecb_fu_555_buf_r_ce0),
    .buf_r_we0(grp_aes256_decrypt_ecb_fu_555_buf_r_we0),
    .buf_r_d0(grp_aes256_decrypt_ecb_fu_555_buf_r_d0),
    .buf_r_q0(buf_q0),
    .buf_r_address1(grp_aes256_decrypt_ecb_fu_555_buf_r_address1),
    .buf_r_ce1(grp_aes256_decrypt_ecb_fu_555_buf_r_ce1),
    .buf_r_we1(grp_aes256_decrypt_ecb_fu_555_buf_r_we1),
    .buf_r_d1(grp_aes256_decrypt_ecb_fu_555_buf_r_d1),
    .buf_r_q1(buf_q1),
    .ctx_deckey_address0(grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address0),
    .ctx_deckey_ce0(grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce0),
    .ctx_deckey_q0(ctx_deckey_q0),
    .ctx_deckey_address1(grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address1),
    .ctx_deckey_ce1(grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce1),
    .ctx_deckey_q1(ctx_deckey_q1),
    .ctx_key_address0(grp_aes256_decrypt_ecb_fu_555_ctx_key_address0),
    .ctx_key_ce0(grp_aes256_decrypt_ecb_fu_555_ctx_key_ce0),
    .ctx_key_we0(grp_aes256_decrypt_ecb_fu_555_ctx_key_we0),
    .ctx_key_d0(grp_aes256_decrypt_ecb_fu_555_ctx_key_d0),
    .ctx_key_q0(ctx_key_q0),
    .ctx_key_address1(grp_aes256_decrypt_ecb_fu_555_ctx_key_address1),
    .ctx_key_ce1(grp_aes256_decrypt_ecb_fu_555_ctx_key_ce1),
    .ctx_key_we1(grp_aes256_decrypt_ecb_fu_555_ctx_key_we1),
    .ctx_key_d1(grp_aes256_decrypt_ecb_fu_555_ctx_key_d1),
    .ctx_key_q1(ctx_key_q1)
);

aes_expandEncKey grp_aes_expandEncKey_fu_568(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_expandEncKey_fu_568_ap_start),
    .ap_done(grp_aes_expandEncKey_fu_568_ap_done),
    .ap_idle(grp_aes_expandEncKey_fu_568_ap_idle),
    .ap_ready(grp_aes_expandEncKey_fu_568_ap_ready),
    .k_address0(grp_aes_expandEncKey_fu_568_k_address0),
    .k_ce0(grp_aes_expandEncKey_fu_568_k_ce0),
    .k_we0(grp_aes_expandEncKey_fu_568_k_we0),
    .k_d0(grp_aes_expandEncKey_fu_568_k_d0),
    .k_q0(ctx_deckey_q0),
    .k_address1(grp_aes_expandEncKey_fu_568_k_address1),
    .k_ce1(grp_aes_expandEncKey_fu_568_k_ce1),
    .k_we1(grp_aes_expandEncKey_fu_568_k_we1),
    .k_d1(grp_aes_expandEncKey_fu_568_k_d1),
    .k_q1(ctx_deckey_q1),
    .rc_read(rcon_i_reg_521),
    .ap_return(grp_aes_expandEncKey_fu_568_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond3_fu_637_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((mode_read_reg_906 == ap_const_lv3_4) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & (1'b0 == exitcond3_fu_637_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((mode_read_reg_906 == ap_const_lv3_4) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond3_fu_637_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((mode_read_reg_906 == ap_const_lv3_4) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond2_fu_654_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((mode_read_reg_906 == ap_const_lv3_3) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & (1'b0 == exitcond2_fu_654_p2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if ((((mode_read_reg_906 == ap_const_lv3_3) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond2_fu_654_p2)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((mode_read_reg_906 == ap_const_lv3_3) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond1_fu_671_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((mode_read_reg_906 == ap_const_lv3_2) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & (1'b0 == exitcond1_fu_671_p2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if ((((mode_read_reg_906 == ap_const_lv3_2) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond1_fu_671_p2)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((mode_read_reg_906 == ap_const_lv3_2) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b0 == exitcond4_fu_750_p2))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_141_fu_723_p2) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b0 == exitcond4_fu_750_p2))) begin
            ap_enable_reg_pp3_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_141_fu_723_p2) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY))) | ((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b0 == exitcond4_fu_750_p2)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_141_fu_723_p2) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & ~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond_fu_767_p2))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((mode_read_reg_906 == ap_const_lv3_1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & ~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b0 == exitcond_fu_767_p2))) begin
            ap_enable_reg_pp4_iter1 <= 1'b1;
        end else if ((((mode_read_reg_906 == ap_const_lv3_1) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_pp4_stage0) & ~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond_fu_767_p2)))) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0))) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((mode_read_reg_906 == ap_const_lv3_1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b0 == exitcond9_fu_829_p2))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == tmp_135_fu_802_p2) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b0 == exitcond9_fu_829_p2))) begin
            ap_enable_reg_pp5_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == tmp_135_fu_802_p2) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY))) | ((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b0 == exitcond9_fu_829_p2)))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY))) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == tmp_135_fu_802_p2) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state21) & ~(1'b0 == tmp_131_fu_688_p2))) begin
            ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes256_decrypt_ecb_fu_555_ap_ready)) begin
            ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state40) & ~(1'b0 == tmp_130_fu_784_p2))) begin
            ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes256_encrypt_ecb_fu_544_ap_ready)) begin
            ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes_expandEncKey_fu_568_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state57) & (1'b0 == tmp_212_i_fu_880_p2))) begin
            ap_reg_grp_aes_expandEncKey_fu_568_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_expandEncKey_fu_568_ap_ready)) begin
            ap_reg_grp_aes_expandEncKey_fu_568_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_memptr_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_4) & ~(((mode_read_reg_906 == ap_const_lv3_4) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_3) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_2) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_1) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)))) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_3) & ~(((mode_read_reg_906 == ap_const_lv3_4) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_3) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_2) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_1) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)))) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_2) & ~(((mode_read_reg_906 == ap_const_lv3_4) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_3) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_2) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_1) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)))) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_1) & ~(((mode_read_reg_906 == ap_const_lv3_4) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_3) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_2) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_1) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)))))) begin
            ap_reg_ioackin_memptr_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_4) & (1'b1 == memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_3) & (1'b1 == memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_2) & (1'b1 == memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_1) & (1'b1 == memptr_ARREADY)))) begin
            ap_reg_ioackin_memptr_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_memptr_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_141_fu_723_p2) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY))) | ((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == tmp_135_fu_802_p2) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY))))) begin
            ap_reg_ioackin_memptr_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_141_fu_723_p2) & (1'b1 == memptr_AWREADY)) | ((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == tmp_135_fu_802_p2) & (1'b1 == memptr_AWREADY)))) begin
            ap_reg_ioackin_memptr_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_memptr_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY))) | ((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY))))) begin
            ap_reg_ioackin_memptr_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b1 == memptr_WREADY)) | ((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b1 == memptr_WREADY)))) begin
            ap_reg_ioackin_memptr_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & ~(1'b0 == tmp_i_fu_863_p2))) begin
        i_10_reg_533 <= ap_const_lv3_7;
    end else if (((1'b1 == ap_CS_fsm_state58) & ~(1'b0 == grp_aes_expandEncKey_fu_568_ap_done))) begin
        i_10_reg_533 <= phitmp_i_reg_1140;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_1_reg_466 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        i_1_reg_466 <= i_8_reg_1047;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_2_reg_477 <= i_12_reg_1066;
    end else if (((1'b1 == ap_CS_fsm_state42) & ~(1'b0 == grp_aes256_encrypt_ecb_fu_544_ap_done))) begin
        i_2_reg_477 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_3_reg_410 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_3_reg_410 <= i_9_reg_964;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_4_reg_421 <= i_11_reg_982;
    end else if (((1'b1 == ap_CS_fsm_state23) & ~(1'b0 == grp_aes256_decrypt_ecb_fu_555_ap_done))) begin
        i_4_reg_421 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & ~(1'b0 == tmp_136_fu_705_p2))) begin
        i_5_reg_432 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        i_5_reg_432 <= i_13_reg_1001;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & ~(1'b0 == tmp_124_fu_846_p2))) begin
        i_i_reg_510 <= ap_const_lv6_0;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        i_i_reg_510 <= i_7_reg_1121;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (mode_read_read_fu_156_p2 == ap_const_lv3_0))) begin
        i_reg_499 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        i_reg_499 <= i_6_reg_1103;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)))) begin
        indvar1_reg_398 <= indvar_next1_reg_956;
    end else if (((mode_read_reg_906 == ap_const_lv3_2) & (1'b1 == ap_CS_fsm_state8))) begin
        indvar1_reg_398 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)))) begin
        indvar2_reg_386 <= indvar_next2_reg_947;
    end else if (((mode_read_reg_906 == ap_const_lv3_3) & (1'b1 == ap_CS_fsm_state8))) begin
        indvar2_reg_386 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)))) begin
        indvar3_reg_374 <= indvar_next3_reg_938;
    end else if (((mode_read_reg_906 == ap_const_lv3_4) & (1'b1 == ap_CS_fsm_state8))) begin
        indvar3_reg_374 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond4_fu_750_p2))) begin
        indvar4_reg_443 <= indvar_next4_fu_756_p2;
    end else if (((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_141_fu_723_p2) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
        indvar4_reg_443 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp5_iter0) & (1'b0 == exitcond9_fu_829_p2))) begin
        indvar7_reg_488 <= indvar_next8_fu_835_p2;
    end else if (((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == tmp_135_fu_802_p2) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
        indvar7_reg_488 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & ~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)))) begin
        indvar_reg_454 <= indvar_next_reg_1039;
    end else if (((mode_read_reg_906 == ap_const_lv3_1) & (1'b1 == ap_CS_fsm_state8))) begin
        indvar_reg_454 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & ~(1'b0 == tmp_i_fu_863_p2))) begin
        rcon_i_reg_521 <= ap_const_lv8_1;
    end else if (((1'b1 == ap_CS_fsm_state58) & ~(1'b0 == grp_aes_expandEncKey_fu_568_ap_done))) begin
        rcon_i_reg_521 <= grp_aes_expandEncKey_fu_568_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp0_iter1_exitcond3_reg_934 <= exitcond3_reg_934;
        ap_pipeline_reg_pp0_iter1_indvar3_reg_374 <= indvar3_reg_374;
        exitcond3_reg_934 <= exitcond3_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp1_iter1_exitcond2_reg_943 <= exitcond2_reg_943;
        ap_pipeline_reg_pp1_iter1_indvar2_reg_386 <= indvar2_reg_386;
        exitcond2_reg_943 <= exitcond2_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp2_iter1_exitcond1_reg_952 <= exitcond1_reg_952;
        ap_pipeline_reg_pp2_iter1_indvar1_reg_398 <= indvar1_reg_398;
        exitcond1_reg_952 <= exitcond1_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)))) begin
        ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021 <= exitcond4_reg_1021;
        exitcond4_reg_1021 <= exitcond4_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & ~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp4_iter1_exitcond_reg_1035 <= exitcond_reg_1035;
        ap_pipeline_reg_pp4_iter1_indvar_reg_454 <= indvar_reg_454;
        exitcond_reg_1035 <= exitcond_fu_767_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)))) begin
        ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086 <= exitcond9_reg_1086;
        exitcond9_reg_1086 <= exitcond9_fu_829_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (1'b0 == tmp_130_fu_784_p2))) begin
        buf_addr_5_reg_1052 <= tmp_132_fu_796_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == tmp_136_fu_705_p2))) begin
        buf_addr_8_reg_987 <= tmp_139_fu_717_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_11_reg_982 <= i_11_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
        i_12_reg_1066 <= i_12_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
        i_13_reg_1001 <= i_13_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        i_6_reg_1103 <= i_6_fu_852_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        i_7_reg_1121 <= i_7_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i_8_reg_1047 <= i_8_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_9_reg_964 <= i_9_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        inbuf_addr_read_reg_898 <= inbuf_addr;
        mode_read_reg_906 <= mode;
        outbuf_addr_read_reg_892 <= outbuf_addr;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        indvar_next1_reg_956 <= indvar_next1_fu_677_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        indvar_next2_reg_947 <= indvar_next2_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_next3_reg_938 <= indvar_next3_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & ~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp4_iter0))) begin
        indvar_next_reg_1039 <= indvar_next_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) & (1'b0 == tmp_212_i_fu_880_p2))) begin
        phitmp_i_reg_1140 <= phitmp_i_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & ~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0))))) begin
        reg_585 <= memptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b0 == exitcond4_reg_1021)) | ((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_enable_reg_pp5_iter1) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b0 == exitcond9_reg_1086)))) begin
        reg_592 <= buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (1'b0 == tmp_124_fu_846_p2))) begin
        tmp_125_reg_1108[4 : 0] <= tmp_125_fu_858_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'b0 == tmp_131_fu_688_p2))) begin
        tmp_134_reg_969[4 : 0] <= tmp_134_fu_700_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'b0 == tmp_135_fu_802_p2) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
        tmp_138_reg_1071[4 : 0] <= tmp_138_fu_814_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_141_fu_723_p2) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
        tmp_144_reg_1006[4 : 0] <= tmp_144_fu_735_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (1'b0 == tmp_i_fu_863_p2))) begin
        tmp_i_8_reg_1126[5 : 0] <= tmp_i_8_fu_875_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & ~((mode_read_reg_906 == ap_const_lv3_2) & (memptr_BVALID == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & ~((mode_read_reg_906 == ap_const_lv3_2) & (memptr_BVALID == 1'b0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_memptr_ARREADY)) begin
        ap_sig_ioackin_memptr_ARREADY = memptr_ARREADY;
    end else begin
        ap_sig_ioackin_memptr_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_memptr_AWREADY)) begin
        ap_sig_ioackin_memptr_AWREADY = memptr_AWREADY;
    end else begin
        ap_sig_ioackin_memptr_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_memptr_WREADY)) begin
        ap_sig_ioackin_memptr_WREADY = memptr_WREADY;
    end else begin
        ap_sig_ioackin_memptr_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_enable_reg_pp5_iter0))) begin
        buf_address0 = tmp_142_fu_841_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        buf_address0 = tmp_138_fu_814_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        buf_address0 = buf_addr_5_reg_1052;
    end else if (((1'b1 == ap_CS_fsm_state40) & (1'b0 == tmp_130_fu_784_p2))) begin
        buf_address0 = tmp_132_fu_796_p1;
    end else if ((1'b1 == ap_enable_reg_pp4_iter2)) begin
        buf_address0 = tmp_126_fu_779_p1;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        buf_address0 = tmp_145_fu_762_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buf_address0 = buf_addr_8_reg_987;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_address0 = tmp_139_fu_717_p1;
    end else if (((1'b1 == ap_CS_fsm_state21) & (1'b0 == tmp_131_fu_688_p2))) begin
        buf_address0 = tmp_134_fu_700_p1;
    end else if ((1'b1 == ap_enable_reg_pp2_iter2)) begin
        buf_address0 = tmp_127_fu_683_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_address0 = grp_aes256_decrypt_ecb_fu_555_buf_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_address0 = grp_aes256_encrypt_ecb_fu_544_buf_r_address0;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_address1 = grp_aes256_decrypt_ecb_fu_555_buf_r_address1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_address1 = grp_aes256_encrypt_ecb_fu_544_buf_r_address1;
    end else begin
        buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state21) & (1'b0 == tmp_131_fu_688_p2)) | (1'b1 == ap_CS_fsm_state24) | ((1'b1 == ap_CS_fsm_pp3_stage0) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp3_iter0)) | ((1'b1 == ap_CS_fsm_state40) & (1'b0 == tmp_130_fu_784_p2)) | ((1'b1 == ap_CS_fsm_state43) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY))) | ((1'b1 == ap_CS_fsm_pp5_stage0) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp5_iter0)) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state41) | (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter2)) | (~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp4_iter2)))) begin
        buf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_ce0 = grp_aes256_decrypt_ecb_fu_555_buf_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_ce0 = grp_aes256_encrypt_ecb_fu_544_buf_r_ce0;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_ce1 = grp_aes256_decrypt_ecb_fu_555_buf_r_ce1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_ce1 = grp_aes256_encrypt_ecb_fu_544_buf_r_ce1;
    end else begin
        buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state41))) begin
        buf_d0 = grp_fu_578_p2;
    end else if (((1'b1 == ap_enable_reg_pp2_iter2) | (1'b1 == ap_enable_reg_pp4_iter2))) begin
        buf_d0 = reg_585;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_d0 = grp_aes256_decrypt_ecb_fu_555_buf_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_d0 = grp_aes256_encrypt_ecb_fu_544_buf_r_d0;
    end else begin
        buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_d1 = grp_aes256_decrypt_ecb_fu_555_buf_r_d1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_d1 = grp_aes256_encrypt_ecb_fu_544_buf_r_d1;
    end else begin
        buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state41) | (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_952)) | (~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp4_iter2) & (1'b0 == ap_pipeline_reg_pp4_iter1_exitcond_reg_1035)))) begin
        buf_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_we0 = grp_aes256_decrypt_ecb_fu_555_buf_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_we0 = grp_aes256_encrypt_ecb_fu_544_buf_r_we0;
    end else begin
        buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_we1 = grp_aes256_decrypt_ecb_fu_555_buf_r_we1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_we1 = grp_aes256_encrypt_ecb_fu_544_buf_r_we1;
    end else begin
        buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        ctx_deckey_address0 = tmp_i_8_reg_1126;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        ctx_deckey_address0 = grp_aes_expandEncKey_fu_568_k_address0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_deckey_address0 = grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address0;
    end else begin
        ctx_deckey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        ctx_deckey_address1 = grp_aes_expandEncKey_fu_568_k_address1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_deckey_address1 = grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address1;
    end else begin
        ctx_deckey_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        ctx_deckey_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        ctx_deckey_ce0 = grp_aes_expandEncKey_fu_568_k_ce0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_deckey_ce0 = grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce0;
    end else begin
        ctx_deckey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        ctx_deckey_ce1 = grp_aes_expandEncKey_fu_568_k_ce1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_deckey_ce1 = grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce1;
    end else begin
        ctx_deckey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        ctx_deckey_d0 = key_q0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        ctx_deckey_d0 = grp_aes_expandEncKey_fu_568_k_d0;
    end else begin
        ctx_deckey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        ctx_deckey_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        ctx_deckey_we0 = grp_aes_expandEncKey_fu_568_k_we0;
    end else begin
        ctx_deckey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        ctx_deckey_we1 = grp_aes_expandEncKey_fu_568_k_we1;
    end else begin
        ctx_deckey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        ctx_enckey_address0 = tmp_i_8_reg_1126;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_enckey_address0 = grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address0;
    end else begin
        ctx_enckey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        ctx_enckey_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_enckey_ce0 = grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce0;
    end else begin
        ctx_enckey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_enckey_ce1 = grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce1;
    end else begin
        ctx_enckey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        ctx_enckey_we0 = 1'b1;
    end else begin
        ctx_enckey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_key_address0 = grp_aes256_decrypt_ecb_fu_555_ctx_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_key_address0 = grp_aes256_encrypt_ecb_fu_544_ctx_key_address0;
    end else begin
        ctx_key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_key_address1 = grp_aes256_decrypt_ecb_fu_555_ctx_key_address1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_key_address1 = grp_aes256_encrypt_ecb_fu_544_ctx_key_address1;
    end else begin
        ctx_key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_key_ce0 = grp_aes256_decrypt_ecb_fu_555_ctx_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_key_ce0 = grp_aes256_encrypt_ecb_fu_544_ctx_key_ce0;
    end else begin
        ctx_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_key_ce1 = grp_aes256_decrypt_ecb_fu_555_ctx_key_ce1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_key_ce1 = grp_aes256_encrypt_ecb_fu_544_ctx_key_ce1;
    end else begin
        ctx_key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_key_d0 = grp_aes256_decrypt_ecb_fu_555_ctx_key_d0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_key_d0 = grp_aes256_encrypt_ecb_fu_544_ctx_key_d0;
    end else begin
        ctx_key_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_key_d1 = grp_aes256_decrypt_ecb_fu_555_ctx_key_d1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_key_d1 = grp_aes256_encrypt_ecb_fu_544_ctx_key_d1;
    end else begin
        ctx_key_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_key_we0 = grp_aes256_decrypt_ecb_fu_555_ctx_key_we0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_key_we0 = grp_aes256_encrypt_ecb_fu_544_ctx_key_we0;
    end else begin
        ctx_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_key_we1 = grp_aes256_decrypt_ecb_fu_555_ctx_key_we1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ctx_key_we1 = grp_aes256_encrypt_ecb_fu_544_ctx_key_we1;
    end else begin
        ctx_key_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952))) begin
        indvar1_phi_fu_402_p4 = indvar_next1_reg_956;
    end else begin
        indvar1_phi_fu_402_p4 = indvar1_reg_398;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943))) begin
        indvar2_phi_fu_390_p4 = indvar_next2_reg_947;
    end else begin
        indvar2_phi_fu_390_p4 = indvar2_reg_386;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934))) begin
        indvar3_phi_fu_378_p4 = indvar_next3_reg_938;
    end else begin
        indvar3_phi_fu_378_p4 = indvar3_reg_374;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0))) begin
        indvar_phi_fu_458_p4 = indvar_next_reg_1039;
    end else begin
        indvar_phi_fu_458_p4 = indvar_reg_454;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        iv_address0 = tmp_125_fu_858_p1;
    end else if ((1'b1 == ap_enable_reg_pp1_iter2)) begin
        iv_address0 = tmp_128_fu_666_p1;
    end else begin
        iv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2)))) begin
        iv_ce0 = 1'b1;
    end else begin
        iv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'b0 == ap_pipeline_reg_pp1_iter1_exitcond2_reg_943))) begin
        iv_we0 = 1'b1;
    end else begin
        iv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        key_address0 = tmp_i_8_fu_875_p1;
    end else if ((1'b1 == ap_enable_reg_pp0_iter2)) begin
        key_address0 = tmp_129_fu_649_p1;
    end else begin
        key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond3_reg_934))) begin
        key_we0 = 1'b1;
    end else begin
        key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        lastbuf_address0 = tmp_144_fu_735_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        lastbuf_address0 = tmp_134_reg_969;
    end else begin
        lastbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state26) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY))) | (1'b1 == ap_CS_fsm_state22))) begin
        lastbuf_ce0 = 1'b1;
    end else begin
        lastbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        lastbuf_we0 = 1'b1;
    end else begin
        lastbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_memptr_ARREADY))) begin
        if ((mode_read_reg_906 == ap_const_lv3_1)) begin
            memptr_ARADDR = tmp_s_fu_627_p1;
        end else if ((mode_read_reg_906 == ap_const_lv3_2)) begin
            memptr_ARADDR = tmp_121_fu_617_p1;
        end else if ((mode_read_reg_906 == ap_const_lv3_3)) begin
            memptr_ARADDR = tmp_122_fu_607_p1;
        end else if ((mode_read_reg_906 == ap_const_lv3_4)) begin
            memptr_ARADDR = tmp_123_fu_597_p1;
        end else begin
            memptr_ARADDR = 'bx;
        end
    end else begin
        memptr_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_3) & (1'b0 == ap_reg_ioackin_memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_2) & (1'b0 == ap_reg_ioackin_memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_1) & (1'b0 == ap_reg_ioackin_memptr_ARREADY)))) begin
        memptr_ARLEN = ap_const_lv32_10;
    end else if (((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_4) & (1'b0 == ap_reg_ioackin_memptr_ARREADY))) begin
        memptr_ARLEN = ap_const_lv32_20;
    end else begin
        memptr_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_4) & (1'b0 == ap_reg_ioackin_memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_3) & (1'b0 == ap_reg_ioackin_memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_2) & (1'b0 == ap_reg_ioackin_memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_1) & (1'b0 == ap_reg_ioackin_memptr_ARREADY)))) begin
        memptr_ARVALID = 1'b1;
    end else begin
        memptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_memptr_AWREADY)) begin
        if (((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == tmp_135_fu_802_p2))) begin
            memptr_AWADDR = tmp_137_fu_819_p1;
        end else if (((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_141_fu_723_p2))) begin
            memptr_AWADDR = tmp_143_fu_740_p1;
        end else begin
            memptr_AWADDR = 'bx;
        end
    end else begin
        memptr_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_reg_ioackin_memptr_AWREADY)) | ((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_reg_ioackin_memptr_AWREADY)))) begin
        memptr_AWVALID = 1'b1;
    end else begin
        memptr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((mode_read_reg_906 == ap_const_lv3_2) & (1'b1 == ap_CS_fsm_state35) & ~((mode_read_reg_906 == ap_const_lv3_2) & (memptr_BVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_state52) & ~(memptr_BVALID == 1'b0)))) begin
        memptr_BREADY = 1'b1;
    end else begin
        memptr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & ~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0))))) begin
        memptr_RREADY = 1'b1;
    end else begin
        memptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_reg_ioackin_memptr_WREADY)) | ((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_reg_ioackin_memptr_WREADY)))) begin
        memptr_WVALID = 1'b1;
    end else begin
        memptr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_1)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_3)) | ((1'b1 == ap_CS_fsm_state2) & (mode_read_reg_906 == ap_const_lv3_4)))) begin
        memptr_blk_n_AR = m_axi_memptr_ARREADY;
    end else begin
        memptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == tmp_135_fu_802_p2)) | ((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_141_fu_723_p2)))) begin
        memptr_blk_n_AW = m_axi_memptr_AWREADY;
    end else begin
        memptr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | ((mode_read_reg_906 == ap_const_lv3_2) & (1'b1 == ap_CS_fsm_state35)))) begin
        memptr_blk_n_B = m_axi_memptr_BVALID;
    end else begin
        memptr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934)))) begin
        memptr_blk_n_R = m_axi_memptr_RVALID;
    end else begin
        memptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021)))) begin
        memptr_blk_n_W = m_axi_memptr_WREADY;
    end else begin
        memptr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        xorv_address0 = tmp_125_reg_1108;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        xorv_address0 = tmp_138_reg_1071;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        xorv_address0 = tmp_132_fu_796_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        xorv_address0 = tmp_144_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        xorv_address0 = tmp_139_fu_717_p1;
    end else begin
        xorv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state54))) begin
        xorv_ce0 = 1'b1;
    end else begin
        xorv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        xorv_d0 = iv_q0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        xorv_d0 = buf_q0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        xorv_d0 = lastbuf_q0;
    end else begin
        xorv_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state54))) begin
        xorv_we0 = 1'b1;
    end else begin
        xorv_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~(ap_start == 1'b0) & (mode_read_read_fu_156_p2 == ap_const_lv3_0))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else if ((~(ap_start == 1'b0) & ~(mode_read_read_fu_156_p2 == ap_const_lv3_0) & ~(ap_const_lv3_1 == mode_read_read_fu_156_p2) & ~(ap_const_lv3_2 == mode_read_read_fu_156_p2) & ~(ap_const_lv3_3 == mode_read_read_fu_156_p2) & ~(ap_const_lv3_4 == mode_read_read_fu_156_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else if ((~(ap_start == 1'b0) & ((ap_const_lv3_1 == mode_read_read_fu_156_p2) | (ap_const_lv3_2 == mode_read_read_fu_156_p2) | (ap_const_lv3_3 == mode_read_read_fu_156_p2) | (ap_const_lv3_4 == mode_read_read_fu_156_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((mode_read_reg_906 == ap_const_lv3_4) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_3) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_2) & (1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((mode_read_reg_906 == ap_const_lv3_1) & (1'b0 == ap_sig_ioackin_memptr_ARREADY))) & ((mode_read_reg_906 == ap_const_lv3_1) | (mode_read_reg_906 == ap_const_lv3_2) | (mode_read_reg_906 == ap_const_lv3_3) | (mode_read_reg_906 == ap_const_lv3_4)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((mode_read_reg_906 == ap_const_lv3_1)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((mode_read_reg_906 == ap_const_lv3_2)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((mode_read_reg_906 == ap_const_lv3_3)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond3_fu_637_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond3_reg_934) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond3_fu_637_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2) & ~(1'b1 == ap_enable_reg_pp1_iter1)) & ~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond2_fu_654_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2) & ~(1'b1 == ap_enable_reg_pp1_iter1)) | (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_943) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond2_fu_654_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter2) & ~(1'b1 == ap_enable_reg_pp2_iter1)) & ~(~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond1_fu_671_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter2) & ~(1'b1 == ap_enable_reg_pp2_iter1)) | (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_952) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond1_fu_671_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (~(1'b0 == tmp_131_fu_688_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state23 : begin
            if (~(1'b0 == grp_aes256_decrypt_ecb_fu_555_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (~(1'b0 == tmp_136_fu_705_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state26 : begin
            if ((~(1'b0 == tmp_141_fu_723_p2) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == tmp_141_fu_723_p2) & ~(~(1'b0 == tmp_141_fu_723_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp3_iter2) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b1 == ap_enable_reg_pp3_iter1)) & ~(~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp3_iter0) & ~(1'b0 == exitcond4_fu_750_p2) & ~(1'b1 == ap_enable_reg_pp3_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp3_iter2) & ~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b1 == ap_enable_reg_pp3_iter1)) | (~((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp3_iter0) & ~(1'b0 == exitcond4_fu_750_p2) & ~(1'b1 == ap_enable_reg_pp3_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (~((mode_read_reg_906 == ap_const_lv3_2) & (memptr_BVALID == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp4_iter2) & ~(1'b1 == ap_enable_reg_pp4_iter1)) & ~(~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp4_iter0) & ~(1'b0 == exitcond_fu_767_p2) & ~(1'b1 == ap_enable_reg_pp4_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp4_iter2) & ~(1'b1 == ap_enable_reg_pp4_iter1)) | (~((1'b1 == ap_enable_reg_pp4_iter1) & (exitcond_reg_1035 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp4_iter0) & ~(1'b0 == exitcond_fu_767_p2) & ~(1'b1 == ap_enable_reg_pp4_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (~(1'b0 == tmp_130_fu_784_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state42 : begin
            if (~(1'b0 == grp_aes256_encrypt_ecb_fu_544_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if ((~(1'b0 == tmp_135_fu_802_p2) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((1'b0 == tmp_135_fu_802_p2) & ~(~(1'b0 == tmp_135_fu_802_p2) & (1'b0 == ap_sig_ioackin_memptr_AWREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp5_iter2) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b1 == ap_enable_reg_pp5_iter1)) & ~(~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp5_iter0) & ~(1'b0 == exitcond9_fu_829_p2) & ~(1'b1 == ap_enable_reg_pp5_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp5_iter2) & ~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b1 == ap_enable_reg_pp5_iter1)) | (~((1'b1 == ap_enable_reg_pp5_iter2) & (1'b0 == ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp5_iter0) & ~(1'b0 == exitcond9_fu_829_p2) & ~(1'b1 == ap_enable_reg_pp5_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (~(memptr_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (~(1'b0 == tmp_124_fu_846_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state55 : begin
            if (~(1'b0 == tmp_i_fu_863_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state57 : begin
            if (~(1'b0 == tmp_212_i_fu_880_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state58 : begin
            if (~(1'b0 == grp_aes_expandEncKey_fu_568_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state35 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state40 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state41 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state42 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state52 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state53 = ap_CS_fsm[ap_const_lv32_28];

assign ap_CS_fsm_state54 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state56 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state57 = ap_CS_fsm[ap_const_lv32_2C];

assign ap_CS_fsm_state58 = ap_CS_fsm[ap_const_lv32_2D];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_671_p2 = ((indvar1_phi_fu_402_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond2_fu_654_p2 = ((indvar2_phi_fu_390_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond3_fu_637_p2 = ((indvar3_phi_fu_378_p4 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond4_fu_750_p2 = ((indvar4_reg_443 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond9_fu_829_p2 = ((indvar7_reg_488 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_767_p2 = ((indvar_phi_fu_458_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign grp_aes256_decrypt_ecb_fu_555_ap_start = ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start;

assign grp_aes256_encrypt_ecb_fu_544_ap_start = ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start;

assign grp_aes_expandEncKey_fu_568_ap_start = ap_reg_grp_aes_expandEncKey_fu_568_ap_start;

assign grp_fu_578_p2 = (xorv_q0 ^ buf_q0);

assign i_11_fu_711_p2 = (i_4_reg_421 + ap_const_lv5_1);

assign i_12_fu_808_p2 = (i_2_reg_477 + ap_const_lv5_1);

assign i_13_fu_729_p2 = (i_5_reg_432 + ap_const_lv5_1);

assign i_6_fu_852_p2 = (i_reg_499 + ap_const_lv5_1);

assign i_7_fu_869_p2 = (i_i_reg_510 + ap_const_lv6_1);

assign i_8_fu_790_p2 = (i_1_reg_466 + ap_const_lv5_1);

assign i_9_fu_694_p2 = (i_3_reg_410 + ap_const_lv5_1);

assign indvar_next1_fu_677_p2 = (indvar1_phi_fu_402_p4 + ap_const_lv5_1);

assign indvar_next2_fu_660_p2 = (indvar2_phi_fu_390_p4 + ap_const_lv5_1);

assign indvar_next3_fu_643_p2 = (indvar3_phi_fu_378_p4 + ap_const_lv6_1);

assign indvar_next4_fu_756_p2 = (indvar4_reg_443 + ap_const_lv5_1);

assign indvar_next8_fu_835_p2 = (indvar7_reg_488 + ap_const_lv5_1);

assign indvar_next_fu_773_p2 = (indvar_phi_fu_458_p4 + ap_const_lv5_1);

assign mode_read_read_fu_156_p2 = mode;

assign phitmp_i_fu_886_p2 = ($signed(i_10_reg_533) + $signed(ap_const_lv3_7));

assign tmp_121_fu_617_p1 = inbuf_addr_read_reg_898;

assign tmp_122_fu_607_p1 = inbuf_addr_read_reg_898;

assign tmp_123_fu_597_p1 = inbuf_addr_read_reg_898;

assign tmp_124_fu_846_p2 = ((i_reg_499 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_125_fu_858_p1 = i_reg_499;

assign tmp_126_fu_779_p1 = ap_pipeline_reg_pp4_iter1_indvar_reg_454;

assign tmp_127_fu_683_p1 = ap_pipeline_reg_pp2_iter1_indvar1_reg_398;

assign tmp_128_fu_666_p1 = ap_pipeline_reg_pp1_iter1_indvar2_reg_386;

assign tmp_129_fu_649_p1 = ap_pipeline_reg_pp0_iter1_indvar3_reg_374;

assign tmp_130_fu_784_p2 = ((i_1_reg_466 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_131_fu_688_p2 = ((i_3_reg_410 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_132_fu_796_p1 = i_1_reg_466;

assign tmp_134_fu_700_p1 = i_3_reg_410;

assign tmp_135_fu_802_p2 = ((i_2_reg_477 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_136_fu_705_p2 = ((i_4_reg_421 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_137_fu_819_p1 = outbuf_addr_read_reg_892;

assign tmp_138_fu_814_p1 = i_2_reg_477;

assign tmp_139_fu_717_p1 = i_4_reg_421;

assign tmp_141_fu_723_p2 = ((i_5_reg_432 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_142_fu_841_p1 = indvar7_reg_488;

assign tmp_143_fu_740_p1 = outbuf_addr_read_reg_892;

assign tmp_144_fu_735_p1 = i_5_reg_432;

assign tmp_145_fu_762_p1 = indvar4_reg_443;

assign tmp_212_i_fu_880_p2 = ((i_10_reg_533 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_i_8_fu_875_p1 = i_i_reg_510;

assign tmp_i_fu_863_p2 = ((i_i_reg_510 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign tmp_s_fu_627_p1 = inbuf_addr_read_reg_898;

always @ (posedge ap_clk) begin
    tmp_134_reg_969[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_144_reg_1006[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_138_reg_1071[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_125_reg_1108[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_i_8_reg_1126[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //aes256cbc
