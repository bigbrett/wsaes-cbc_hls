// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_decrypt_ecb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1,
        buf_r_q1,
        ctx_deckey_address0,
        ctx_deckey_ce0,
        ctx_deckey_q0,
        ctx_deckey_address1,
        ctx_deckey_ce1,
        ctx_deckey_q1,
        ctx_key_address0,
        ctx_key_ce0,
        ctx_key_we0,
        ctx_key_d0,
        ctx_key_q0,
        ctx_key_address1,
        ctx_key_ce1,
        ctx_key_we1,
        ctx_key_d1,
        ctx_key_q1
);

parameter    ap_ST_fsm_state1 = 40'b1;
parameter    ap_ST_fsm_state2 = 40'b10;
parameter    ap_ST_fsm_state3 = 40'b100;
parameter    ap_ST_fsm_state4 = 40'b1000;
parameter    ap_ST_fsm_state5 = 40'b10000;
parameter    ap_ST_fsm_state6 = 40'b100000;
parameter    ap_ST_fsm_state7 = 40'b1000000;
parameter    ap_ST_fsm_state8 = 40'b10000000;
parameter    ap_ST_fsm_state9 = 40'b100000000;
parameter    ap_ST_fsm_state10 = 40'b1000000000;
parameter    ap_ST_fsm_state11 = 40'b10000000000;
parameter    ap_ST_fsm_state12 = 40'b100000000000;
parameter    ap_ST_fsm_state13 = 40'b1000000000000;
parameter    ap_ST_fsm_state14 = 40'b10000000000000;
parameter    ap_ST_fsm_state15 = 40'b100000000000000;
parameter    ap_ST_fsm_state16 = 40'b1000000000000000;
parameter    ap_ST_fsm_state17 = 40'b10000000000000000;
parameter    ap_ST_fsm_state18 = 40'b100000000000000000;
parameter    ap_ST_fsm_state19 = 40'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 40'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 40'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 40'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 40'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 40'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 40'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 40'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 40'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 40'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 40'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 40'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 40'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 40'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 40'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 40'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 40'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 40'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 40'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 40'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 40'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 40'b1000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv4_D = 4'b1101;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv6_10 = 6'b10000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_D = 64'b1101;
parameter    ap_const_lv64_9 = 64'b1001;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_B = 64'b1011;
parameter    ap_const_lv64_F = 64'b1111;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_E = 64'b1110;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv5_F = 5'b1111;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
input  [7:0] buf_r_q0;
output  [3:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [7:0] buf_r_d1;
input  [7:0] buf_r_q1;
output  [4:0] ctx_deckey_address0;
output   ctx_deckey_ce0;
input  [7:0] ctx_deckey_q0;
output  [4:0] ctx_deckey_address1;
output   ctx_deckey_ce1;
input  [7:0] ctx_deckey_q1;
output  [4:0] ctx_key_address0;
output   ctx_key_ce0;
output   ctx_key_we0;
output  [7:0] ctx_key_d0;
input  [7:0] ctx_key_q0;
output  [4:0] ctx_key_address1;
output   ctx_key_ce1;
output   ctx_key_we1;
output  [7:0] ctx_key_d1;
input  [7:0] ctx_key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] buf_r_address0;
reg buf_r_ce0;
reg buf_r_we0;
reg[7:0] buf_r_d0;
reg[3:0] buf_r_address1;
reg buf_r_ce1;
reg buf_r_we1;
reg[7:0] buf_r_d1;
reg ctx_deckey_ce0;
reg ctx_deckey_ce1;
reg[4:0] ctx_key_address0;
reg ctx_key_ce0;
reg ctx_key_we0;
reg[7:0] ctx_key_d0;
reg[4:0] ctx_key_address1;
reg ctx_key_ce1;
reg ctx_key_we1;
reg[7:0] ctx_key_d1;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [7:0] sboxinv_address0;
reg    sboxinv_ce0;
wire   [7:0] sboxinv_q0;
reg   [7:0] reg_351;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state26;
reg   [7:0] reg_356;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state31;
reg   [7:0] reg_363;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state27;
reg   [7:0] reg_370;
reg   [7:0] reg_375;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state28;
reg   [7:0] reg_380;
reg   [7:0] reg_385;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state29;
reg   [7:0] reg_390;
reg   [7:0] reg_395;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state30;
reg   [7:0] reg_400;
wire   [4:0] i_43_fu_405_p2;
reg   [4:0] i_43_reg_527;
wire   [0:0] ap_CS_fsm_state2;
wire   [63:0] tmp_i_31_fu_421_p1;
reg   [63:0] tmp_i_31_reg_535;
wire   [0:0] tmp_i_fu_415_p2;
reg   [3:0] buf_addr_40_reg_545;
wire   [63:0] tmp_214_i_fu_433_p1;
reg   [63:0] tmp_214_i_reg_551;
wire   [3:0] buf_addr_reg_561;
wire   [3:0] buf_addr_29_reg_566;
wire   [3:0] buf_addr_30_reg_571;
wire   [3:0] buf_addr_31_reg_576;
wire   [3:0] buf_addr_32_reg_581;
wire   [3:0] buf_addr_33_reg_586;
wire   [3:0] buf_addr_34_reg_591;
wire   [3:0] buf_addr_35_reg_596;
wire   [3:0] buf_addr_36_reg_601;
wire   [3:0] buf_addr_37_reg_606;
wire   [3:0] buf_addr_38_reg_611;
wire   [3:0] buf_addr_39_reg_616;
wire   [4:0] i_46_fu_445_p2;
reg   [4:0] i_46_reg_621;
wire   [0:0] ap_CS_fsm_state15;
reg   [3:0] buf_addr_41_reg_629;
wire   [0:0] tmp_i6_fu_455_p2;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] tmp_37_fu_482_p1;
reg   [0:0] tmp_37_reg_650;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] tmp_fu_476_p2;
wire   [4:0] i_49_fu_495_p2;
reg   [4:0] i_49_reg_659;
wire   [0:0] ap_CS_fsm_state37;
reg   [3:0] buf_addr_42_reg_667;
wire   [0:0] tmp_i1_fu_505_p2;
wire   [3:0] phitmp_fu_516_p2;
wire   [0:0] ap_CS_fsm_state38;
wire    grp_aes_expandDecKey_fu_325_ap_start;
wire    grp_aes_expandDecKey_fu_325_ap_done;
wire    grp_aes_expandDecKey_fu_325_ap_idle;
wire    grp_aes_expandDecKey_fu_325_ap_ready;
wire   [4:0] grp_aes_expandDecKey_fu_325_ctx_key_address0;
wire    grp_aes_expandDecKey_fu_325_ctx_key_ce0;
wire    grp_aes_expandDecKey_fu_325_ctx_key_we0;
wire   [7:0] grp_aes_expandDecKey_fu_325_ctx_key_d0;
wire   [4:0] grp_aes_expandDecKey_fu_325_ctx_key_address1;
wire    grp_aes_expandDecKey_fu_325_ctx_key_ce1;
wire    grp_aes_expandDecKey_fu_325_ctx_key_we1;
wire   [7:0] grp_aes_expandDecKey_fu_325_ctx_key_d1;
wire   [7:0] grp_aes_expandDecKey_fu_325_ap_return;
wire    grp_aes_mixColumns_inv_fu_334_ap_start;
wire    grp_aes_mixColumns_inv_fu_334_ap_done;
wire    grp_aes_mixColumns_inv_fu_334_ap_idle;
wire    grp_aes_mixColumns_inv_fu_334_ap_ready;
wire   [3:0] grp_aes_mixColumns_inv_fu_334_buf_r_address0;
wire    grp_aes_mixColumns_inv_fu_334_buf_r_ce0;
wire    grp_aes_mixColumns_inv_fu_334_buf_r_we0;
wire   [7:0] grp_aes_mixColumns_inv_fu_334_buf_r_d0;
wire   [3:0] grp_aes_mixColumns_inv_fu_334_buf_r_address1;
wire    grp_aes_mixColumns_inv_fu_334_buf_r_ce1;
wire    grp_aes_mixColumns_inv_fu_334_buf_r_we1;
wire   [7:0] grp_aes_mixColumns_inv_fu_334_buf_r_d1;
wire    grp_aes_addRoundKey_fu_340_ap_start;
wire    grp_aes_addRoundKey_fu_340_ap_done;
wire    grp_aes_addRoundKey_fu_340_ap_idle;
wire    grp_aes_addRoundKey_fu_340_ap_ready;
wire   [3:0] grp_aes_addRoundKey_fu_340_buf_r_address0;
wire    grp_aes_addRoundKey_fu_340_buf_r_ce0;
wire    grp_aes_addRoundKey_fu_340_buf_r_we0;
wire   [7:0] grp_aes_addRoundKey_fu_340_buf_r_d0;
wire   [4:0] grp_aes_addRoundKey_fu_340_key_address0;
wire    grp_aes_addRoundKey_fu_340_key_ce0;
reg   [5:0] grp_aes_addRoundKey_fu_340_key_offset;
reg   [4:0] i_i_reg_280;
wire   [0:0] ap_CS_fsm_state3;
reg   [4:0] i_i5_reg_291;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state17;
reg   [3:0] i_reg_302;
reg   [4:0] i_i3_reg_314;
wire   [0:0] ap_CS_fsm_state36;
wire   [0:0] ap_CS_fsm_state39;
reg    ap_reg_grp_aes_expandDecKey_fu_325_ap_start;
wire   [0:0] ap_CS_fsm_state20;
reg    ap_reg_grp_aes_mixColumns_inv_fu_334_ap_start;
wire   [0:0] ap_CS_fsm_state23;
wire   [0:0] ap_CS_fsm_state24;
reg    ap_reg_grp_aes_addRoundKey_fu_340_ap_start;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] ap_CS_fsm_state19;
wire   [0:0] ap_CS_fsm_state40;
wire   [0:0] ap_CS_fsm_state22;
wire   [63:0] tmp_i7_fu_461_p1;
wire   [63:0] tmp_32_i_fu_471_p1;
wire   [63:0] tmp_i3_fu_511_p1;
wire   [63:0] tmp_32_i1_fu_522_p1;
reg   [7:0] rcon_fu_68;
wire   [7:0] tmp_211_i_fu_438_p2;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state25;
wire   [0:0] ap_CS_fsm_state32;
wire   [0:0] ap_CS_fsm_state33;
wire   [0:0] ap_CS_fsm_state34;
wire   [0:0] ap_CS_fsm_state35;
wire  signed [7:0] i_46_cast_fu_411_p1;
wire   [4:0] tmp_213_i_fu_427_p2;
wire  signed [7:0] i_49_cast_fu_451_p1;
wire  signed [7:0] i_52_cast_fu_501_p1;
reg   [39:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'b1;
#0 ap_reg_grp_aes_expandDecKey_fu_325_ap_start = 1'b0;
#0 ap_reg_grp_aes_mixColumns_inv_fu_334_ap_start = 1'b0;
#0 ap_reg_grp_aes_addRoundKey_fu_340_ap_start = 1'b0;
end

aes_decrypt_ecb_scud #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sboxinv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sboxinv_address0),
    .ce0(sboxinv_ce0),
    .q0(sboxinv_q0)
);

aes_expandDecKey grp_aes_expandDecKey_fu_325(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_expandDecKey_fu_325_ap_start),
    .ap_done(grp_aes_expandDecKey_fu_325_ap_done),
    .ap_idle(grp_aes_expandDecKey_fu_325_ap_idle),
    .ap_ready(grp_aes_expandDecKey_fu_325_ap_ready),
    .rc_read(rcon_fu_68),
    .ctx_key_address0(grp_aes_expandDecKey_fu_325_ctx_key_address0),
    .ctx_key_ce0(grp_aes_expandDecKey_fu_325_ctx_key_ce0),
    .ctx_key_we0(grp_aes_expandDecKey_fu_325_ctx_key_we0),
    .ctx_key_d0(grp_aes_expandDecKey_fu_325_ctx_key_d0),
    .ctx_key_q0(ctx_key_q0),
    .ctx_key_address1(grp_aes_expandDecKey_fu_325_ctx_key_address1),
    .ctx_key_ce1(grp_aes_expandDecKey_fu_325_ctx_key_ce1),
    .ctx_key_we1(grp_aes_expandDecKey_fu_325_ctx_key_we1),
    .ctx_key_d1(grp_aes_expandDecKey_fu_325_ctx_key_d1),
    .ctx_key_q1(ctx_key_q1),
    .ap_return(grp_aes_expandDecKey_fu_325_ap_return)
);

aes_mixColumns_inv grp_aes_mixColumns_inv_fu_334(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_mixColumns_inv_fu_334_ap_start),
    .ap_done(grp_aes_mixColumns_inv_fu_334_ap_done),
    .ap_idle(grp_aes_mixColumns_inv_fu_334_ap_idle),
    .ap_ready(grp_aes_mixColumns_inv_fu_334_ap_ready),
    .buf_r_address0(grp_aes_mixColumns_inv_fu_334_buf_r_address0),
    .buf_r_ce0(grp_aes_mixColumns_inv_fu_334_buf_r_ce0),
    .buf_r_we0(grp_aes_mixColumns_inv_fu_334_buf_r_we0),
    .buf_r_d0(grp_aes_mixColumns_inv_fu_334_buf_r_d0),
    .buf_r_q0(buf_r_q0),
    .buf_r_address1(grp_aes_mixColumns_inv_fu_334_buf_r_address1),
    .buf_r_ce1(grp_aes_mixColumns_inv_fu_334_buf_r_ce1),
    .buf_r_we1(grp_aes_mixColumns_inv_fu_334_buf_r_we1),
    .buf_r_d1(grp_aes_mixColumns_inv_fu_334_buf_r_d1),
    .buf_r_q1(buf_r_q1)
);

aes_addRoundKey grp_aes_addRoundKey_fu_340(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_addRoundKey_fu_340_ap_start),
    .ap_done(grp_aes_addRoundKey_fu_340_ap_done),
    .ap_idle(grp_aes_addRoundKey_fu_340_ap_idle),
    .ap_ready(grp_aes_addRoundKey_fu_340_ap_ready),
    .buf_r_address0(grp_aes_addRoundKey_fu_340_buf_r_address0),
    .buf_r_ce0(grp_aes_addRoundKey_fu_340_buf_r_ce0),
    .buf_r_we0(grp_aes_addRoundKey_fu_340_buf_r_we0),
    .buf_r_d0(grp_aes_addRoundKey_fu_340_buf_r_d0),
    .buf_r_q0(buf_r_q0),
    .key_address0(grp_aes_addRoundKey_fu_340_key_address0),
    .key_ce0(grp_aes_addRoundKey_fu_340_key_ce0),
    .key_q0(ctx_key_q0),
    .key_offset(grp_aes_addRoundKey_fu_340_key_offset)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aes_addRoundKey_fu_340_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state18) & (1'b0 == tmp_fu_476_p2) & (1'b0 == tmp_37_fu_482_p1)) | ((1'b1 == ap_CS_fsm_state18) & ~(1'b0 == tmp_fu_476_p2)) | (1'b1 == ap_CS_fsm_state21))) begin
            ap_reg_grp_aes_addRoundKey_fu_340_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_addRoundKey_fu_340_ap_ready)) begin
            ap_reg_grp_aes_addRoundKey_fu_340_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aes_expandDecKey_fu_325_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == tmp_fu_476_p2) & ~(1'b0 == tmp_37_fu_482_p1))) begin
            ap_reg_grp_aes_expandDecKey_fu_325_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_expandDecKey_fu_325_ap_ready)) begin
            ap_reg_grp_aes_expandDecKey_fu_325_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aes_mixColumns_inv_fu_334_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_reg_grp_aes_mixColumns_inv_fu_334_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_mixColumns_inv_fu_334_ap_ready)) begin
            ap_reg_grp_aes_mixColumns_inv_fu_334_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_i3_reg_314 <= i_49_reg_659;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        i_i3_reg_314 <= ap_const_lv5_10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_i5_reg_291 <= i_46_reg_621;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_i5_reg_291 <= ap_const_lv5_10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_reg_280 <= i_43_reg_527;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_i_reg_280 <= ap_const_lv5_10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & ~(1'b0 == tmp_i6_fu_455_p2))) begin
        i_reg_302 <= ap_const_lv4_D;
    end else if (((1'b1 == ap_CS_fsm_state37) & ~(1'b0 == tmp_i1_fu_505_p2))) begin
        i_reg_302 <= phitmp_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~(1'b0 == grp_aes_expandDecKey_fu_325_ap_done))) begin
        rcon_fu_68 <= grp_aes_expandDecKey_fu_325_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state15) & ~(1'b0 == tmp_i6_fu_455_p2))) begin
        rcon_fu_68 <= ap_const_lv8_80;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_356 <= buf_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_356 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_363 <= buf_r_q1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_363 <= buf_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_415_p2 == 1'b0))) begin
        buf_addr_40_reg_545 <= tmp_i_31_fu_421_p1;
        tmp_214_i_reg_551[4 : 0] <= tmp_214_i_fu_433_p1[4 : 0];
        tmp_i_31_reg_535[7 : 0] <= tmp_i_31_fu_421_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == tmp_i6_fu_455_p2))) begin
        buf_addr_41_reg_629 <= tmp_i7_fu_461_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (1'b0 == tmp_i1_fu_505_p2))) begin
        buf_addr_42_reg_667 <= tmp_i3_fu_511_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_43_reg_527 <= i_43_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_46_reg_621 <= i_46_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        i_49_reg_659 <= i_49_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_351 <= buf_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_370 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_375 <= buf_r_q0;
        reg_380 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state29))) begin
        reg_385 <= buf_r_q0;
        reg_390 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_395 <= buf_r_q0;
        reg_400 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == tmp_fu_476_p2))) begin
        tmp_37_reg_650 <= tmp_37_fu_482_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state40) & ~(1'b0 == grp_aes_addRoundKey_fu_340_ap_done)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & ~(1'b0 == grp_aes_addRoundKey_fu_340_ap_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        buf_r_address0 = tmp_i3_fu_511_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_r_address0 = tmp_i7_fu_461_p1;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state36))) begin
        buf_r_address0 = buf_addr_38_reg_611;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state35))) begin
        buf_r_address0 = buf_addr_36_reg_601;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state34))) begin
        buf_r_address0 = buf_addr_34_reg_591;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state33))) begin
        buf_r_address0 = buf_addr_32_reg_581;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state32))) begin
        buf_r_address0 = buf_addr_30_reg_571;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_address0 = buf_addr_reg_561;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_r_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_r_address0 = ap_const_lv64_B;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_r_address0 = ap_const_lv64_3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_r_address0 = ap_const_lv64_2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_r_address0 = ap_const_lv64_9;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_i_fu_415_p2 == 1'b0))) begin
        buf_r_address0 = ap_const_lv64_1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_415_p2 == 1'b0))) begin
        buf_r_address0 = tmp_i_31_fu_421_p1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == tmp_37_reg_650)))) begin
        buf_r_address0 = grp_aes_addRoundKey_fu_340_buf_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_r_address0 = grp_aes_mixColumns_inv_fu_334_buf_r_address0;
    end else begin
        buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        buf_r_address1 = buf_addr_42_reg_667;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf_r_address1 = buf_addr_41_reg_629;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state36))) begin
        buf_r_address1 = buf_addr_39_reg_616;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state35))) begin
        buf_r_address1 = buf_addr_37_reg_606;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state34))) begin
        buf_r_address1 = buf_addr_35_reg_596;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state33))) begin
        buf_r_address1 = buf_addr_33_reg_586;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state32))) begin
        buf_r_address1 = buf_addr_31_reg_576;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_address1 = buf_addr_29_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_r_address1 = ap_const_lv64_E;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_r_address1 = ap_const_lv64_F;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_r_address1 = ap_const_lv64_7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_r_address1 = ap_const_lv64_A;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_r_address1 = ap_const_lv64_5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_address1 = buf_addr_40_reg_545;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address1 = ap_const_lv64_D;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_r_address1 = grp_aes_mixColumns_inv_fu_334_buf_r_address1;
    end else begin
        buf_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state30) | ((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_415_p2 == 1'b0)) | ((1'b1 == ap_CS_fsm_state2) & ~(tmp_i_fu_415_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        buf_r_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == tmp_37_reg_650)))) begin
        buf_r_ce0 = grp_aes_addRoundKey_fu_340_buf_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_r_ce0 = grp_aes_mixColumns_inv_fu_334_buf_r_ce0;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        buf_r_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_r_ce1 = grp_aes_mixColumns_inv_fu_334_buf_r_ce1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state36))) begin
        buf_r_d0 = reg_363;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state35))) begin
        buf_r_d0 = reg_400;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state34))) begin
        buf_r_d0 = reg_390;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state33))) begin
        buf_r_d0 = reg_380;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state32))) begin
        buf_r_d0 = reg_370;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31))) begin
        buf_r_d0 = reg_356;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == tmp_37_reg_650)))) begin
        buf_r_d0 = grp_aes_addRoundKey_fu_340_buf_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_r_d0 = grp_aes_mixColumns_inv_fu_334_buf_r_d0;
    end else begin
        buf_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state39))) begin
        buf_r_d1 = sboxinv_q0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state36))) begin
        buf_r_d1 = reg_356;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state35))) begin
        buf_r_d1 = reg_385;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state34))) begin
        buf_r_d1 = reg_395;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state33))) begin
        buf_r_d1 = reg_375;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state32))) begin
        buf_r_d1 = reg_351;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31))) begin
        buf_r_d1 = reg_363;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_d1 = tmp_211_i_fu_438_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_r_d1 = grp_aes_mixColumns_inv_fu_334_buf_r_d1;
    end else begin
        buf_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        buf_r_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == tmp_37_reg_650)))) begin
        buf_r_we0 = grp_aes_addRoundKey_fu_340_buf_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_r_we0 = grp_aes_mixColumns_inv_fu_334_buf_r_we0;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        buf_r_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_r_we1 = grp_aes_mixColumns_inv_fu_334_buf_r_we1;
    end else begin
        buf_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_deckey_ce0 = 1'b1;
    end else begin
        ctx_deckey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_deckey_ce1 = 1'b1;
    end else begin
        ctx_deckey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_address0 = tmp_i_31_reg_535;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == tmp_37_reg_650)))) begin
        ctx_key_address0 = grp_aes_addRoundKey_fu_340_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ctx_key_address0 = grp_aes_expandDecKey_fu_325_ctx_key_address0;
    end else begin
        ctx_key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_address1 = tmp_214_i_reg_551;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ctx_key_address1 = grp_aes_expandDecKey_fu_325_ctx_key_address1;
    end else begin
        ctx_key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == tmp_37_reg_650)))) begin
        ctx_key_ce0 = grp_aes_addRoundKey_fu_340_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ctx_key_ce0 = grp_aes_expandDecKey_fu_325_ctx_key_ce0;
    end else begin
        ctx_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ctx_key_ce1 = grp_aes_expandDecKey_fu_325_ctx_key_ce1;
    end else begin
        ctx_key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_d0 = ctx_deckey_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ctx_key_d0 = grp_aes_expandDecKey_fu_325_ctx_key_d0;
    end else begin
        ctx_key_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_d1 = ctx_deckey_q1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ctx_key_d1 = grp_aes_expandDecKey_fu_325_ctx_key_d1;
    end else begin
        ctx_key_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ctx_key_we0 = grp_aes_expandDecKey_fu_325_ctx_key_we0;
    end else begin
        ctx_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ctx_key_we1 = grp_aes_expandDecKey_fu_325_ctx_key_we1;
    end else begin
        ctx_key_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == tmp_37_reg_650))) begin
        grp_aes_addRoundKey_fu_340_key_offset = ap_const_lv6_10;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state40))) begin
        grp_aes_addRoundKey_fu_340_key_offset = ap_const_lv6_0;
    end else begin
        grp_aes_addRoundKey_fu_340_key_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        sboxinv_address0 = tmp_32_i1_fu_522_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sboxinv_address0 = tmp_32_i_fu_471_p1;
    end else begin
        sboxinv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state38))) begin
        sboxinv_ce0 = 1'b1;
    end else begin
        sboxinv_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(tmp_i_fu_415_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (~(1'b0 == tmp_i6_fu_455_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == tmp_fu_476_p2) & ~(1'b0 == tmp_37_fu_482_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if (((1'b0 == tmp_fu_476_p2) & (1'b0 == tmp_37_fu_482_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state19 : begin
            if (~(1'b0 == grp_aes_addRoundKey_fu_340_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (~(1'b0 == grp_aes_expandDecKey_fu_325_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (~(~(1'b0 == tmp_37_reg_650) & (1'b0 == grp_aes_addRoundKey_fu_340_ap_done))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (~(1'b0 == grp_aes_mixColumns_inv_fu_334_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (~(1'b0 == tmp_i1_fu_505_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state40 : begin
            if (~(1'b0 == grp_aes_addRoundKey_fu_340_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state35 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state36 = ap_CS_fsm[ap_const_lv32_23];

assign ap_CS_fsm_state37 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state40 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign buf_addr_29_reg_566 = ap_const_lv64_D;

assign buf_addr_30_reg_571 = ap_const_lv64_9;

assign buf_addr_31_reg_576 = ap_const_lv64_5;

assign buf_addr_32_reg_581 = ap_const_lv64_2;

assign buf_addr_33_reg_586 = ap_const_lv64_A;

assign buf_addr_34_reg_591 = ap_const_lv64_3;

assign buf_addr_35_reg_596 = ap_const_lv64_7;

assign buf_addr_36_reg_601 = ap_const_lv64_B;

assign buf_addr_37_reg_606 = ap_const_lv64_F;

assign buf_addr_38_reg_611 = ap_const_lv64_6;

assign buf_addr_39_reg_616 = ap_const_lv64_E;

assign buf_addr_reg_561 = ap_const_lv64_1;

assign ctx_deckey_address0 = tmp_i_31_fu_421_p1;

assign ctx_deckey_address1 = tmp_214_i_fu_433_p1;

assign grp_aes_addRoundKey_fu_340_ap_start = ap_reg_grp_aes_addRoundKey_fu_340_ap_start;

assign grp_aes_expandDecKey_fu_325_ap_start = ap_reg_grp_aes_expandDecKey_fu_325_ap_start;

assign grp_aes_mixColumns_inv_fu_334_ap_start = ap_reg_grp_aes_mixColumns_inv_fu_334_ap_start;

assign i_43_fu_405_p2 = ($signed(i_i_reg_280) + $signed(ap_const_lv5_1F));

assign i_46_cast_fu_411_p1 = $signed(i_43_fu_405_p2);

assign i_46_fu_445_p2 = ($signed(i_i5_reg_291) + $signed(ap_const_lv5_1F));

assign i_49_cast_fu_451_p1 = $signed(i_46_fu_445_p2);

assign i_49_fu_495_p2 = ($signed(i_i3_reg_314) + $signed(ap_const_lv5_1F));

assign i_52_cast_fu_501_p1 = $signed(i_49_fu_495_p2);

assign phitmp_fu_516_p2 = ($signed(i_reg_302) + $signed(ap_const_lv4_F));

assign tmp_211_i_fu_438_p2 = (buf_r_q0 ^ ctx_deckey_q0);

assign tmp_213_i_fu_427_p2 = (i_i_reg_280 + ap_const_lv5_F);

assign tmp_214_i_fu_433_p1 = tmp_213_i_fu_427_p2;

assign tmp_32_i1_fu_522_p1 = buf_r_q0;

assign tmp_32_i_fu_471_p1 = buf_r_q0;

assign tmp_37_fu_482_p1 = i_reg_302[0:0];

assign tmp_fu_476_p2 = ((i_reg_302 == ap_const_lv4_0) ? 1'b1 : 1'b0);

assign tmp_i1_fu_505_p2 = ((i_i3_reg_314 == ap_const_lv5_0) ? 1'b1 : 1'b0);

assign tmp_i3_fu_511_p1 = $unsigned(i_52_cast_fu_501_p1);

assign tmp_i6_fu_455_p2 = ((i_i5_reg_291 == ap_const_lv5_0) ? 1'b1 : 1'b0);

assign tmp_i7_fu_461_p1 = $unsigned(i_49_cast_fu_451_p1);

assign tmp_i_31_fu_421_p1 = $unsigned(i_46_cast_fu_411_p1);

assign tmp_i_fu_415_p2 = ((i_i_reg_280 == ap_const_lv5_0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_i_31_reg_535[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_214_i_reg_551[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //aes_decrypt_ecb
