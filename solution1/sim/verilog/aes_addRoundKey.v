// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_addRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_q0,
        key_address0,
        key_ce0,
        key_q0,
        key_offset
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_state2 = 3'b10;
parameter    ap_ST_fsm_state3 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_const_lv5_0 = 5'b00000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
input  [7:0] buf_r_q0;
output  [4:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
input  [5:0] key_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] buf_r_address0;
reg buf_r_ce0;
reg buf_r_we0;
reg key_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [4:0] tmp_92_fu_61_p1;
reg   [4:0] tmp_92_reg_103;
wire   [4:0] i_5_fu_65_p2;
reg   [4:0] i_5_reg_108;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_fu_75_p2;
reg   [3:0] buf_addr_reg_121;
reg   [4:0] i_reg_50;
wire   [0:0] ap_CS_fsm_state3;
wire   [63:0] sum_cast_fu_91_p1;
wire   [63:0] tmp_s_fu_81_p1;
wire  signed [7:0] i_6_cast_fu_71_p1;
wire   [4:0] sum_fu_86_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_50 <= i_5_reg_108;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_50 <= ap_const_lv5_10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_75_p2 == 1'b0))) begin
        buf_addr_reg_121 <= tmp_s_fu_81_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_5_reg_108 <= i_5_fu_65_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_92_reg_103 <= tmp_92_fu_61_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_75_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_75_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_address0 = buf_addr_reg_121;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address0 = tmp_s_fu_81_p1;
    end else begin
        buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_we0 = 1'b1;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(tmp_fu_75_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign buf_r_d0 = (buf_r_q0 ^ key_q0);

assign i_5_fu_65_p2 = ($signed(i_reg_50) + $signed(ap_const_lv5_1F));

assign i_6_cast_fu_71_p1 = $signed(i_5_fu_65_p2);

assign key_address0 = sum_cast_fu_91_p1;

assign sum_cast_fu_91_p1 = sum_fu_86_p2;

assign sum_fu_86_p2 = (i_5_fu_65_p2 + tmp_92_reg_103);

assign tmp_92_fu_61_p1 = key_offset[4:0];

assign tmp_fu_75_p2 = ((i_reg_50 == ap_const_lv5_0) ? 1'b1 : 1'b0);

assign tmp_s_fu_81_p1 = $unsigned(i_6_cast_fu_71_p1);

endmodule //aes_addRoundKey
