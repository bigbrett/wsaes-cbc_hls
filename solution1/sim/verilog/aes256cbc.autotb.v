// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      aes256cbc
`define AUTOTB_DUT_INST AESL_inst_aes256cbc
`define AUTOTB_TOP      apatb_aes256cbc_top
`define AUTOTB_LAT_RESULT_FILE "aes256cbc.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "aes256cbc.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_aes256cbc_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_CLOCK_PERIOD_DIV2 4.00

`define AESL_DEPTH_memptr 1
`define AESL_DEPTH_mode 1
`define AESL_DEPTH_inbuf_addr 1
`define AESL_DEPTH_outbuf_addr 1
`define AUTOTB_TVIN_memptr  "../tv/cdatafile/c.aes256cbc.autotvin_memptr.dat"
`define AUTOTB_TVIN_mode  "../tv/cdatafile/c.aes256cbc.autotvin_mode.dat"
`define AUTOTB_TVIN_inbuf_addr  "../tv/cdatafile/c.aes256cbc.autotvin_inbuf_addr.dat"
`define AUTOTB_TVIN_outbuf_addr  "../tv/cdatafile/c.aes256cbc.autotvin_outbuf_addr.dat"
`define AUTOTB_TVIN_memptr_out_wrapc  "../tv/rtldatafile/rtl.aes256cbc.autotvin_memptr.dat"
`define AUTOTB_TVIN_mode_out_wrapc  "../tv/rtldatafile/rtl.aes256cbc.autotvin_mode.dat"
`define AUTOTB_TVIN_inbuf_addr_out_wrapc  "../tv/rtldatafile/rtl.aes256cbc.autotvin_inbuf_addr.dat"
`define AUTOTB_TVIN_outbuf_addr_out_wrapc  "../tv/rtldatafile/rtl.aes256cbc.autotvin_outbuf_addr.dat"
`define AUTOTB_TVOUT_memptr  "../tv/cdatafile/c.aes256cbc.autotvout_memptr.dat"
`define AUTOTB_TVOUT_memptr_out_wrapc  "../tv/rtldatafile/rtl.aes256cbc.autotvout_memptr.dat"
module `AUTOTB_TOP;

parameter AUTOTB_TRANSACTION_NUM = 8;
parameter PROGRESS_TIMEOUT = 10000000;
parameter LATENCY_ESTIMATION = 2526;
parameter LENGTH_memptr = 64;
parameter LENGTH_mode = 1;
parameter LENGTH_inbuf_addr = 1;
parameter LENGTH_outbuf_addr = 1;

task read_token;
    input integer fp;
    output reg [199 : 0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg tb_continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
wire [3 : 0] AXILiteS_AWADDR;
wire  AXILiteS_AWVALID;
wire  AXILiteS_AWREADY;
wire  AXILiteS_WVALID;
wire  AXILiteS_WREADY;
wire [31 : 0] AXILiteS_WDATA;
wire [3 : 0] AXILiteS_WSTRB;
wire [3 : 0] AXILiteS_ARADDR;
wire  AXILiteS_ARVALID;
wire  AXILiteS_ARREADY;
wire  AXILiteS_RVALID;
wire  AXILiteS_RREADY;
wire [31 : 0] AXILiteS_RDATA;
wire [1 : 0] AXILiteS_RRESP;
wire  AXILiteS_BVALID;
wire  AXILiteS_BREADY;
wire [1 : 0] AXILiteS_BRESP;
wire  AXILiteS_INTERRUPT;
wire [5 : 0] p0_AWADDR;
wire  p0_AWVALID;
wire  p0_AWREADY;
wire  p0_WVALID;
wire  p0_WREADY;
wire [31 : 0] p0_WDATA;
wire [3 : 0] p0_WSTRB;
wire [5 : 0] p0_ARADDR;
wire  p0_ARVALID;
wire  p0_ARREADY;
wire  p0_RVALID;
wire  p0_RREADY;
wire [31 : 0] p0_RDATA;
wire [1 : 0] p0_RRESP;
wire  p0_BVALID;
wire  p0_BREADY;
wire [1 : 0] p0_BRESP;
wire  memptr_AWVALID;
wire  memptr_AWREADY;
wire [31 : 0] memptr_AWADDR;
wire [0 : 0] memptr_AWID;
wire [7 : 0] memptr_AWLEN;
wire [2 : 0] memptr_AWSIZE;
wire [1 : 0] memptr_AWBURST;
wire [1 : 0] memptr_AWLOCK;
wire [3 : 0] memptr_AWCACHE;
wire [2 : 0] memptr_AWPROT;
wire [3 : 0] memptr_AWQOS;
wire [3 : 0] memptr_AWREGION;
wire [0 : 0] memptr_AWUSER;
wire  memptr_WVALID;
wire  memptr_WREADY;
wire [31 : 0] memptr_WDATA;
wire [3 : 0] memptr_WSTRB;
wire  memptr_WLAST;
wire [0 : 0] memptr_WID;
wire [0 : 0] memptr_WUSER;
wire  memptr_ARVALID;
wire  memptr_ARREADY;
wire [31 : 0] memptr_ARADDR;
wire [0 : 0] memptr_ARID;
wire [7 : 0] memptr_ARLEN;
wire [2 : 0] memptr_ARSIZE;
wire [1 : 0] memptr_ARBURST;
wire [1 : 0] memptr_ARLOCK;
wire [3 : 0] memptr_ARCACHE;
wire [2 : 0] memptr_ARPROT;
wire [3 : 0] memptr_ARQOS;
wire [3 : 0] memptr_ARREGION;
wire [0 : 0] memptr_ARUSER;
wire  memptr_RVALID;
wire  memptr_RREADY;
wire [31 : 0] memptr_RDATA;
wire  memptr_RLAST;
wire [0 : 0] memptr_RID;
wire [0 : 0] memptr_RUSER;
wire [1 : 0] memptr_RRESP;
wire  memptr_BVALID;
wire  memptr_BREADY;
wire [1 : 0] memptr_BRESP;
wire [0 : 0] memptr_BID;
wire [0 : 0] memptr_BUSER;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;
wire p0_write_data_finish;
wire AESL_slave_start;
wire AESL_slave_write_start_in;
wire AESL_slave_write_start_finish;
reg AESL_slave_ready;
wire AESL_slave_output_done;
reg ready_rise = 0;
reg start_rise = 0;
reg slave_start_status = 0;
reg slave_done_status = 0;

wire ap_clk;
wire ap_rst_n;
wire ap_rst_n_n;

`AUTOTB_DUT `AUTOTB_DUT_INST(
    .s_axi_AXILiteS_AWADDR(AXILiteS_AWADDR),
    .s_axi_AXILiteS_AWVALID(AXILiteS_AWVALID),
    .s_axi_AXILiteS_AWREADY(AXILiteS_AWREADY),
    .s_axi_AXILiteS_WVALID(AXILiteS_WVALID),
    .s_axi_AXILiteS_WREADY(AXILiteS_WREADY),
    .s_axi_AXILiteS_WDATA(AXILiteS_WDATA),
    .s_axi_AXILiteS_WSTRB(AXILiteS_WSTRB),
    .s_axi_AXILiteS_ARADDR(AXILiteS_ARADDR),
    .s_axi_AXILiteS_ARVALID(AXILiteS_ARVALID),
    .s_axi_AXILiteS_ARREADY(AXILiteS_ARREADY),
    .s_axi_AXILiteS_RVALID(AXILiteS_RVALID),
    .s_axi_AXILiteS_RREADY(AXILiteS_RREADY),
    .s_axi_AXILiteS_RDATA(AXILiteS_RDATA),
    .s_axi_AXILiteS_RRESP(AXILiteS_RRESP),
    .s_axi_AXILiteS_BVALID(AXILiteS_BVALID),
    .s_axi_AXILiteS_BREADY(AXILiteS_BREADY),
    .s_axi_AXILiteS_BRESP(AXILiteS_BRESP),
    .interrupt(AXILiteS_INTERRUPT),
    .s_axi_p0_AWADDR(p0_AWADDR),
    .s_axi_p0_AWVALID(p0_AWVALID),
    .s_axi_p0_AWREADY(p0_AWREADY),
    .s_axi_p0_WVALID(p0_WVALID),
    .s_axi_p0_WREADY(p0_WREADY),
    .s_axi_p0_WDATA(p0_WDATA),
    .s_axi_p0_WSTRB(p0_WSTRB),
    .s_axi_p0_ARADDR(p0_ARADDR),
    .s_axi_p0_ARVALID(p0_ARVALID),
    .s_axi_p0_ARREADY(p0_ARREADY),
    .s_axi_p0_RVALID(p0_RVALID),
    .s_axi_p0_RREADY(p0_RREADY),
    .s_axi_p0_RDATA(p0_RDATA),
    .s_axi_p0_RRESP(p0_RRESP),
    .s_axi_p0_BVALID(p0_BVALID),
    .s_axi_p0_BREADY(p0_BREADY),
    .s_axi_p0_BRESP(p0_BRESP),
    .ap_clk(ap_clk),
    .ap_rst_n(ap_rst_n),
    .m_axi_memptr_AWVALID(memptr_AWVALID),
    .m_axi_memptr_AWREADY(memptr_AWREADY),
    .m_axi_memptr_AWADDR(memptr_AWADDR),
    .m_axi_memptr_AWID(memptr_AWID),
    .m_axi_memptr_AWLEN(memptr_AWLEN),
    .m_axi_memptr_AWSIZE(memptr_AWSIZE),
    .m_axi_memptr_AWBURST(memptr_AWBURST),
    .m_axi_memptr_AWLOCK(memptr_AWLOCK),
    .m_axi_memptr_AWCACHE(memptr_AWCACHE),
    .m_axi_memptr_AWPROT(memptr_AWPROT),
    .m_axi_memptr_AWQOS(memptr_AWQOS),
    .m_axi_memptr_AWREGION(memptr_AWREGION),
    .m_axi_memptr_AWUSER(memptr_AWUSER),
    .m_axi_memptr_WVALID(memptr_WVALID),
    .m_axi_memptr_WREADY(memptr_WREADY),
    .m_axi_memptr_WDATA(memptr_WDATA),
    .m_axi_memptr_WSTRB(memptr_WSTRB),
    .m_axi_memptr_WLAST(memptr_WLAST),
    .m_axi_memptr_WID(memptr_WID),
    .m_axi_memptr_WUSER(memptr_WUSER),
    .m_axi_memptr_ARVALID(memptr_ARVALID),
    .m_axi_memptr_ARREADY(memptr_ARREADY),
    .m_axi_memptr_ARADDR(memptr_ARADDR),
    .m_axi_memptr_ARID(memptr_ARID),
    .m_axi_memptr_ARLEN(memptr_ARLEN),
    .m_axi_memptr_ARSIZE(memptr_ARSIZE),
    .m_axi_memptr_ARBURST(memptr_ARBURST),
    .m_axi_memptr_ARLOCK(memptr_ARLOCK),
    .m_axi_memptr_ARCACHE(memptr_ARCACHE),
    .m_axi_memptr_ARPROT(memptr_ARPROT),
    .m_axi_memptr_ARQOS(memptr_ARQOS),
    .m_axi_memptr_ARREGION(memptr_ARREGION),
    .m_axi_memptr_ARUSER(memptr_ARUSER),
    .m_axi_memptr_RVALID(memptr_RVALID),
    .m_axi_memptr_RREADY(memptr_RREADY),
    .m_axi_memptr_RDATA(memptr_RDATA),
    .m_axi_memptr_RLAST(memptr_RLAST),
    .m_axi_memptr_RID(memptr_RID),
    .m_axi_memptr_RUSER(memptr_RUSER),
    .m_axi_memptr_RRESP(memptr_RRESP),
    .m_axi_memptr_BVALID(memptr_BVALID),
    .m_axi_memptr_BREADY(memptr_BREADY),
    .m_axi_memptr_BRESP(memptr_BRESP),
    .m_axi_memptr_BID(memptr_BID),
    .m_axi_memptr_BUSER(memptr_BUSER));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst_n = AESL_reset;
assign ap_rst_n_n = ~AESL_reset;
assign AESL_reset = rst;
assign AESL_start = start;
assign AESL_ce = ce;
assign AESL_continue = tb_continue;
  assign AESL_slave_write_start_in = slave_start_status  & p0_write_data_finish;
  assign AESL_slave_start = AESL_slave_write_start_finish;
  assign AESL_done = slave_done_status ;

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        slave_start_status <= 1;
    end
    else begin
        if (AESL_start == 1 ) begin
            start_rise = 1;
        end
        if (start_rise == 1 && AESL_done == 1 ) begin
            slave_start_status <= 1;
        end
        if (AESL_slave_write_start_in == 1) begin 
            slave_start_status <= 0;
            start_rise = 0;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_slave_ready <= 0;
        ready_rise = 0;
    end
    else begin
        if (AESL_ready == 1 ) begin
            ready_rise = 1;
        end
        if (ready_rise == 1 && AESL_done_delay == 1 ) begin
            AESL_slave_ready <= 1;
        end
        if (AESL_slave_ready == 1) begin 
            AESL_slave_ready <= 0;
            ready_rise = 0;
        end
    end
end

always @ (posedge AESL_clock)
begin
    if (AESL_done == 1) begin
        slave_done_status <= 0;
    end
    else if (AESL_slave_output_done == 1 ) begin
        slave_done_status <= 1;
    end
end




wire    AESL_axi_master_memptr_ready;
wire    AESL_axi_master_memptr_done;
AESL_axi_master_memptr AESL_AXI_MASTER_memptr(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_memptr_AWVALID (memptr_AWVALID),
    .TRAN_memptr_AWREADY (memptr_AWREADY),
    .TRAN_memptr_AWADDR (memptr_AWADDR),
    .TRAN_memptr_AWID (memptr_AWID),
    .TRAN_memptr_AWLEN (memptr_AWLEN),
    .TRAN_memptr_AWSIZE (memptr_AWSIZE),
    .TRAN_memptr_AWBURST (memptr_AWBURST),
    .TRAN_memptr_AWLOCK (memptr_AWLOCK),
    .TRAN_memptr_AWCACHE (memptr_AWCACHE),
    .TRAN_memptr_AWPROT (memptr_AWPROT),
    .TRAN_memptr_AWQOS (memptr_AWQOS),
    .TRAN_memptr_AWREGION (memptr_AWREGION),
    .TRAN_memptr_AWUSER (memptr_AWUSER),
    .TRAN_memptr_WVALID (memptr_WVALID),
    .TRAN_memptr_WREADY (memptr_WREADY),
    .TRAN_memptr_WDATA (memptr_WDATA),
    .TRAN_memptr_WSTRB (memptr_WSTRB),
    .TRAN_memptr_WLAST (memptr_WLAST),
    .TRAN_memptr_WID (memptr_WID),
    .TRAN_memptr_WUSER (memptr_WUSER),
    .TRAN_memptr_ARVALID (memptr_ARVALID),
    .TRAN_memptr_ARREADY (memptr_ARREADY),
    .TRAN_memptr_ARADDR (memptr_ARADDR),
    .TRAN_memptr_ARID (memptr_ARID),
    .TRAN_memptr_ARLEN (memptr_ARLEN),
    .TRAN_memptr_ARSIZE (memptr_ARSIZE),
    .TRAN_memptr_ARBURST (memptr_ARBURST),
    .TRAN_memptr_ARLOCK (memptr_ARLOCK),
    .TRAN_memptr_ARCACHE (memptr_ARCACHE),
    .TRAN_memptr_ARPROT (memptr_ARPROT),
    .TRAN_memptr_ARQOS (memptr_ARQOS),
    .TRAN_memptr_ARREGION (memptr_ARREGION),
    .TRAN_memptr_ARUSER (memptr_ARUSER),
    .TRAN_memptr_RVALID (memptr_RVALID),
    .TRAN_memptr_RREADY (memptr_RREADY),
    .TRAN_memptr_RDATA (memptr_RDATA),
    .TRAN_memptr_RLAST (memptr_RLAST),
    .TRAN_memptr_RID (memptr_RID),
    .TRAN_memptr_RUSER (memptr_RUSER),
    .TRAN_memptr_RRESP (memptr_RRESP),
    .TRAN_memptr_BVALID (memptr_BVALID),
    .TRAN_memptr_BREADY (memptr_BREADY),
    .TRAN_memptr_BRESP (memptr_BRESP),
    .TRAN_memptr_BID (memptr_BID),
    .TRAN_memptr_BUSER (memptr_BUSER),
    .ready (AESL_axi_master_memptr_ready),
    .done  (AESL_axi_master_memptr_done)
);
assign    AESL_axi_master_memptr_ready    =   ready;
assign    AESL_axi_master_memptr_done    =   AESL_done_delay;

AESL_axi_slave_p0 AESL_AXI_SLAVE_p0(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_p0_AWADDR (p0_AWADDR),
    .TRAN_s_axi_p0_AWVALID (p0_AWVALID),
    .TRAN_s_axi_p0_AWREADY (p0_AWREADY),
    .TRAN_s_axi_p0_WVALID (p0_WVALID),
    .TRAN_s_axi_p0_WREADY (p0_WREADY),
    .TRAN_s_axi_p0_WDATA (p0_WDATA),
    .TRAN_s_axi_p0_WSTRB (p0_WSTRB),
    .TRAN_s_axi_p0_ARADDR (p0_ARADDR),
    .TRAN_s_axi_p0_ARVALID (p0_ARVALID),
    .TRAN_s_axi_p0_ARREADY (p0_ARREADY),
    .TRAN_s_axi_p0_RVALID (p0_RVALID),
    .TRAN_s_axi_p0_RREADY (p0_RREADY),
    .TRAN_s_axi_p0_RDATA (p0_RDATA),
    .TRAN_s_axi_p0_RRESP (p0_RRESP),
    .TRAN_s_axi_p0_BVALID (p0_BVALID),
    .TRAN_s_axi_p0_BREADY (p0_BREADY),
    .TRAN_s_axi_p0_BRESP (p0_BRESP),
    .TRAN_p0_write_data_finish(p0_write_data_finish),
    .TRAN_p0_ready_in (AESL_slave_ready),
    .TRAN_p0_done_in (AESL_slave_output_done),
    .TRAN_p0_idle_in (AESL_idle),
    .TRAN_p0_transaction_done_in (AESL_done_delay),
    .TRAN_p0_start_in  (AESL_slave_start)
);
AESL_axi_slave_AXILiteS AESL_AXI_SLAVE_AXILiteS(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_AXILiteS_AWADDR (AXILiteS_AWADDR),
    .TRAN_s_axi_AXILiteS_AWVALID (AXILiteS_AWVALID),
    .TRAN_s_axi_AXILiteS_AWREADY (AXILiteS_AWREADY),
    .TRAN_s_axi_AXILiteS_WVALID (AXILiteS_WVALID),
    .TRAN_s_axi_AXILiteS_WREADY (AXILiteS_WREADY),
    .TRAN_s_axi_AXILiteS_WDATA (AXILiteS_WDATA),
    .TRAN_s_axi_AXILiteS_WSTRB (AXILiteS_WSTRB),
    .TRAN_s_axi_AXILiteS_ARADDR (AXILiteS_ARADDR),
    .TRAN_s_axi_AXILiteS_ARVALID (AXILiteS_ARVALID),
    .TRAN_s_axi_AXILiteS_ARREADY (AXILiteS_ARREADY),
    .TRAN_s_axi_AXILiteS_RVALID (AXILiteS_RVALID),
    .TRAN_s_axi_AXILiteS_RREADY (AXILiteS_RREADY),
    .TRAN_s_axi_AXILiteS_RDATA (AXILiteS_RDATA),
    .TRAN_s_axi_AXILiteS_RRESP (AXILiteS_RRESP),
    .TRAN_s_axi_AXILiteS_BVALID (AXILiteS_BVALID),
    .TRAN_s_axi_AXILiteS_BREADY (AXILiteS_BREADY),
    .TRAN_s_axi_AXILiteS_BRESP (AXILiteS_BRESP),
    .TRAN_AXILiteS_interrupt (AXILiteS_INTERRUPT),
    .TRAN_AXILiteS_ready_out (AESL_ready),
    .TRAN_AXILiteS_ready_in (AESL_slave_ready),
    .TRAN_AXILiteS_done_out (AESL_slave_output_done),
    .TRAN_AXILiteS_idle_out (AESL_idle),
    .TRAN_AXILiteS_write_start_in     (AESL_slave_write_start_in),
    .TRAN_AXILiteS_write_start_finish (AESL_slave_write_start_finish),
    .TRAN_AXILiteS_transaction_done_in (AESL_done_delay),
    .TRAN_AXILiteS_start_in  (AESL_slave_start)
);

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

    event next_trigger_ready_cnt;
    
    initial begin : gen_ready_cnt
        ready_cnt = 0;
        wait (AESL_reset === 1);
        forever begin
            @ (posedge AESL_clock);
            if (ready == 1) begin
                if (ready_cnt < AUTOTB_TRANSACTION_NUM) begin
                    ready_cnt = ready_cnt + 1;
                end
            end
            -> next_trigger_ready_cnt;
        end
    end
    
    wire all_finish = (done_cnt == AUTOTB_TRANSACTION_NUM);
    
    // done_cnt
    always @ (posedge AESL_clock) begin
        if (~AESL_reset) begin
            done_cnt <= 0;
        end else begin
            if (AESL_done == 1) begin
                if (done_cnt < AUTOTB_TRANSACTION_NUM) begin
                    done_cnt <= done_cnt + 1;
                end
            end
        end
    end
    
    initial begin : finish_simulation
        wait (all_finish == 1);
        // last transaction is saved at negedge right after last done
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        $finish;
    end
    
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_memptr;
reg [31:0] size_memptr;
reg [31:0] size_memptr_backup;
reg end_mode;
reg [31:0] size_mode;
reg [31:0] size_mode_backup;
reg end_inbuf_addr;
reg [31:0] size_inbuf_addr;
reg [31:0] size_inbuf_addr_backup;
reg end_outbuf_addr;
reg [31:0] size_outbuf_addr;
reg [31:0] size_outbuf_addr_backup;

initial begin : initial_process
    integer proc_rand;
    rst = 0;
    # 100;
    repeat(3) @ (posedge AESL_clock);
    rst = 1;
end
initial begin : start_process
    integer proc_rand;
    reg [31:0] start_cnt;
    ce = 1;
    start = 0;
    start_cnt = 0;
    wait (AESL_reset === 1);
    @ (posedge AESL_clock);
    #0 start = 1;
    start_cnt = start_cnt + 1;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt >= AUTOTB_TRANSACTION_NUM) begin
            // keep pushing garbage in
            #0 start = 1;
        end
        if (AESL_ready) begin
            start_cnt = start_cnt + 1;
        end
    end
end

always @(AESL_done)
begin
    tb_continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end

reg dump_tvout_finish_memptr;

initial begin : dump_tvout_runtime_sign_memptr
    integer fp;
    dump_tvout_finish_memptr = 0;
    fp = $fopen(`AUTOTB_TVOUT_memptr_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_memptr_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_memptr_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_memptr_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_memptr = 1;
end


////////////////////////////////////////////
// progress and performance
////////////////////////////////////////////

task wait_start();
    while (~AESL_start) begin
        @ (posedge AESL_clock);
    end
endtask

reg [31:0] clk_cnt = 0;
reg AESL_ready_p1;

always @ (posedge AESL_clock) begin
    clk_cnt <= clk_cnt + 1;
    AESL_ready_p1 <= AESL_ready;
end

reg [31:0] start_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] start_cnt;
reg [31:0] finish_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] finish_cnt;
event report_progress;

initial begin
    start_cnt = 0;
    finish_cnt = 0;
    wait (AESL_reset == 1);
    wait_start();
    start_timestamp[start_cnt] = clk_cnt;
    start_cnt = start_cnt + 1;
    if (AESL_done) begin
        finish_timestamp[finish_cnt] = clk_cnt;
        finish_cnt = finish_cnt + 1;
    end
    -> report_progress;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_start && AESL_ready_p1) begin
                start_timestamp[start_cnt] = clk_cnt;
                start_cnt = start_cnt + 1;
            end
        end
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                finish_timestamp[finish_cnt] = clk_cnt;
                finish_cnt = finish_cnt + 1;
            end
        end
        -> report_progress;
    end
end

reg [31:0] progress_timeout;

initial begin : simulation_progress
    real intra_progress;
    wait (AESL_reset == 1);
    progress_timeout = PROGRESS_TIMEOUT;
    $display("////////////////////////////////////////////////////////////////////////////////////");
    $display("// Inter-Transaction Progress: Completed Transaction / Total Transaction");
    $display("// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%%");
    $display("//");
    $display("// RTL Simulation : \"Inter-Transaction Progress\" [\"Intra-Transaction Progress\"] @ \"Simulation Time\"");
    $display("////////////////////////////////////////////////////////////////////////////////////");
    print_progress();
    while (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
        @ (report_progress);
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                print_progress();
                progress_timeout = PROGRESS_TIMEOUT;
            end else begin
                if (progress_timeout == 0) begin
                    print_progress();
                    progress_timeout = PROGRESS_TIMEOUT;
                end else begin
                    progress_timeout = progress_timeout - 1;
                end
            end
        end
    end
    print_progress();
    $display("////////////////////////////////////////////////////////////////////////////////////");
    calculate_performance();
end

task get_intra_progress(output real intra_progress);
    begin
        if (start_cnt > finish_cnt) begin
            intra_progress = clk_cnt - start_timestamp[finish_cnt];
        end else begin
            intra_progress = 0;
        end
        intra_progress = intra_progress / LATENCY_ESTIMATION;
    end
endtask

task print_progress();
    real intra_progress;
    begin
        if (LATENCY_ESTIMATION > 0) begin
            get_intra_progress(intra_progress);
            $display("// RTL Simulation : %0d / %0d [%2.2f%%] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, intra_progress * 100, $time);
        end else begin
            $display("// RTL Simulation : %0d / %0d [n/a] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, $time);
        end
    end
endtask

task calculate_performance();
    integer i;
    integer fp;
    reg [31:0] latency [0:AUTOTB_TRANSACTION_NUM - 1];
    reg [31:0] latency_min;
    reg [31:0] latency_max;
    reg [31:0] latency_total;
    reg [31:0] latency_average;
    reg [31:0] interval [0:AUTOTB_TRANSACTION_NUM - 2];
    reg [31:0] interval_min;
    reg [31:0] interval_max;
    reg [31:0] interval_total;
    reg [31:0] interval_average;
    begin
        latency_min = -1;
        latency_max = 0;
        latency_total = 0;
        interval_min = -1;
        interval_max = 0;
        interval_total = 0;

        for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
            // calculate latency
            latency[i] = finish_timestamp[i] - start_timestamp[i];
            if (latency[i] > latency_max) latency_max = latency[i];
            if (latency[i] < latency_min) latency_min = latency[i];
            latency_total = latency_total + latency[i];
            // calculate interval
            if (AUTOTB_TRANSACTION_NUM == 1) begin
                interval[i] = 0;
                interval_max = 0;
                interval_min = 0;
                interval_total = 0;
            end else if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                interval[i] = start_timestamp[i + 1] - start_timestamp[i];
                if (interval[i] > interval_max) interval_max = interval[i];
                if (interval[i] < interval_min) interval_min = interval[i];
                interval_total = interval_total + interval[i];
            end
        end

        latency_average = latency_total / AUTOTB_TRANSACTION_NUM;
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            interval_average = 0;
        end else begin
            interval_average = interval_total / (AUTOTB_TRANSACTION_NUM - 1);
        end

        fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

        $fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latency_max);
        $fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latency_min);
        $fdisplay(fp, "$AVER_LATENCY = \"%0d\"", latency_average);
        $fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", interval_max);
        $fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", interval_min);
        $fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", interval_average);

        $fclose(fp);

        fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");

        $fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            i = 0;
            $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
        end else begin
            for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
                if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                    $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
                end else begin
                    $fdisplay(fp, "transaction%8d:%16d               x", i, latency[i]);
                end
            end
        end

        $fclose(fp);
    end
endtask


////////////////////////////////////////////
// Dependence Check
////////////////////////////////////////////

`ifndef POST_SYN

`endif

endmodule
