-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256cbc is
generic (
    C_M_AXI_MEMPTR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEMPTR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEMPTR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMPTR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMPTR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMPTR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMPTR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMPTR_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_P0_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_P0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMPTR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEMPTR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEMPTR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEMPTR_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_memptr_AWVALID : OUT STD_LOGIC;
    m_axi_memptr_AWREADY : IN STD_LOGIC;
    m_axi_memptr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_ADDR_WIDTH-1 downto 0);
    m_axi_memptr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_ID_WIDTH-1 downto 0);
    m_axi_memptr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memptr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memptr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memptr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memptr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memptr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memptr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memptr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memptr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_AWUSER_WIDTH-1 downto 0);
    m_axi_memptr_WVALID : OUT STD_LOGIC;
    m_axi_memptr_WREADY : IN STD_LOGIC;
    m_axi_memptr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_DATA_WIDTH-1 downto 0);
    m_axi_memptr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_DATA_WIDTH/8-1 downto 0);
    m_axi_memptr_WLAST : OUT STD_LOGIC;
    m_axi_memptr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_ID_WIDTH-1 downto 0);
    m_axi_memptr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_WUSER_WIDTH-1 downto 0);
    m_axi_memptr_ARVALID : OUT STD_LOGIC;
    m_axi_memptr_ARREADY : IN STD_LOGIC;
    m_axi_memptr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_ADDR_WIDTH-1 downto 0);
    m_axi_memptr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_ID_WIDTH-1 downto 0);
    m_axi_memptr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memptr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memptr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memptr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memptr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memptr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memptr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memptr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memptr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_ARUSER_WIDTH-1 downto 0);
    m_axi_memptr_RVALID : IN STD_LOGIC;
    m_axi_memptr_RREADY : OUT STD_LOGIC;
    m_axi_memptr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_DATA_WIDTH-1 downto 0);
    m_axi_memptr_RLAST : IN STD_LOGIC;
    m_axi_memptr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_ID_WIDTH-1 downto 0);
    m_axi_memptr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_RUSER_WIDTH-1 downto 0);
    m_axi_memptr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memptr_BVALID : IN STD_LOGIC;
    m_axi_memptr_BREADY : OUT STD_LOGIC;
    m_axi_memptr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memptr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_ID_WIDTH-1 downto 0);
    m_axi_memptr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMPTR_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_p0_AWVALID : IN STD_LOGIC;
    s_axi_p0_AWREADY : OUT STD_LOGIC;
    s_axi_p0_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_P0_ADDR_WIDTH-1 downto 0);
    s_axi_p0_WVALID : IN STD_LOGIC;
    s_axi_p0_WREADY : OUT STD_LOGIC;
    s_axi_p0_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_P0_DATA_WIDTH-1 downto 0);
    s_axi_p0_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_P0_DATA_WIDTH/8-1 downto 0);
    s_axi_p0_ARVALID : IN STD_LOGIC;
    s_axi_p0_ARREADY : OUT STD_LOGIC;
    s_axi_p0_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_P0_ADDR_WIDTH-1 downto 0);
    s_axi_p0_RVALID : OUT STD_LOGIC;
    s_axi_p0_RREADY : IN STD_LOGIC;
    s_axi_p0_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_P0_DATA_WIDTH-1 downto 0);
    s_axi_p0_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_p0_BVALID : OUT STD_LOGIC;
    s_axi_p0_BREADY : IN STD_LOGIC;
    s_axi_p0_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of aes256cbc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes256cbc,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=813,HLS_SYN_TPT=none,HLS_SYN_MEM=13,HLS_SYN_DSP=0,HLS_SYN_FF=2255,HLS_SYN_LUT=3606}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal mode : STD_LOGIC_VECTOR (2 downto 0);
    signal inbuf_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal outbuf_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal iv_ce0 : STD_LOGIC;
    signal iv_we0 : STD_LOGIC;
    signal iv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xorv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xorv_ce0 : STD_LOGIC;
    signal xorv_we0 : STD_LOGIC;
    signal xorv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xorv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal key_ce0 : STD_LOGIC;
    signal key_we0 : STD_LOGIC;
    signal key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_deckey_ce0 : STD_LOGIC;
    signal ctx_deckey_we0 : STD_LOGIC;
    signal ctx_deckey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_deckey_ce1 : STD_LOGIC;
    signal ctx_deckey_we1 : STD_LOGIC;
    signal ctx_deckey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_enckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_enckey_ce0 : STD_LOGIC;
    signal ctx_enckey_we0 : STD_LOGIC;
    signal ctx_enckey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_enckey_ce1 : STD_LOGIC;
    signal ctx_enckey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_key_ce0 : STD_LOGIC;
    signal ctx_key_we0 : STD_LOGIC;
    signal ctx_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_key_ce1 : STD_LOGIC;
    signal ctx_key_we1 : STD_LOGIC;
    signal ctx_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lastbuf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lastbuf_ce0 : STD_LOGIC;
    signal lastbuf_we0 : STD_LOGIC;
    signal lastbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal memptr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mode_read_reg_906 : STD_LOGIC_VECTOR (2 downto 0);
    signal memptr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal exitcond_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal memptr_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_135_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal memptr_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal exitcond9_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal memptr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal exitcond1_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_141_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal exitcond4_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal exitcond2_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond3_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal memptr_AWVALID : STD_LOGIC;
    signal memptr_AWREADY : STD_LOGIC;
    signal memptr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memptr_WVALID : STD_LOGIC;
    signal memptr_WREADY : STD_LOGIC;
    signal memptr_ARVALID : STD_LOGIC;
    signal memptr_ARREADY : STD_LOGIC;
    signal memptr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memptr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memptr_RVALID : STD_LOGIC;
    signal memptr_RREADY : STD_LOGIC;
    signal memptr_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal memptr_RLAST : STD_LOGIC;
    signal memptr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal memptr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memptr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal memptr_BVALID : STD_LOGIC;
    signal memptr_BREADY : STD_LOGIC;
    signal memptr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal memptr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal memptr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar3_reg_374 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_reg_pp0_iter1_indvar3_reg_374 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar2_reg_386 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_pipeline_reg_pp1_iter1_indvar2_reg_386 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar1_reg_398 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_pipeline_reg_pp2_iter1_indvar1_reg_398 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar4_reg_443 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_reg_454 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_pipeline_reg_pp4_iter1_indvar_reg_454 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar7_reg_488 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_585 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_592 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_sig_ioackin_memptr_WREADY : STD_LOGIC;
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal outbuf_addr_read_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal inbuf_addr_read_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal mode_read_read_fu_156_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_ioackin_memptr_ARREADY : STD_LOGIC;
    signal exitcond3_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond3_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next3_fu_643_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_next3_reg_938 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond2_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter1_exitcond2_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next2_fu_660_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_next2_reg_947 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond1_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter1_exitcond1_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_677_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_next1_reg_956 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal i_9_fu_694_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_9_reg_964 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_134_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_reg_969 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_131_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_711_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_11_reg_982 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal buf_addr_8_reg_987 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_136_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_memptr_AWREADY : STD_LOGIC;
    signal i_13_fu_729_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_13_reg_1001 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_144_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_144_reg_1006 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next4_fu_756_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal exitcond_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter1_exitcond_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_773_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_next_reg_1039 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal i_8_fu_790_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_1047 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal buf_addr_5_reg_1052 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_130_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_808_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_12_reg_1066 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_138_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_reg_1071 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond9_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next8_fu_835_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal i_6_fu_852_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_1103 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp_125_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_reg_1108 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_869_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_7_reg_1121 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_i_8_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_8_reg_1126 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_i_fu_886_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal phitmp_i_reg_1140 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal tmp_212_i_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_568_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_aes_expandEncKey_fu_568_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_we0 : STD_LOGIC;
    signal buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_ce1 : STD_LOGIC;
    signal buf_we1 : STD_LOGIC;
    signal buf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_buf_r_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_buf_r_we1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_buf_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_ctx_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_ctx_key_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_ctx_key_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_ctx_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_ctx_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_544_ctx_key_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_ctx_key_we1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_544_ctx_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_ap_start : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_ap_done : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_ap_idle : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_ap_ready : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_buf_r_ce1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_buf_r_we1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_buf_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_ctx_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_ctx_key_ce0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_ctx_key_we0 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_ctx_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_ctx_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_decrypt_ecb_fu_555_ctx_key_ce1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_ctx_key_we1 : STD_LOGIC;
    signal grp_aes256_decrypt_ecb_fu_555_ctx_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_568_ap_start : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_568_ap_idle : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_568_ap_ready : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_568_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_expandEncKey_fu_568_k_ce0 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_568_k_we0 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_568_k_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_568_k_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes_expandEncKey_fu_568_k_ce1 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_568_k_we1 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_568_k_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar3_phi_fu_378_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar2_phi_fu_390_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar1_phi_fu_402_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_410 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_4_reg_421 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_5_reg_432 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal indvar_phi_fu_458_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_466 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal i_2_reg_477 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal i_reg_499 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_i_reg_510 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal rcon_i_reg_521 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_10_reg_533 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_aes_expandEncKey_fu_568_ap_start : STD_LOGIC := '0';
    signal tmp_129_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_127_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_139_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_145_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_126_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_132_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_142_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_123_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_122_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_121_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_137_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_memptr_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_memptr_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_memptr_WREADY : STD_LOGIC := '0';
    signal grp_fu_578_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);

    component aes256_encrypt_ecb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_we1 : OUT STD_LOGIC;
        buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_enckey_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_enckey_ce0 : OUT STD_LOGIC;
        ctx_enckey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_enckey_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_enckey_ce1 : OUT STD_LOGIC;
        ctx_enckey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce0 : OUT STD_LOGIC;
        ctx_key_we0 : OUT STD_LOGIC;
        ctx_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce1 : OUT STD_LOGIC;
        ctx_key_we1 : OUT STD_LOGIC;
        ctx_key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_decrypt_ecb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_we1 : OUT STD_LOGIC;
        buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_deckey_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_deckey_ce0 : OUT STD_LOGIC;
        ctx_deckey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_deckey_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_deckey_ce1 : OUT STD_LOGIC;
        ctx_deckey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce0 : OUT STD_LOGIC;
        ctx_key_we0 : OUT STD_LOGIC;
        ctx_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ctx_key_ce1 : OUT STD_LOGIC;
        ctx_key_we1 : OUT STD_LOGIC;
        ctx_key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_expandEncKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce0 : OUT STD_LOGIC;
        k_we0 : OUT STD_LOGIC;
        k_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        k_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce1 : OUT STD_LOGIC;
        k_we1 : OUT STD_LOGIC;
        k_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        k_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_iv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_key IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_ctx_decfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_ctx_encg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256cbc_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component aes256cbc_p0_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mode : OUT STD_LOGIC_VECTOR (2 downto 0);
        inbuf_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
        outbuf_addr : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes256cbc_memptr_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    iv_U : component aes256cbc_iv
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iv_address0,
        ce0 => iv_ce0,
        we0 => iv_we0,
        d0 => reg_585,
        q0 => iv_q0);

    xorv_U : component aes256cbc_iv
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xorv_address0,
        ce0 => xorv_ce0,
        we0 => xorv_we0,
        d0 => xorv_d0,
        q0 => xorv_q0);

    key_U : component aes256cbc_key
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => key_address0,
        ce0 => key_ce0,
        we0 => key_we0,
        d0 => reg_585,
        q0 => key_q0);

    ctx_deckey_U : component aes256cbc_ctx_decfYi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_deckey_address0,
        ce0 => ctx_deckey_ce0,
        we0 => ctx_deckey_we0,
        d0 => ctx_deckey_d0,
        q0 => ctx_deckey_q0,
        address1 => ctx_deckey_address1,
        ce1 => ctx_deckey_ce1,
        we1 => ctx_deckey_we1,
        d1 => grp_aes_expandEncKey_fu_568_k_d1,
        q1 => ctx_deckey_q1);

    ctx_enckey_U : component aes256cbc_ctx_encg8j
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_enckey_address0,
        ce0 => ctx_enckey_ce0,
        we0 => ctx_enckey_we0,
        d0 => key_q0,
        q0 => ctx_enckey_q0,
        address1 => grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address1,
        ce1 => ctx_enckey_ce1,
        q1 => ctx_enckey_q1);

    ctx_key_U : component aes256cbc_ctx_decfYi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_key_address0,
        ce0 => ctx_key_ce0,
        we0 => ctx_key_we0,
        d0 => ctx_key_d0,
        q0 => ctx_key_q0,
        address1 => ctx_key_address1,
        ce1 => ctx_key_ce1,
        we1 => ctx_key_we1,
        d1 => ctx_key_d1,
        q1 => ctx_key_q1);

    lastbuf_U : component aes256cbc_iv
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lastbuf_address0,
        ce0 => lastbuf_ce0,
        we0 => lastbuf_we0,
        d0 => buf_q0,
        q0 => lastbuf_q0);

    aes256cbc_AXILiteS_s_axi_U : component aes256cbc_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    aes256cbc_p0_s_axi_U : component aes256cbc_p0_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_P0_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_P0_DATA_WIDTH)
    port map (
        AWVALID => s_axi_p0_AWVALID,
        AWREADY => s_axi_p0_AWREADY,
        AWADDR => s_axi_p0_AWADDR,
        WVALID => s_axi_p0_WVALID,
        WREADY => s_axi_p0_WREADY,
        WDATA => s_axi_p0_WDATA,
        WSTRB => s_axi_p0_WSTRB,
        ARVALID => s_axi_p0_ARVALID,
        ARREADY => s_axi_p0_ARREADY,
        ARADDR => s_axi_p0_ARADDR,
        RVALID => s_axi_p0_RVALID,
        RREADY => s_axi_p0_RREADY,
        RDATA => s_axi_p0_RDATA,
        RRESP => s_axi_p0_RRESP,
        BVALID => s_axi_p0_BVALID,
        BREADY => s_axi_p0_BREADY,
        BRESP => s_axi_p0_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mode => mode,
        inbuf_addr => inbuf_addr,
        outbuf_addr => outbuf_addr);

    aes256cbc_memptr_m_axi_U : component aes256cbc_memptr_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEMPTR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEMPTR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEMPTR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEMPTR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEMPTR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEMPTR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEMPTR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEMPTR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEMPTR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEMPTR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEMPTR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEMPTR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_memptr_AWVALID,
        AWREADY => m_axi_memptr_AWREADY,
        AWADDR => m_axi_memptr_AWADDR,
        AWID => m_axi_memptr_AWID,
        AWLEN => m_axi_memptr_AWLEN,
        AWSIZE => m_axi_memptr_AWSIZE,
        AWBURST => m_axi_memptr_AWBURST,
        AWLOCK => m_axi_memptr_AWLOCK,
        AWCACHE => m_axi_memptr_AWCACHE,
        AWPROT => m_axi_memptr_AWPROT,
        AWQOS => m_axi_memptr_AWQOS,
        AWREGION => m_axi_memptr_AWREGION,
        AWUSER => m_axi_memptr_AWUSER,
        WVALID => m_axi_memptr_WVALID,
        WREADY => m_axi_memptr_WREADY,
        WDATA => m_axi_memptr_WDATA,
        WSTRB => m_axi_memptr_WSTRB,
        WLAST => m_axi_memptr_WLAST,
        WID => m_axi_memptr_WID,
        WUSER => m_axi_memptr_WUSER,
        ARVALID => m_axi_memptr_ARVALID,
        ARREADY => m_axi_memptr_ARREADY,
        ARADDR => m_axi_memptr_ARADDR,
        ARID => m_axi_memptr_ARID,
        ARLEN => m_axi_memptr_ARLEN,
        ARSIZE => m_axi_memptr_ARSIZE,
        ARBURST => m_axi_memptr_ARBURST,
        ARLOCK => m_axi_memptr_ARLOCK,
        ARCACHE => m_axi_memptr_ARCACHE,
        ARPROT => m_axi_memptr_ARPROT,
        ARQOS => m_axi_memptr_ARQOS,
        ARREGION => m_axi_memptr_ARREGION,
        ARUSER => m_axi_memptr_ARUSER,
        RVALID => m_axi_memptr_RVALID,
        RREADY => m_axi_memptr_RREADY,
        RDATA => m_axi_memptr_RDATA,
        RLAST => m_axi_memptr_RLAST,
        RID => m_axi_memptr_RID,
        RUSER => m_axi_memptr_RUSER,
        RRESP => m_axi_memptr_RRESP,
        BVALID => m_axi_memptr_BVALID,
        BREADY => m_axi_memptr_BREADY,
        BRESP => m_axi_memptr_BRESP,
        BID => m_axi_memptr_BID,
        BUSER => m_axi_memptr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => memptr_ARVALID,
        I_ARREADY => memptr_ARREADY,
        I_ARADDR => memptr_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => memptr_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => memptr_RVALID,
        I_RREADY => memptr_RREADY,
        I_RDATA => memptr_RDATA,
        I_RID => memptr_RID,
        I_RUSER => memptr_RUSER,
        I_RRESP => memptr_RRESP,
        I_RLAST => memptr_RLAST,
        I_AWVALID => memptr_AWVALID,
        I_AWREADY => memptr_AWREADY,
        I_AWADDR => memptr_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_10,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => memptr_WVALID,
        I_WREADY => memptr_WREADY,
        I_WDATA => reg_592,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => memptr_BVALID,
        I_BREADY => memptr_BREADY,
        I_BRESP => memptr_BRESP,
        I_BID => memptr_BID,
        I_BUSER => memptr_BUSER);

    buf_U : component aes256cbc_buf
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf_address0,
        ce0 => buf_ce0,
        we0 => buf_we0,
        d0 => buf_d0,
        q0 => buf_q0,
        address1 => buf_address1,
        ce1 => buf_ce1,
        we1 => buf_we1,
        d1 => buf_d1,
        q1 => buf_q1);

    grp_aes256_encrypt_ecb_fu_544 : component aes256_encrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes256_encrypt_ecb_fu_544_ap_start,
        ap_done => grp_aes256_encrypt_ecb_fu_544_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_fu_544_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_fu_544_ap_ready,
        buf_r_address0 => grp_aes256_encrypt_ecb_fu_544_buf_r_address0,
        buf_r_ce0 => grp_aes256_encrypt_ecb_fu_544_buf_r_ce0,
        buf_r_we0 => grp_aes256_encrypt_ecb_fu_544_buf_r_we0,
        buf_r_d0 => grp_aes256_encrypt_ecb_fu_544_buf_r_d0,
        buf_r_q0 => buf_q0,
        buf_r_address1 => grp_aes256_encrypt_ecb_fu_544_buf_r_address1,
        buf_r_ce1 => grp_aes256_encrypt_ecb_fu_544_buf_r_ce1,
        buf_r_we1 => grp_aes256_encrypt_ecb_fu_544_buf_r_we1,
        buf_r_d1 => grp_aes256_encrypt_ecb_fu_544_buf_r_d1,
        buf_r_q1 => buf_q1,
        ctx_enckey_address0 => grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address0,
        ctx_enckey_ce0 => grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce0,
        ctx_enckey_q0 => ctx_enckey_q0,
        ctx_enckey_address1 => grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address1,
        ctx_enckey_ce1 => grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce1,
        ctx_enckey_q1 => ctx_enckey_q1,
        ctx_key_address0 => grp_aes256_encrypt_ecb_fu_544_ctx_key_address0,
        ctx_key_ce0 => grp_aes256_encrypt_ecb_fu_544_ctx_key_ce0,
        ctx_key_we0 => grp_aes256_encrypt_ecb_fu_544_ctx_key_we0,
        ctx_key_d0 => grp_aes256_encrypt_ecb_fu_544_ctx_key_d0,
        ctx_key_q0 => ctx_key_q0,
        ctx_key_address1 => grp_aes256_encrypt_ecb_fu_544_ctx_key_address1,
        ctx_key_ce1 => grp_aes256_encrypt_ecb_fu_544_ctx_key_ce1,
        ctx_key_we1 => grp_aes256_encrypt_ecb_fu_544_ctx_key_we1,
        ctx_key_d1 => grp_aes256_encrypt_ecb_fu_544_ctx_key_d1,
        ctx_key_q1 => ctx_key_q1);

    grp_aes256_decrypt_ecb_fu_555 : component aes256_decrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes256_decrypt_ecb_fu_555_ap_start,
        ap_done => grp_aes256_decrypt_ecb_fu_555_ap_done,
        ap_idle => grp_aes256_decrypt_ecb_fu_555_ap_idle,
        ap_ready => grp_aes256_decrypt_ecb_fu_555_ap_ready,
        buf_r_address0 => grp_aes256_decrypt_ecb_fu_555_buf_r_address0,
        buf_r_ce0 => grp_aes256_decrypt_ecb_fu_555_buf_r_ce0,
        buf_r_we0 => grp_aes256_decrypt_ecb_fu_555_buf_r_we0,
        buf_r_d0 => grp_aes256_decrypt_ecb_fu_555_buf_r_d0,
        buf_r_q0 => buf_q0,
        buf_r_address1 => grp_aes256_decrypt_ecb_fu_555_buf_r_address1,
        buf_r_ce1 => grp_aes256_decrypt_ecb_fu_555_buf_r_ce1,
        buf_r_we1 => grp_aes256_decrypt_ecb_fu_555_buf_r_we1,
        buf_r_d1 => grp_aes256_decrypt_ecb_fu_555_buf_r_d1,
        buf_r_q1 => buf_q1,
        ctx_deckey_address0 => grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address0,
        ctx_deckey_ce0 => grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce0,
        ctx_deckey_q0 => ctx_deckey_q0,
        ctx_deckey_address1 => grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address1,
        ctx_deckey_ce1 => grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce1,
        ctx_deckey_q1 => ctx_deckey_q1,
        ctx_key_address0 => grp_aes256_decrypt_ecb_fu_555_ctx_key_address0,
        ctx_key_ce0 => grp_aes256_decrypt_ecb_fu_555_ctx_key_ce0,
        ctx_key_we0 => grp_aes256_decrypt_ecb_fu_555_ctx_key_we0,
        ctx_key_d0 => grp_aes256_decrypt_ecb_fu_555_ctx_key_d0,
        ctx_key_q0 => ctx_key_q0,
        ctx_key_address1 => grp_aes256_decrypt_ecb_fu_555_ctx_key_address1,
        ctx_key_ce1 => grp_aes256_decrypt_ecb_fu_555_ctx_key_ce1,
        ctx_key_we1 => grp_aes256_decrypt_ecb_fu_555_ctx_key_we1,
        ctx_key_d1 => grp_aes256_decrypt_ecb_fu_555_ctx_key_d1,
        ctx_key_q1 => ctx_key_q1);

    grp_aes_expandEncKey_fu_568 : component aes_expandEncKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_expandEncKey_fu_568_ap_start,
        ap_done => grp_aes_expandEncKey_fu_568_ap_done,
        ap_idle => grp_aes_expandEncKey_fu_568_ap_idle,
        ap_ready => grp_aes_expandEncKey_fu_568_ap_ready,
        k_address0 => grp_aes_expandEncKey_fu_568_k_address0,
        k_ce0 => grp_aes_expandEncKey_fu_568_k_ce0,
        k_we0 => grp_aes_expandEncKey_fu_568_k_we0,
        k_d0 => grp_aes_expandEncKey_fu_568_k_d0,
        k_q0 => ctx_deckey_q0,
        k_address1 => grp_aes_expandEncKey_fu_568_k_address1,
        k_ce1 => grp_aes_expandEncKey_fu_568_k_ce1,
        k_we1 => grp_aes_expandEncKey_fu_568_k_we1,
        k_d1 => grp_aes_expandEncKey_fu_568_k_d1,
        k_q1 => ctx_deckey_q1,
        rc_read => rcon_i_reg_521,
        ap_return => grp_aes_expandEncKey_fu_568_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_fu_637_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((mode_read_reg_906 = ap_const_lv3_4) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond3_fu_637_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((mode_read_reg_906 = ap_const_lv3_4) and (ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_fu_637_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((mode_read_reg_906 = ap_const_lv3_4) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_fu_654_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((mode_read_reg_906 = ap_const_lv3_3) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond2_fu_654_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((mode_read_reg_906 = ap_const_lv3_3) and (ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_fu_654_p2))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((mode_read_reg_906 = ap_const_lv3_3) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond1_fu_671_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond1_fu_671_p2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond1_fu_671_p2))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and not((ap_const_lv1_0 = exitcond4_fu_750_p2)))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_lv1_0 = exitcond4_fu_750_p2))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and not((ap_const_lv1_0 = exitcond4_fu_750_p2))))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY)))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond_fu_767_p2)))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((mode_read_reg_906 = ap_const_lv3_1) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond_fu_767_p2))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_1;
                elsif ((((mode_read_reg_906 = ap_const_lv3_1) and (ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond_fu_767_p2))))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((mode_read_reg_906 = ap_const_lv3_1) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and not((ap_const_lv1_0 = exitcond9_fu_829_p2)))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state43) and not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_lv1_0 = exitcond9_fu_829_p2))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state43) and not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and not((ap_const_lv1_0 = exitcond9_fu_829_p2))))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY)))) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state43) and not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_lv1_0 = tmp_131_fu_688_p2)))) then 
                    ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes256_decrypt_ecb_fu_555_ap_ready)) then 
                    ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state40) and not((ap_const_lv1_0 = tmp_130_fu_784_p2)))) then 
                    ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes256_encrypt_ecb_fu_544_ap_ready)) then 
                    ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes_expandEncKey_fu_568_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_expandEncKey_fu_568_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state57) and (ap_const_lv1_0 = tmp_212_i_fu_880_p2))) then 
                    ap_reg_grp_aes_expandEncKey_fu_568_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_expandEncKey_fu_568_ap_ready)) then 
                    ap_reg_grp_aes_expandEncKey_fu_568_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_memptr_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_memptr_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_4) and not((((mode_read_reg_906 = ap_const_lv3_4) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_3) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_1) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY))))) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_3) and not((((mode_read_reg_906 = ap_const_lv3_4) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_3) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_1) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY))))) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_2) and not((((mode_read_reg_906 = ap_const_lv3_4) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_3) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_1) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY))))) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_1) and not((((mode_read_reg_906 = ap_const_lv3_4) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_3) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_1) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY))))))) then 
                    ap_reg_ioackin_memptr_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_4) and (ap_const_logic_1 = memptr_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_3) and (ap_const_logic_1 = memptr_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_2) and (ap_const_logic_1 = memptr_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_1) and (ap_const_logic_1 = memptr_ARREADY)))) then 
                    ap_reg_ioackin_memptr_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_memptr_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_memptr_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_state43) and not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY)))))) then 
                    ap_reg_ioackin_memptr_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_1 = memptr_AWREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state43) and not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_1 = memptr_AWREADY)))) then 
                    ap_reg_ioackin_memptr_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_memptr_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_memptr_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY)))) or ((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY)))))) then 
                    ap_reg_ioackin_memptr_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_1 = memptr_WREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_1 = memptr_WREADY)))) then 
                    ap_reg_ioackin_memptr_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_10_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55) and not((ap_const_lv1_0 = tmp_i_fu_863_p2)))) then 
                i_10_reg_533 <= ap_const_lv3_7;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state58) and not((ap_const_logic_0 = grp_aes_expandEncKey_fu_568_ap_done)))) then 
                i_10_reg_533 <= phitmp_i_reg_1140;
            end if; 
        end if;
    end process;

    i_1_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
                i_1_reg_466 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
                i_1_reg_466 <= i_8_reg_1047;
            end if; 
        end if;
    end process;

    i_2_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
                i_2_reg_477 <= i_12_reg_1066;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state42) and not((ap_const_logic_0 = grp_aes256_encrypt_ecb_fu_544_ap_done)))) then 
                i_2_reg_477 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                i_3_reg_410 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                i_3_reg_410 <= i_9_reg_964;
            end if; 
        end if;
    end process;

    i_4_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
                i_4_reg_421 <= i_11_reg_982;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state23) and not((ap_const_logic_0 = grp_aes256_decrypt_ecb_fu_555_ap_done)))) then 
                i_4_reg_421 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_5_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24) and not((ap_const_lv1_0 = tmp_136_fu_705_p2)))) then 
                i_5_reg_432 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
                i_5_reg_432 <= i_13_reg_1001;
            end if; 
        end if;
    end process;

    i_i_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state53) and not((ap_const_lv1_0 = tmp_124_fu_846_p2)))) then 
                i_i_reg_510 <= ap_const_lv6_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state56))) then 
                i_i_reg_510 <= i_7_reg_1121;
            end if; 
        end if;
    end process;

    i_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_156_p2 = ap_const_lv3_0))) then 
                i_reg_499 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
                i_reg_499 <= i_6_reg_1103;
            end if; 
        end if;
    end process;

    indvar1_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))))) then 
                indvar1_reg_398 <= indvar_next1_reg_956;
            elsif (((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                indvar1_reg_398 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar2_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))))) then 
                indvar2_reg_386 <= indvar_next2_reg_947;
            elsif (((mode_read_reg_906 = ap_const_lv3_3) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                indvar2_reg_386 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar3_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))))) then 
                indvar3_reg_374 <= indvar_next3_reg_938;
            elsif (((mode_read_reg_906 = ap_const_lv3_4) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                indvar3_reg_374 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar4_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_0 = exitcond4_fu_750_p2))) then 
                indvar4_reg_443 <= indvar_next4_fu_756_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then 
                indvar4_reg_443 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar7_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0) and (ap_const_lv1_0 = exitcond9_fu_829_p2))) then 
                indvar7_reg_488 <= indvar_next8_fu_835_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state43) and not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then 
                indvar7_reg_488 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))))) then 
                indvar_reg_454 <= indvar_next_reg_1039;
            elsif (((mode_read_reg_906 = ap_const_lv3_1) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                indvar_reg_454 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    rcon_i_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55) and not((ap_const_lv1_0 = tmp_i_fu_863_p2)))) then 
                rcon_i_reg_521 <= ap_const_lv8_1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state58) and not((ap_const_logic_0 = grp_aes_expandEncKey_fu_568_ap_done)))) then 
                rcon_i_reg_521 <= grp_aes_expandEncKey_fu_568_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp0_iter1_exitcond3_reg_934 <= exitcond3_reg_934;
                ap_pipeline_reg_pp0_iter1_indvar3_reg_374 <= indvar3_reg_374;
                exitcond3_reg_934 <= exitcond3_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp1_iter1_exitcond2_reg_943 <= exitcond2_reg_943;
                ap_pipeline_reg_pp1_iter1_indvar2_reg_386 <= indvar2_reg_386;
                exitcond2_reg_943 <= exitcond2_fu_654_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp2_iter1_exitcond1_reg_952 <= exitcond1_reg_952;
                ap_pipeline_reg_pp2_iter1_indvar1_reg_398 <= indvar1_reg_398;
                exitcond1_reg_952 <= exitcond1_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))))) then
                ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021 <= exitcond4_reg_1021;
                exitcond4_reg_1021 <= exitcond4_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp4_iter1_exitcond_reg_1035 <= exitcond_reg_1035;
                ap_pipeline_reg_pp4_iter1_indvar_reg_454 <= indvar_reg_454;
                exitcond_reg_1035 <= exitcond_fu_767_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))))) then
                ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086 <= exitcond9_reg_1086;
                exitcond9_reg_1086 <= exitcond9_fu_829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = tmp_130_fu_784_p2))) then
                buf_addr_5_reg_1052 <= tmp_132_fu_796_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = tmp_136_fu_705_p2))) then
                buf_addr_8_reg_987 <= tmp_139_fu_717_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then
                i_11_reg_982 <= i_11_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state43) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then
                i_12_reg_1066 <= i_12_fu_808_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then
                i_13_reg_1001 <= i_13_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state53))) then
                i_6_reg_1103 <= i_6_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55))) then
                i_7_reg_1121 <= i_7_fu_869_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state40))) then
                i_8_reg_1047 <= i_8_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then
                i_9_reg_964 <= i_9_fu_694_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                inbuf_addr_read_reg_898 <= inbuf_addr;
                mode_read_reg_906 <= mode;
                outbuf_addr_read_reg_892 <= outbuf_addr;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then
                indvar_next1_reg_956 <= indvar_next1_fu_677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then
                indvar_next2_reg_947 <= indvar_next2_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_next3_reg_938 <= indvar_next3_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0))) then
                indvar_next_reg_1039 <= indvar_next_fu_773_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state57) and (ap_const_lv1_0 = tmp_212_i_fu_880_p2))) then
                phitmp_i_reg_1140 <= phitmp_i_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0)))))) then
                reg_585 <= memptr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_lv1_0 = exitcond4_reg_1021)) or ((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_enable_reg_pp5_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_lv1_0 = exitcond9_reg_1086)))) then
                reg_592 <= buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state53) and (ap_const_lv1_0 = tmp_124_fu_846_p2))) then
                    tmp_125_reg_1108(4 downto 0) <= tmp_125_fu_858_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = tmp_131_fu_688_p2))) then
                    tmp_134_reg_969(4 downto 0) <= tmp_134_fu_700_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state43) and (ap_const_lv1_0 = tmp_135_fu_802_p2) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then
                    tmp_138_reg_1071(4 downto 0) <= tmp_138_fu_814_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = tmp_141_fu_723_p2) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then
                    tmp_144_reg_1006(4 downto 0) <= tmp_144_fu_735_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_lv1_0 = tmp_i_fu_863_p2))) then
                    tmp_i_8_reg_1126(5 downto 0) <= tmp_i_8_fu_875_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_134_reg_969(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_144_reg_1006(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_138_reg_1071(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_125_reg_1108(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_i_8_reg_1126(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, mode_read_reg_906, ap_enable_reg_pp4_iter1, exitcond_reg_1035, tmp_135_fu_802_p2, ap_enable_reg_pp5_iter2, ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086, ap_enable_reg_pp2_iter1, exitcond1_reg_952, tmp_141_fu_723_p2, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021, ap_enable_reg_pp1_iter1, exitcond2_reg_943, ap_enable_reg_pp0_iter1, exitcond3_reg_934, memptr_RVALID, memptr_BVALID, ap_enable_reg_pp3_iter1, ap_sig_ioackin_memptr_WREADY, ap_enable_reg_pp5_iter1, mode_read_read_fu_156_p2, ap_sig_ioackin_memptr_ARREADY, exitcond3_fu_637_p2, ap_enable_reg_pp0_iter0, exitcond2_fu_654_p2, ap_enable_reg_pp1_iter0, exitcond1_fu_671_p2, ap_enable_reg_pp2_iter0, tmp_131_fu_688_p2, tmp_136_fu_705_p2, ap_sig_ioackin_memptr_AWREADY, exitcond4_fu_750_p2, ap_enable_reg_pp3_iter0, exitcond_fu_767_p2, ap_enable_reg_pp4_iter0, tmp_130_fu_784_p2, exitcond9_fu_829_p2, ap_enable_reg_pp5_iter0, tmp_124_fu_846_p2, tmp_i_fu_863_p2, tmp_212_i_fu_880_p2, grp_aes_expandEncKey_fu_568_ap_done, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2, grp_aes256_encrypt_ecb_fu_544_ap_done, grp_aes256_decrypt_ecb_fu_555_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((ap_start = ap_const_logic_0)) and (mode_read_read_fu_156_p2 = ap_const_lv3_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                elsif ((not((ap_start = ap_const_logic_0)) and not((mode_read_read_fu_156_p2 = ap_const_lv3_0)) and not((ap_const_lv3_1 = mode_read_read_fu_156_p2)) and not((ap_const_lv3_2 = mode_read_read_fu_156_p2)) and not((ap_const_lv3_3 = mode_read_read_fu_156_p2)) and not((ap_const_lv3_4 = mode_read_read_fu_156_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                elsif ((not((ap_start = ap_const_logic_0)) and ((ap_const_lv3_1 = mode_read_read_fu_156_p2) or (ap_const_lv3_2 = mode_read_read_fu_156_p2) or (ap_const_lv3_3 = mode_read_read_fu_156_p2) or (ap_const_lv3_4 = mode_read_read_fu_156_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((mode_read_reg_906 = ap_const_lv3_4) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_3) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)) or ((mode_read_reg_906 = ap_const_lv3_1) and (ap_const_logic_0 = ap_sig_ioackin_memptr_ARREADY)))) and ((mode_read_reg_906 = ap_const_lv3_1) or (mode_read_reg_906 = ap_const_lv3_2) or (mode_read_reg_906 = ap_const_lv3_3) or (mode_read_reg_906 = ap_const_lv3_4)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((mode_read_reg_906 = ap_const_lv3_1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((mode_read_reg_906 = ap_const_lv3_2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((mode_read_reg_906 = ap_const_lv3_3)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond3_fu_637_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond3_fu_637_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond2_fu_654_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond2_fu_654_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond1_fu_671_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond1_fu_671_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (not((ap_const_lv1_0 = tmp_131_fu_688_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state23 => 
                if (not((ap_const_logic_0 = grp_aes256_decrypt_ecb_fu_555_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (not((ap_const_lv1_0 = tmp_136_fu_705_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                if ((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_lv1_0 = tmp_141_fu_723_p2) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and not((ap_const_lv1_0 = exitcond4_fu_750_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and not((ap_const_lv1_0 = exitcond4_fu_750_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (not(((mode_read_reg_906 = ap_const_lv3_2) and (memptr_BVALID = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and not((ap_const_lv1_0 = exitcond_fu_767_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and not((ap_const_lv1_0 = exitcond_fu_767_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (not((ap_const_lv1_0 = tmp_130_fu_784_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state42 => 
                if (not((ap_const_logic_0 = grp_aes256_encrypt_ecb_fu_544_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if ((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((ap_const_lv1_0 = tmp_135_fu_802_p2) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp5_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0) and not((ap_const_lv1_0 = exitcond9_fu_829_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp5_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp5_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0) and not((ap_const_lv1_0 = exitcond9_fu_829_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp5_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (not((memptr_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (not((ap_const_lv1_0 = tmp_124_fu_846_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state55 => 
                if (not((ap_const_lv1_0 = tmp_i_fu_863_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state57 => 
                if (not((ap_const_lv1_0 = tmp_212_i_fu_880_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state58 => 
                if (not((ap_const_logic_0 = grp_aes_expandEncKey_fu_568_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(34 downto 34);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state21 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state22 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state23 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state24 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state25 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state26 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state27 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state35 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state39 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state40 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state41 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state42 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state43 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state44 <= ap_CS_fsm(33 downto 33);
    ap_CS_fsm_state52 <= ap_CS_fsm(39 downto 39);
    ap_CS_fsm_state53 <= ap_CS_fsm(40 downto 40);
    ap_CS_fsm_state54 <= ap_CS_fsm(41 downto 41);
    ap_CS_fsm_state55 <= ap_CS_fsm(42 downto 42);
    ap_CS_fsm_state56 <= ap_CS_fsm(43 downto 43);
    ap_CS_fsm_state57 <= ap_CS_fsm(44 downto 44);
    ap_CS_fsm_state58 <= ap_CS_fsm(45 downto 45);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);

    ap_done_assign_proc : process(mode_read_reg_906, ap_CS_fsm_state35, memptr_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state35) and not(((mode_read_reg_906 = ap_const_lv3_2) and (memptr_BVALID = ap_const_logic_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(mode_read_reg_906, ap_CS_fsm_state35, memptr_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state35) and not(((mode_read_reg_906 = ap_const_lv3_2) and (memptr_BVALID = ap_const_logic_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_memptr_ARREADY_assign_proc : process(memptr_ARREADY, ap_reg_ioackin_memptr_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY)) then 
            ap_sig_ioackin_memptr_ARREADY <= memptr_ARREADY;
        else 
            ap_sig_ioackin_memptr_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_memptr_AWREADY_assign_proc : process(memptr_AWREADY, ap_reg_ioackin_memptr_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_memptr_AWREADY)) then 
            ap_sig_ioackin_memptr_AWREADY <= memptr_AWREADY;
        else 
            ap_sig_ioackin_memptr_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_memptr_WREADY_assign_proc : process(memptr_WREADY, ap_reg_ioackin_memptr_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_memptr_WREADY)) then 
            ap_sig_ioackin_memptr_WREADY <= memptr_WREADY;
        else 
            ap_sig_ioackin_memptr_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    buf_address0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_state21, tmp_134_fu_700_p1, tmp_131_fu_688_p2, ap_CS_fsm_state24, buf_addr_8_reg_987, ap_enable_reg_pp3_iter0, ap_CS_fsm_state40, buf_addr_5_reg_1052, tmp_130_fu_784_p2, tmp_138_fu_814_p1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2, grp_aes256_encrypt_ecb_fu_544_buf_r_address0, grp_aes256_decrypt_ecb_fu_555_buf_r_address0, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state41, ap_CS_fsm_state42, tmp_127_fu_683_p1, tmp_139_fu_717_p1, tmp_145_fu_762_p1, tmp_126_fu_779_p1, tmp_132_fu_796_p1, tmp_142_fu_841_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0))) then 
            buf_address0 <= tmp_142_fu_841_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            buf_address0 <= tmp_138_fu_814_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
            buf_address0 <= buf_addr_5_reg_1052;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = tmp_130_fu_784_p2))) then 
            buf_address0 <= tmp_132_fu_796_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp4_iter2)) then 
            buf_address0 <= tmp_126_fu_779_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            buf_address0 <= tmp_145_fu_762_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
            buf_address0 <= buf_addr_8_reg_987;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
            buf_address0 <= tmp_139_fu_717_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = tmp_131_fu_688_p2))) then 
            buf_address0 <= tmp_134_fu_700_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter2)) then 
            buf_address0 <= tmp_127_fu_683_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_address0 <= grp_aes256_decrypt_ecb_fu_555_buf_r_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            buf_address0 <= grp_aes256_encrypt_ecb_fu_544_buf_r_address0;
        else 
            buf_address0 <= "XXXX";
        end if; 
    end process;


    buf_address1_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_buf_r_address1, grp_aes256_decrypt_ecb_fu_555_buf_r_address1, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_address1 <= grp_aes256_decrypt_ecb_fu_555_buf_r_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            buf_address1 <= grp_aes256_encrypt_ecb_fu_544_buf_r_address1;
        else 
            buf_address1 <= "XXXX";
        end if; 
    end process;


    buf_ce0_assign_proc : process(ap_enable_reg_pp4_iter1, exitcond_reg_1035, ap_CS_fsm_state43, tmp_135_fu_802_p2, ap_enable_reg_pp5_iter2, ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086, ap_enable_reg_pp2_iter1, exitcond1_reg_952, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021, memptr_RVALID, ap_CS_fsm_pp3_stage0, ap_sig_ioackin_memptr_WREADY, ap_CS_fsm_pp5_stage0, ap_CS_fsm_state21, tmp_131_fu_688_p2, ap_CS_fsm_state24, ap_sig_ioackin_memptr_AWREADY, ap_enable_reg_pp3_iter0, ap_CS_fsm_state40, tmp_130_fu_784_p2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2, grp_aes256_encrypt_ecb_fu_544_buf_r_ce0, grp_aes256_decrypt_ecb_fu_555_buf_r_ce0, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = tmp_131_fu_688_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state24)) or ((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = tmp_130_fu_784_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state43) and not((not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp5_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_sig_ioackin_memptr_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp5_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state41)) or (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2)) or (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2)))) then 
            buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_ce0 <= grp_aes256_decrypt_ecb_fu_555_buf_r_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            buf_ce0 <= grp_aes256_encrypt_ecb_fu_544_buf_r_ce0;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_ce1_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_buf_r_ce1, grp_aes256_decrypt_ecb_fu_555_buf_r_ce1, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_ce1 <= grp_aes256_decrypt_ecb_fu_555_buf_r_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            buf_ce1 <= grp_aes256_encrypt_ecb_fu_544_buf_r_ce1;
        else 
            buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_d0_assign_proc : process(reg_585, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2, grp_aes256_encrypt_ecb_fu_544_buf_r_d0, grp_aes256_decrypt_ecb_fu_555_buf_r_d0, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state41, ap_CS_fsm_state42, grp_fu_578_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state41)))) then 
            buf_d0 <= grp_fu_578_p2;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter2) or (ap_const_logic_1 = ap_enable_reg_pp4_iter2))) then 
            buf_d0 <= reg_585;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_d0 <= grp_aes256_decrypt_ecb_fu_555_buf_r_d0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            buf_d0 <= grp_aes256_encrypt_ecb_fu_544_buf_r_d0;
        else 
            buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_d1_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_buf_r_d1, grp_aes256_decrypt_ecb_fu_555_buf_r_d1, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_d1 <= grp_aes256_decrypt_ecb_fu_555_buf_r_d1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            buf_d1 <= grp_aes256_encrypt_ecb_fu_544_buf_r_d1;
        else 
            buf_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_we0_assign_proc : process(ap_enable_reg_pp4_iter1, exitcond_reg_1035, ap_enable_reg_pp2_iter1, exitcond1_reg_952, memptr_RVALID, ap_pipeline_reg_pp2_iter1_exitcond1_reg_952, ap_pipeline_reg_pp4_iter1_exitcond_reg_1035, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2, grp_aes256_encrypt_ecb_fu_544_buf_r_we0, grp_aes256_decrypt_ecb_fu_555_buf_r_we0, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state41)) or (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond1_reg_952)) or (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_reg_1035)))) then 
            buf_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_we0 <= grp_aes256_decrypt_ecb_fu_555_buf_r_we0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            buf_we0 <= grp_aes256_encrypt_ecb_fu_544_buf_r_we0;
        else 
            buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_we1_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_buf_r_we1, grp_aes256_decrypt_ecb_fu_555_buf_r_we1, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            buf_we1 <= grp_aes256_decrypt_ecb_fu_555_buf_r_we1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            buf_we1 <= grp_aes256_encrypt_ecb_fu_544_buf_r_we1;
        else 
            buf_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_address0_assign_proc : process(tmp_i_8_reg_1126, ap_CS_fsm_state58, grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address0, grp_aes_expandEncKey_fu_568_k_address0, ap_CS_fsm_state23, ap_CS_fsm_state56)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state56))) then 
            ctx_deckey_address0 <= tmp_i_8_reg_1126(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            ctx_deckey_address0 <= grp_aes_expandEncKey_fu_568_k_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_deckey_address0 <= grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address0;
        else 
            ctx_deckey_address0 <= "XXXXX";
        end if; 
    end process;


    ctx_deckey_address1_assign_proc : process(ap_CS_fsm_state58, grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address1, grp_aes_expandEncKey_fu_568_k_address1, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            ctx_deckey_address1 <= grp_aes_expandEncKey_fu_568_k_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_deckey_address1 <= grp_aes256_decrypt_ecb_fu_555_ctx_deckey_address1;
        else 
            ctx_deckey_address1 <= "XXXXX";
        end if; 
    end process;


    ctx_deckey_ce0_assign_proc : process(ap_CS_fsm_state58, grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce0, grp_aes_expandEncKey_fu_568_k_ce0, ap_CS_fsm_state23, ap_CS_fsm_state56)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state56))) then 
            ctx_deckey_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            ctx_deckey_ce0 <= grp_aes_expandEncKey_fu_568_k_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_deckey_ce0 <= grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce0;
        else 
            ctx_deckey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_ce1_assign_proc : process(ap_CS_fsm_state58, grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce1, grp_aes_expandEncKey_fu_568_k_ce1, ap_CS_fsm_state23)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            ctx_deckey_ce1 <= grp_aes_expandEncKey_fu_568_k_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_deckey_ce1 <= grp_aes256_decrypt_ecb_fu_555_ctx_deckey_ce1;
        else 
            ctx_deckey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_d0_assign_proc : process(key_q0, ap_CS_fsm_state58, grp_aes_expandEncKey_fu_568_k_d0, ap_CS_fsm_state56)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state56))) then 
            ctx_deckey_d0 <= key_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            ctx_deckey_d0 <= grp_aes_expandEncKey_fu_568_k_d0;
        else 
            ctx_deckey_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_deckey_we0_assign_proc : process(ap_CS_fsm_state58, grp_aes_expandEncKey_fu_568_k_we0, ap_CS_fsm_state56)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state56)))) then 
            ctx_deckey_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            ctx_deckey_we0 <= grp_aes_expandEncKey_fu_568_k_we0;
        else 
            ctx_deckey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_we1_assign_proc : process(ap_CS_fsm_state58, grp_aes_expandEncKey_fu_568_k_we1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            ctx_deckey_we1 <= grp_aes_expandEncKey_fu_568_k_we1;
        else 
            ctx_deckey_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_address0_assign_proc : process(tmp_i_8_reg_1126, grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address0, ap_CS_fsm_state42, ap_CS_fsm_state56)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state56))) then 
            ctx_enckey_address0 <= tmp_i_8_reg_1126(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_enckey_address0 <= grp_aes256_encrypt_ecb_fu_544_ctx_enckey_address0;
        else 
            ctx_enckey_address0 <= "XXXXX";
        end if; 
    end process;


    ctx_enckey_ce0_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce0, ap_CS_fsm_state42, ap_CS_fsm_state56)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state56))) then 
            ctx_enckey_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_enckey_ce0 <= grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce0;
        else 
            ctx_enckey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_ce1_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce1, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_enckey_ce1 <= grp_aes256_encrypt_ecb_fu_544_ctx_enckey_ce1;
        else 
            ctx_enckey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_we0_assign_proc : process(ap_CS_fsm_state56)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state56)))) then 
            ctx_enckey_we0 <= ap_const_logic_1;
        else 
            ctx_enckey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_address0_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_key_address0, grp_aes256_decrypt_ecb_fu_555_ctx_key_address0, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_address0 <= grp_aes256_decrypt_ecb_fu_555_ctx_key_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_key_address0 <= grp_aes256_encrypt_ecb_fu_544_ctx_key_address0;
        else 
            ctx_key_address0 <= "XXXXX";
        end if; 
    end process;


    ctx_key_address1_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_key_address1, grp_aes256_decrypt_ecb_fu_555_ctx_key_address1, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_address1 <= grp_aes256_decrypt_ecb_fu_555_ctx_key_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_key_address1 <= grp_aes256_encrypt_ecb_fu_544_ctx_key_address1;
        else 
            ctx_key_address1 <= "XXXXX";
        end if; 
    end process;


    ctx_key_ce0_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_key_ce0, grp_aes256_decrypt_ecb_fu_555_ctx_key_ce0, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_ce0 <= grp_aes256_decrypt_ecb_fu_555_ctx_key_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_key_ce0 <= grp_aes256_encrypt_ecb_fu_544_ctx_key_ce0;
        else 
            ctx_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_ce1_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_key_ce1, grp_aes256_decrypt_ecb_fu_555_ctx_key_ce1, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_ce1 <= grp_aes256_decrypt_ecb_fu_555_ctx_key_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_key_ce1 <= grp_aes256_encrypt_ecb_fu_544_ctx_key_ce1;
        else 
            ctx_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_d0_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_key_d0, grp_aes256_decrypt_ecb_fu_555_ctx_key_d0, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_d0 <= grp_aes256_decrypt_ecb_fu_555_ctx_key_d0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_key_d0 <= grp_aes256_encrypt_ecb_fu_544_ctx_key_d0;
        else 
            ctx_key_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_key_d1_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_key_d1, grp_aes256_decrypt_ecb_fu_555_ctx_key_d1, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_d1 <= grp_aes256_decrypt_ecb_fu_555_ctx_key_d1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_key_d1 <= grp_aes256_encrypt_ecb_fu_544_ctx_key_d1;
        else 
            ctx_key_d1 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_key_we0_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_key_we0, grp_aes256_decrypt_ecb_fu_555_ctx_key_we0, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_we0 <= grp_aes256_decrypt_ecb_fu_555_ctx_key_we0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_key_we0 <= grp_aes256_encrypt_ecb_fu_544_ctx_key_we0;
        else 
            ctx_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_we1_assign_proc : process(grp_aes256_encrypt_ecb_fu_544_ctx_key_we1, grp_aes256_decrypt_ecb_fu_555_ctx_key_we1, ap_CS_fsm_state23, ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
            ctx_key_we1 <= grp_aes256_decrypt_ecb_fu_555_ctx_key_we1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            ctx_key_we1 <= grp_aes256_encrypt_ecb_fu_544_ctx_key_we1;
        else 
            ctx_key_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_671_p2 <= "1" when (indvar1_phi_fu_402_p4 = ap_const_lv5_10) else "0";
    exitcond2_fu_654_p2 <= "1" when (indvar2_phi_fu_390_p4 = ap_const_lv5_10) else "0";
    exitcond3_fu_637_p2 <= "1" when (indvar3_phi_fu_378_p4 = ap_const_lv6_20) else "0";
    exitcond4_fu_750_p2 <= "1" when (indvar4_reg_443 = ap_const_lv5_10) else "0";
    exitcond9_fu_829_p2 <= "1" when (indvar7_reg_488 = ap_const_lv5_10) else "0";
    exitcond_fu_767_p2 <= "1" when (indvar_phi_fu_458_p4 = ap_const_lv5_10) else "0";
    grp_aes256_decrypt_ecb_fu_555_ap_start <= ap_reg_grp_aes256_decrypt_ecb_fu_555_ap_start;
    grp_aes256_encrypt_ecb_fu_544_ap_start <= ap_reg_grp_aes256_encrypt_ecb_fu_544_ap_start;
    grp_aes_expandEncKey_fu_568_ap_start <= ap_reg_grp_aes_expandEncKey_fu_568_ap_start;
    grp_fu_578_p2 <= (xorv_q0 xor buf_q0);
    i_11_fu_711_p2 <= std_logic_vector(unsigned(i_4_reg_421) + unsigned(ap_const_lv5_1));
    i_12_fu_808_p2 <= std_logic_vector(unsigned(i_2_reg_477) + unsigned(ap_const_lv5_1));
    i_13_fu_729_p2 <= std_logic_vector(unsigned(i_5_reg_432) + unsigned(ap_const_lv5_1));
    i_6_fu_852_p2 <= std_logic_vector(unsigned(i_reg_499) + unsigned(ap_const_lv5_1));
    i_7_fu_869_p2 <= std_logic_vector(unsigned(i_i_reg_510) + unsigned(ap_const_lv6_1));
    i_8_fu_790_p2 <= std_logic_vector(unsigned(i_1_reg_466) + unsigned(ap_const_lv5_1));
    i_9_fu_694_p2 <= std_logic_vector(unsigned(i_3_reg_410) + unsigned(ap_const_lv5_1));

    indvar1_phi_fu_402_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond1_reg_952, indvar1_reg_398, indvar_next1_reg_956)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952))) then 
            indvar1_phi_fu_402_p4 <= indvar_next1_reg_956;
        else 
            indvar1_phi_fu_402_p4 <= indvar1_reg_398;
        end if; 
    end process;


    indvar2_phi_fu_390_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_reg_943, indvar2_reg_386, indvar_next2_reg_947)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943))) then 
            indvar2_phi_fu_390_p4 <= indvar_next2_reg_947;
        else 
            indvar2_phi_fu_390_p4 <= indvar2_reg_386;
        end if; 
    end process;


    indvar3_phi_fu_378_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_reg_934, indvar3_reg_374, indvar_next3_reg_938)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934))) then 
            indvar3_phi_fu_378_p4 <= indvar_next3_reg_938;
        else 
            indvar3_phi_fu_378_p4 <= indvar3_reg_374;
        end if; 
    end process;

    indvar_next1_fu_677_p2 <= std_logic_vector(unsigned(indvar1_phi_fu_402_p4) + unsigned(ap_const_lv5_1));
    indvar_next2_fu_660_p2 <= std_logic_vector(unsigned(indvar2_phi_fu_390_p4) + unsigned(ap_const_lv5_1));
    indvar_next3_fu_643_p2 <= std_logic_vector(unsigned(indvar3_phi_fu_378_p4) + unsigned(ap_const_lv6_1));
    indvar_next4_fu_756_p2 <= std_logic_vector(unsigned(indvar4_reg_443) + unsigned(ap_const_lv5_1));
    indvar_next8_fu_835_p2 <= std_logic_vector(unsigned(indvar7_reg_488) + unsigned(ap_const_lv5_1));
    indvar_next_fu_773_p2 <= std_logic_vector(unsigned(indvar_phi_fu_458_p4) + unsigned(ap_const_lv5_1));

    indvar_phi_fu_458_p4_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, exitcond_reg_1035, indvar_reg_454, indvar_next_reg_1039)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0))) then 
            indvar_phi_fu_458_p4 <= indvar_next_reg_1039;
        else 
            indvar_phi_fu_458_p4 <= indvar_reg_454;
        end if; 
    end process;


    iv_address0_assign_proc : process(ap_CS_fsm_state53, tmp_125_fu_858_p1, ap_enable_reg_pp1_iter2, tmp_128_fu_666_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state53))) then 
            iv_address0 <= tmp_125_fu_858_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp1_iter2)) then 
            iv_address0 <= tmp_128_fu_666_p1(4 - 1 downto 0);
        else 
            iv_address0 <= "XXXX";
        end if; 
    end process;


    iv_ce0_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond2_reg_943, memptr_RVALID, ap_CS_fsm_state53, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state53)) or (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2)))) then 
            iv_ce0 <= ap_const_logic_1;
        else 
            iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv_we0_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond2_reg_943, memptr_RVALID, ap_pipeline_reg_pp1_iter1_exitcond2_reg_943, ap_enable_reg_pp1_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter1_exitcond2_reg_943)))) then 
            iv_we0 <= ap_const_logic_1;
        else 
            iv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    key_address0_assign_proc : process(ap_CS_fsm_state55, tmp_i_8_fu_875_p1, ap_enable_reg_pp0_iter2, tmp_129_fu_649_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            key_address0 <= tmp_i_8_fu_875_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            key_address0 <= tmp_129_fu_649_p1(5 - 1 downto 0);
        else 
            key_address0 <= "XXXXX";
        end if; 
    end process;


    key_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond3_reg_934, memptr_RVALID, ap_CS_fsm_state55, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state55)) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_we0_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond3_reg_934, memptr_RVALID, ap_pipeline_reg_pp0_iter1_exitcond3_reg_934, ap_enable_reg_pp0_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond3_reg_934)))) then 
            key_we0 <= ap_const_logic_1;
        else 
            key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lastbuf_address0_assign_proc : process(ap_CS_fsm_state26, tmp_134_reg_969, tmp_144_fu_735_p1, ap_CS_fsm_state22)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            lastbuf_address0 <= tmp_144_fu_735_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            lastbuf_address0 <= tmp_134_reg_969(4 - 1 downto 0);
        else 
            lastbuf_address0 <= "XXXX";
        end if; 
    end process;


    lastbuf_ce0_assign_proc : process(ap_CS_fsm_state26, tmp_141_fu_723_p2, ap_sig_ioackin_memptr_AWREADY, ap_CS_fsm_state22)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state26) and not((not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_sig_ioackin_memptr_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            lastbuf_ce0 <= ap_const_logic_1;
        else 
            lastbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lastbuf_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            lastbuf_we0 <= ap_const_logic_1;
        else 
            lastbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    memptr_ARADDR_assign_proc : process(ap_CS_fsm_state2, mode_read_reg_906, tmp_123_fu_597_p1, tmp_122_fu_607_p1, tmp_121_fu_617_p1, tmp_s_fu_627_p1, ap_reg_ioackin_memptr_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY))) then
            if ((mode_read_reg_906 = ap_const_lv3_1)) then 
                memptr_ARADDR <= tmp_s_fu_627_p1(32 - 1 downto 0);
            elsif ((mode_read_reg_906 = ap_const_lv3_2)) then 
                memptr_ARADDR <= tmp_121_fu_617_p1(32 - 1 downto 0);
            elsif ((mode_read_reg_906 = ap_const_lv3_3)) then 
                memptr_ARADDR <= tmp_122_fu_607_p1(32 - 1 downto 0);
            elsif ((mode_read_reg_906 = ap_const_lv3_4)) then 
                memptr_ARADDR <= tmp_123_fu_597_p1(32 - 1 downto 0);
            else 
                memptr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            memptr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    memptr_ARLEN_assign_proc : process(ap_CS_fsm_state2, mode_read_reg_906, ap_reg_ioackin_memptr_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_3) and (ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_2) and (ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_1) and (ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY)))) then 
            memptr_ARLEN <= ap_const_lv32_10;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_4) and (ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY))) then 
            memptr_ARLEN <= ap_const_lv32_20;
        else 
            memptr_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    memptr_ARVALID_assign_proc : process(ap_CS_fsm_state2, mode_read_reg_906, ap_reg_ioackin_memptr_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_4) and (ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_3) and (ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_2) and (ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_1) and (ap_const_logic_0 = ap_reg_ioackin_memptr_ARREADY)))) then 
            memptr_ARVALID <= ap_const_logic_1;
        else 
            memptr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    memptr_AWADDR_assign_proc : process(ap_CS_fsm_state43, tmp_135_fu_802_p2, ap_CS_fsm_state26, tmp_141_fu_723_p2, tmp_143_fu_740_p1, tmp_137_fu_819_p1, ap_reg_ioackin_memptr_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_memptr_AWREADY)) then
            if (((ap_const_lv1_1 = ap_CS_fsm_state43) and not((ap_const_lv1_0 = tmp_135_fu_802_p2)))) then 
                memptr_AWADDR <= tmp_137_fu_819_p1(32 - 1 downto 0);
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_141_fu_723_p2)))) then 
                memptr_AWADDR <= tmp_143_fu_740_p1(32 - 1 downto 0);
            else 
                memptr_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            memptr_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    memptr_AWVALID_assign_proc : process(ap_CS_fsm_state43, tmp_135_fu_802_p2, ap_CS_fsm_state26, tmp_141_fu_723_p2, ap_reg_ioackin_memptr_AWREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_141_fu_723_p2)) and (ap_const_logic_0 = ap_reg_ioackin_memptr_AWREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state43) and not((ap_const_lv1_0 = tmp_135_fu_802_p2)) and (ap_const_logic_0 = ap_reg_ioackin_memptr_AWREADY)))) then 
            memptr_AWVALID <= ap_const_logic_1;
        else 
            memptr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    memptr_BREADY_assign_proc : process(mode_read_reg_906, ap_CS_fsm_state52, ap_CS_fsm_state35, memptr_BVALID)
    begin
        if ((((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_lv1_1 = ap_CS_fsm_state35) and not(((mode_read_reg_906 = ap_const_lv3_2) and (memptr_BVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_state52) and not((memptr_BVALID = ap_const_logic_0))))) then 
            memptr_BREADY <= ap_const_logic_1;
        else 
            memptr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    memptr_RREADY_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, exitcond_reg_1035, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond1_reg_952, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_reg_943, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_reg_934, memptr_RVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934) and (memptr_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943) and (memptr_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952) and (memptr_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0) and (memptr_RVALID = ap_const_logic_0)))))) then 
            memptr_RREADY <= ap_const_logic_1;
        else 
            memptr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    memptr_WVALID_assign_proc : process(ap_enable_reg_pp5_iter2, ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021, ap_reg_ioackin_memptr_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021) and (ap_const_logic_0 = ap_reg_ioackin_memptr_WREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086) and (ap_const_logic_0 = ap_reg_ioackin_memptr_WREADY)))) then 
            memptr_WVALID <= ap_const_logic_1;
        else 
            memptr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    memptr_blk_n_AR_assign_proc : process(m_axi_memptr_ARREADY, ap_CS_fsm_state2, mode_read_reg_906)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_2)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_3)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (mode_read_reg_906 = ap_const_lv3_4)))) then 
            memptr_blk_n_AR <= m_axi_memptr_ARREADY;
        else 
            memptr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    memptr_blk_n_AW_assign_proc : process(m_axi_memptr_AWREADY, ap_CS_fsm_state43, tmp_135_fu_802_p2, ap_CS_fsm_state26, tmp_141_fu_723_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state43) and not((ap_const_lv1_0 = tmp_135_fu_802_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_141_fu_723_p2))))) then 
            memptr_blk_n_AW <= m_axi_memptr_AWREADY;
        else 
            memptr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    memptr_blk_n_B_assign_proc : process(m_axi_memptr_BVALID, mode_read_reg_906, ap_CS_fsm_state52, ap_CS_fsm_state35)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state52)) or ((mode_read_reg_906 = ap_const_lv3_2) and (ap_const_lv1_1 = ap_CS_fsm_state35)))) then 
            memptr_blk_n_B <= m_axi_memptr_BVALID;
        else 
            memptr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    memptr_blk_n_R_assign_proc : process(m_axi_memptr_RVALID, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, exitcond_reg_1035, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond1_reg_952, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_reg_943, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_reg_934)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (exitcond_reg_1035 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond1_reg_952)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_943)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond3_reg_934)))) then 
            memptr_blk_n_R <= m_axi_memptr_RVALID;
        else 
            memptr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    memptr_blk_n_W_assign_proc : process(m_axi_memptr_WREADY, ap_enable_reg_pp5_iter2, ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp5_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp5_iter1_exitcond9_reg_1086)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond4_reg_1021)))) then 
            memptr_blk_n_W <= m_axi_memptr_WREADY;
        else 
            memptr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    mode_read_read_fu_156_p2 <= mode;
    phitmp_i_fu_886_p2 <= std_logic_vector(unsigned(i_10_reg_533) + unsigned(ap_const_lv3_7));
    tmp_121_fu_617_p1 <= std_logic_vector(resize(unsigned(inbuf_addr_read_reg_898),64));
    tmp_122_fu_607_p1 <= std_logic_vector(resize(unsigned(inbuf_addr_read_reg_898),64));
    tmp_123_fu_597_p1 <= std_logic_vector(resize(unsigned(inbuf_addr_read_reg_898),64));
    tmp_124_fu_846_p2 <= "1" when (i_reg_499 = ap_const_lv5_10) else "0";
    tmp_125_fu_858_p1 <= std_logic_vector(resize(unsigned(i_reg_499),64));
    tmp_126_fu_779_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp4_iter1_indvar_reg_454),64));
    tmp_127_fu_683_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp2_iter1_indvar1_reg_398),64));
    tmp_128_fu_666_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp1_iter1_indvar2_reg_386),64));
    tmp_129_fu_649_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_indvar3_reg_374),64));
    tmp_130_fu_784_p2 <= "1" when (i_1_reg_466 = ap_const_lv5_10) else "0";
    tmp_131_fu_688_p2 <= "1" when (i_3_reg_410 = ap_const_lv5_10) else "0";
    tmp_132_fu_796_p1 <= std_logic_vector(resize(unsigned(i_1_reg_466),64));
    tmp_134_fu_700_p1 <= std_logic_vector(resize(unsigned(i_3_reg_410),64));
    tmp_135_fu_802_p2 <= "1" when (i_2_reg_477 = ap_const_lv5_10) else "0";
    tmp_136_fu_705_p2 <= "1" when (i_4_reg_421 = ap_const_lv5_10) else "0";
    tmp_137_fu_819_p1 <= std_logic_vector(resize(unsigned(outbuf_addr_read_reg_892),64));
    tmp_138_fu_814_p1 <= std_logic_vector(resize(unsigned(i_2_reg_477),64));
    tmp_139_fu_717_p1 <= std_logic_vector(resize(unsigned(i_4_reg_421),64));
    tmp_141_fu_723_p2 <= "1" when (i_5_reg_432 = ap_const_lv5_10) else "0";
    tmp_142_fu_841_p1 <= std_logic_vector(resize(unsigned(indvar7_reg_488),64));
    tmp_143_fu_740_p1 <= std_logic_vector(resize(unsigned(outbuf_addr_read_reg_892),64));
    tmp_144_fu_735_p1 <= std_logic_vector(resize(unsigned(i_5_reg_432),64));
    tmp_145_fu_762_p1 <= std_logic_vector(resize(unsigned(indvar4_reg_443),64));
    tmp_212_i_fu_880_p2 <= "1" when (i_10_reg_533 = ap_const_lv3_0) else "0";
    tmp_i_8_fu_875_p1 <= std_logic_vector(resize(unsigned(i_i_reg_510),64));
    tmp_i_fu_863_p2 <= "1" when (i_i_reg_510 = ap_const_lv6_20) else "0";
    tmp_s_fu_627_p1 <= std_logic_vector(resize(unsigned(inbuf_addr_read_reg_898),64));

    xorv_address0_assign_proc : process(ap_CS_fsm_state24, tmp_144_reg_1006, ap_CS_fsm_state40, tmp_138_reg_1071, tmp_125_reg_1108, ap_CS_fsm_state27, ap_CS_fsm_state44, ap_CS_fsm_state54, tmp_139_fu_717_p1, tmp_132_fu_796_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
            xorv_address0 <= tmp_125_reg_1108(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            xorv_address0 <= tmp_138_reg_1071(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state40))) then 
            xorv_address0 <= tmp_132_fu_796_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            xorv_address0 <= tmp_144_reg_1006(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
            xorv_address0 <= tmp_139_fu_717_p1(4 - 1 downto 0);
        else 
            xorv_address0 <= "XXXX";
        end if; 
    end process;


    xorv_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state40, ap_CS_fsm_state27, ap_CS_fsm_state44, ap_CS_fsm_state54)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state24)) or ((ap_const_lv1_1 = ap_CS_fsm_state40)) or ((ap_const_lv1_1 = ap_CS_fsm_state27)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state54)))) then 
            xorv_ce0 <= ap_const_logic_1;
        else 
            xorv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xorv_d0_assign_proc : process(iv_q0, lastbuf_q0, buf_q0, ap_CS_fsm_state27, ap_CS_fsm_state44, ap_CS_fsm_state54)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
            xorv_d0 <= iv_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            xorv_d0 <= buf_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            xorv_d0 <= lastbuf_q0;
        else 
            xorv_d0 <= "XXXXXXXX";
        end if; 
    end process;


    xorv_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state44, ap_CS_fsm_state54)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state27)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state54)))) then 
            xorv_we0 <= ap_const_logic_1;
        else 
            xorv_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
