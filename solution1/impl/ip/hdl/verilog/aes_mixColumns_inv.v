// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_mixColumns_inv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1,
        buf_r_q1
);

parameter    ap_ST_fsm_state1 = 7'b1;
parameter    ap_ST_fsm_state2 = 7'b10;
parameter    ap_ST_fsm_state3 = 7'b100;
parameter    ap_ST_fsm_state4 = 7'b1000;
parameter    ap_ST_fsm_state5 = 7'b10000;
parameter    ap_ST_fsm_state6 = 7'b100000;
parameter    ap_ST_fsm_state7 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv4_3 = 4'b11;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv8_1B = 8'b11011;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
input  [7:0] buf_r_q0;
output  [3:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [7:0] buf_r_d1;
input  [7:0] buf_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] buf_r_address0;
reg buf_r_ce0;
reg buf_r_we0;
reg[7:0] buf_r_d0;
reg[3:0] buf_r_address1;
reg buf_r_ce1;
reg buf_r_we1;
reg[7:0] buf_r_d1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [3:0] buf_addr_reg_487;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_fu_80_p3;
wire   [3:0] tmp_1_fu_93_p1;
reg   [3:0] tmp_1_reg_492;
reg   [3:0] buf_addr_8_reg_498;
wire   [4:0] i_27_fu_108_p2;
reg   [4:0] i_27_reg_503;
reg   [7:0] a_reg_508;
wire   [0:0] ap_CS_fsm_state3;
reg   [7:0] b_reg_516;
reg   [3:0] buf_addr_9_reg_524;
reg   [3:0] buf_addr_10_reg_529;
reg   [7:0] c_reg_534;
wire   [0:0] ap_CS_fsm_state4;
reg   [7:0] d_reg_542;
wire   [7:0] x_assign_5_fu_134_p2;
reg   [7:0] x_assign_5_reg_550;
wire   [7:0] e_fu_144_p2;
reg   [7:0] e_reg_556;
wire   [7:0] y_19_fu_170_p3;
reg   [7:0] y_19_reg_562;
wire   [7:0] tmp_34_fu_350_p2;
reg   [7:0] tmp_34_reg_568;
wire   [0:0] ap_CS_fsm_state5;
wire   [7:0] tmp_35_fu_393_p2;
reg   [7:0] tmp_35_reg_573;
wire   [7:0] tmp_36_fu_436_p2;
reg   [7:0] tmp_36_reg_578;
wire   [7:0] tmp_37_fu_479_p2;
reg   [7:0] tmp_37_reg_583;
reg   [4:0] i_reg_69;
wire   [0:0] ap_CS_fsm_state7;
wire   [63:0] tmp_s_fu_88_p1;
wire   [63:0] tmp_29_fu_103_p1;
wire   [63:0] tmp_31_fu_119_p1;
wire   [63:0] tmp_33_fu_129_p1;
wire   [0:0] ap_CS_fsm_state6;
wire   [3:0] tmp_28_fu_97_p2;
wire   [3:0] tmp_30_fu_114_p2;
wire   [3:0] tmp_32_fu_124_p2;
wire   [7:0] tmp1_fu_138_p2;
wire   [7:0] y_1_fu_150_p2;
wire   [0:0] tmp_3_fu_156_p3;
wire   [7:0] tmp_1_i_fu_164_p2;
wire   [7:0] tmp2_fu_178_p2;
wire   [7:0] x_assign_1_fu_182_p2;
wire   [7:0] y_3_fu_187_p2;
wire   [0:0] tmp_5_fu_193_p3;
wire   [7:0] tmp_1_i1_fu_201_p2;
wire   [7:0] y_4_fu_207_p3;
wire   [7:0] y_5_fu_215_p2;
wire   [0:0] tmp_7_fu_221_p3;
wire   [7:0] tmp_1_i2_fu_229_p2;
wire   [7:0] y_6_fu_235_p3;
wire   [7:0] tmp3_fu_248_p2;
wire   [7:0] x_assign_3_fu_252_p2;
wire   [7:0] y_7_fu_257_p2;
wire   [0:0] tmp_9_fu_263_p3;
wire   [7:0] tmp_1_i3_fu_271_p2;
wire   [7:0] y_8_fu_277_p3;
wire   [7:0] y_9_fu_285_p2;
wire   [0:0] tmp_11_fu_291_p3;
wire   [7:0] tmp_1_i4_fu_299_p2;
wire   [7:0] y_10_fu_305_p3;
wire   [7:0] y_11_fu_318_p2;
wire   [0:0] tmp_13_fu_323_p3;
wire   [7:0] tmp_1_i5_fu_330_p2;
wire   [7:0] y_12_fu_336_p3;
wire   [7:0] x_fu_243_p2;
wire   [7:0] tmp4_fu_344_p2;
wire   [7:0] x_assign_6_fu_355_p2;
wire   [7:0] y_13_fu_359_p2;
wire   [0:0] tmp_15_fu_365_p3;
wire   [7:0] tmp_1_i6_fu_373_p2;
wire   [7:0] y_14_fu_379_p3;
wire   [7:0] y_fu_313_p2;
wire   [7:0] tmp5_fu_387_p2;
wire   [7:0] x_assign_7_fu_398_p2;
wire   [7:0] y_15_fu_402_p2;
wire   [0:0] tmp_17_fu_408_p3;
wire   [7:0] tmp_1_i7_fu_416_p2;
wire   [7:0] y_16_fu_422_p3;
wire   [7:0] tmp6_fu_430_p2;
wire   [7:0] x_assign_8_fu_441_p2;
wire   [7:0] y_17_fu_445_p2;
wire   [0:0] tmp_19_fu_451_p3;
wire   [7:0] tmp_1_i8_fu_459_p2;
wire   [7:0] y_18_fu_465_p3;
wire   [7:0] tmp7_fu_473_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_69 <= i_27_reg_503;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_69 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_reg_508 <= buf_r_q0;
        b_reg_516 <= buf_r_q1;
        buf_addr_10_reg_529[3 : 2] <= tmp_33_fu_129_p1[3 : 2];
        buf_addr_9_reg_524[0] <= tmp_31_fu_119_p1[0];
buf_addr_9_reg_524[3 : 2] <= tmp_31_fu_119_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_80_p3 == 1'b0))) begin
        buf_addr_8_reg_498[3 : 1] <= tmp_29_fu_103_p1[3 : 1];
        buf_addr_reg_487 <= tmp_s_fu_88_p1;
        i_27_reg_503 <= i_27_fu_108_p2;
        tmp_1_reg_492 <= tmp_1_fu_93_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_534 <= buf_r_q0;
        d_reg_542 <= buf_r_q1;
        e_reg_556 <= e_fu_144_p2;
        x_assign_5_reg_550 <= x_assign_5_fu_134_p2;
        y_19_reg_562 <= y_19_fu_170_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_34_reg_568 <= tmp_34_fu_350_p2;
        tmp_35_reg_573 <= tmp_35_fu_393_p2;
        tmp_36_reg_578 <= tmp_36_fu_436_p2;
        tmp_37_reg_583 <= tmp_37_fu_479_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_80_p3 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_80_p3 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_r_address0 = buf_addr_9_reg_524;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_r_address0 = buf_addr_reg_487;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_address0 = tmp_31_fu_119_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address0 = tmp_s_fu_88_p1;
    end else begin
        buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_r_address1 = buf_addr_10_reg_529;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_r_address1 = buf_addr_8_reg_498;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_address1 = tmp_33_fu_129_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address1 = tmp_29_fu_103_p1;
    end else begin
        buf_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_r_d0 = tmp_36_reg_578;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_r_d0 = tmp_34_reg_568;
    end else begin
        buf_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_r_d1 = tmp_37_reg_583;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_r_d1 = tmp_35_reg_573;
    end else begin
        buf_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        buf_r_we0 = 1'b1;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        buf_r_we1 = 1'b1;
    end else begin
        buf_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(tmp_fu_80_p3 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign e_fu_144_p2 = (tmp1_fu_138_p2 ^ buf_r_q0);

assign i_27_fu_108_p2 = (ap_const_lv5_4 + i_reg_69);

assign tmp1_fu_138_p2 = (buf_r_q1 ^ x_assign_5_fu_134_p2);

assign tmp2_fu_178_p2 = (a_reg_508 ^ y_19_reg_562);

assign tmp3_fu_248_p2 = (b_reg_516 ^ y_19_reg_562);

assign tmp4_fu_344_p2 = (y_12_fu_336_p3 ^ x_fu_243_p2);

assign tmp5_fu_387_p2 = (y_14_fu_379_p3 ^ y_fu_313_p2);

assign tmp6_fu_430_p2 = (y_16_fu_422_p3 ^ x_fu_243_p2);

assign tmp7_fu_473_p2 = (y_18_fu_465_p3 ^ y_fu_313_p2);

assign tmp_11_fu_291_p3 = y_8_fu_277_p3[ap_const_lv32_7];

assign tmp_13_fu_323_p3 = x_assign_5_reg_550[ap_const_lv32_7];

assign tmp_15_fu_365_p3 = x_assign_6_fu_355_p2[ap_const_lv32_7];

assign tmp_17_fu_408_p3 = x_assign_7_fu_398_p2[ap_const_lv32_7];

assign tmp_19_fu_451_p3 = x_assign_8_fu_441_p2[ap_const_lv32_7];

assign tmp_1_fu_93_p1 = i_reg_69[3:0];

assign tmp_1_i1_fu_201_p2 = (y_3_fu_187_p2 ^ ap_const_lv8_1B);

assign tmp_1_i2_fu_229_p2 = (y_5_fu_215_p2 ^ ap_const_lv8_1B);

assign tmp_1_i3_fu_271_p2 = (y_7_fu_257_p2 ^ ap_const_lv8_1B);

assign tmp_1_i4_fu_299_p2 = (y_9_fu_285_p2 ^ ap_const_lv8_1B);

assign tmp_1_i5_fu_330_p2 = (y_11_fu_318_p2 ^ ap_const_lv8_1B);

assign tmp_1_i6_fu_373_p2 = (y_13_fu_359_p2 ^ ap_const_lv8_1B);

assign tmp_1_i7_fu_416_p2 = (y_15_fu_402_p2 ^ ap_const_lv8_1B);

assign tmp_1_i8_fu_459_p2 = (y_17_fu_445_p2 ^ ap_const_lv8_1B);

assign tmp_1_i_fu_164_p2 = (y_1_fu_150_p2 ^ ap_const_lv8_1B);

assign tmp_28_fu_97_p2 = (tmp_1_fu_93_p1 | ap_const_lv4_1);

assign tmp_29_fu_103_p1 = tmp_28_fu_97_p2;

assign tmp_30_fu_114_p2 = (tmp_1_reg_492 | ap_const_lv4_2);

assign tmp_31_fu_119_p1 = tmp_30_fu_114_p2;

assign tmp_32_fu_124_p2 = (tmp_1_reg_492 | ap_const_lv4_3);

assign tmp_33_fu_129_p1 = tmp_32_fu_124_p2;

assign tmp_34_fu_350_p2 = (tmp4_fu_344_p2 ^ a_reg_508);

assign tmp_35_fu_393_p2 = (tmp5_fu_387_p2 ^ b_reg_516);

assign tmp_36_fu_436_p2 = (tmp6_fu_430_p2 ^ c_reg_534);

assign tmp_37_fu_479_p2 = (tmp7_fu_473_p2 ^ d_reg_542);

assign tmp_3_fu_156_p3 = e_fu_144_p2[ap_const_lv32_7];

assign tmp_5_fu_193_p3 = x_assign_1_fu_182_p2[ap_const_lv32_7];

assign tmp_7_fu_221_p3 = y_4_fu_207_p3[ap_const_lv32_7];

assign tmp_9_fu_263_p3 = x_assign_3_fu_252_p2[ap_const_lv32_7];

assign tmp_fu_80_p3 = i_reg_69[ap_const_lv32_4];

assign tmp_s_fu_88_p1 = i_reg_69;

assign x_assign_1_fu_182_p2 = (tmp2_fu_178_p2 ^ c_reg_534);

assign x_assign_3_fu_252_p2 = (tmp3_fu_248_p2 ^ d_reg_542);

assign x_assign_5_fu_134_p2 = (b_reg_516 ^ a_reg_508);

assign x_assign_6_fu_355_p2 = (c_reg_534 ^ b_reg_516);

assign x_assign_7_fu_398_p2 = (d_reg_542 ^ c_reg_534);

assign x_assign_8_fu_441_p2 = (d_reg_542 ^ a_reg_508);

assign x_fu_243_p2 = (y_6_fu_235_p3 ^ e_reg_556);

assign y_10_fu_305_p3 = ((tmp_11_fu_291_p3[0:0] === 1'b1) ? tmp_1_i4_fu_299_p2 : y_9_fu_285_p2);

assign y_11_fu_318_p2 = x_assign_5_reg_550 << ap_const_lv8_1;

assign y_12_fu_336_p3 = ((tmp_13_fu_323_p3[0:0] === 1'b1) ? tmp_1_i5_fu_330_p2 : y_11_fu_318_p2);

assign y_13_fu_359_p2 = x_assign_6_fu_355_p2 << ap_const_lv8_1;

assign y_14_fu_379_p3 = ((tmp_15_fu_365_p3[0:0] === 1'b1) ? tmp_1_i6_fu_373_p2 : y_13_fu_359_p2);

assign y_15_fu_402_p2 = x_assign_7_fu_398_p2 << ap_const_lv8_1;

assign y_16_fu_422_p3 = ((tmp_17_fu_408_p3[0:0] === 1'b1) ? tmp_1_i7_fu_416_p2 : y_15_fu_402_p2);

assign y_17_fu_445_p2 = x_assign_8_fu_441_p2 << ap_const_lv8_1;

assign y_18_fu_465_p3 = ((tmp_19_fu_451_p3[0:0] === 1'b1) ? tmp_1_i8_fu_459_p2 : y_17_fu_445_p2);

assign y_19_fu_170_p3 = ((tmp_3_fu_156_p3[0:0] === 1'b1) ? tmp_1_i_fu_164_p2 : y_1_fu_150_p2);

assign y_1_fu_150_p2 = e_fu_144_p2 << ap_const_lv8_1;

assign y_3_fu_187_p2 = x_assign_1_fu_182_p2 << ap_const_lv8_1;

assign y_4_fu_207_p3 = ((tmp_5_fu_193_p3[0:0] === 1'b1) ? tmp_1_i1_fu_201_p2 : y_3_fu_187_p2);

assign y_5_fu_215_p2 = y_4_fu_207_p3 << ap_const_lv8_1;

assign y_6_fu_235_p3 = ((tmp_7_fu_221_p3[0:0] === 1'b1) ? tmp_1_i2_fu_229_p2 : y_5_fu_215_p2);

assign y_7_fu_257_p2 = x_assign_3_fu_252_p2 << ap_const_lv8_1;

assign y_8_fu_277_p3 = ((tmp_9_fu_263_p3[0:0] === 1'b1) ? tmp_1_i3_fu_271_p2 : y_7_fu_257_p2);

assign y_9_fu_285_p2 = y_8_fu_277_p3 << ap_const_lv8_1;

assign y_fu_313_p2 = (y_10_fu_305_p3 ^ e_reg_556);

always @ (posedge ap_clk) begin
    buf_addr_8_reg_498[0] <= 1'b1;
    buf_addr_9_reg_524[1] <= 1'b1;
    buf_addr_10_reg_529[1:0] <= 2'b11;
end

endmodule //aes_mixColumns_inv
