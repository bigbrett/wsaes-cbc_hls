// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_encrypt_ecb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1,
        buf_r_q1,
        ctx_enckey_address0,
        ctx_enckey_ce0,
        ctx_enckey_q0,
        ctx_enckey_address1,
        ctx_enckey_ce1,
        ctx_enckey_q1,
        ctx_key_address0,
        ctx_key_ce0,
        ctx_key_we0,
        ctx_key_d0,
        ctx_key_q0,
        ctx_key_address1,
        ctx_key_ce1,
        ctx_key_we1,
        ctx_key_d1,
        ctx_key_q1
);

parameter    ap_ST_fsm_state1 = 43'b1;
parameter    ap_ST_fsm_state2 = 43'b10;
parameter    ap_ST_fsm_state3 = 43'b100;
parameter    ap_ST_fsm_state4 = 43'b1000;
parameter    ap_ST_fsm_state5 = 43'b10000;
parameter    ap_ST_fsm_state6 = 43'b100000;
parameter    ap_ST_fsm_state7 = 43'b1000000;
parameter    ap_ST_fsm_state8 = 43'b10000000;
parameter    ap_ST_fsm_state9 = 43'b100000000;
parameter    ap_ST_fsm_state10 = 43'b1000000000;
parameter    ap_ST_fsm_state11 = 43'b10000000000;
parameter    ap_ST_fsm_state12 = 43'b100000000000;
parameter    ap_ST_fsm_state13 = 43'b1000000000000;
parameter    ap_ST_fsm_state14 = 43'b10000000000000;
parameter    ap_ST_fsm_state15 = 43'b100000000000000;
parameter    ap_ST_fsm_state16 = 43'b1000000000000000;
parameter    ap_ST_fsm_state17 = 43'b10000000000000000;
parameter    ap_ST_fsm_state18 = 43'b100000000000000000;
parameter    ap_ST_fsm_state19 = 43'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 43'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 43'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 43'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 43'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 43'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 43'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 43'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 43'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 43'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 43'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 43'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 43'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 43'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 43'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 43'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 43'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 43'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 43'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 43'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 43'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 43'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 43'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 43'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 43'b1000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv6_10 = 6'b10000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_9 = 64'b1001;
parameter    ap_const_lv64_D = 64'b1101;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_F = 64'b1111;
parameter    ap_const_lv64_B = 64'b1011;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_E = 64'b1110;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_const_lv5_F = 5'b1111;
parameter    ap_const_lv4_E = 4'b1110;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv4_3 = 4'b11;
parameter    ap_const_lv8_1B = 8'b11011;
parameter    ap_const_lv8_0 = 8'b00000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
input  [7:0] buf_r_q0;
output  [3:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [7:0] buf_r_d1;
input  [7:0] buf_r_q1;
output  [4:0] ctx_enckey_address0;
output   ctx_enckey_ce0;
input  [7:0] ctx_enckey_q0;
output  [4:0] ctx_enckey_address1;
output   ctx_enckey_ce1;
input  [7:0] ctx_enckey_q1;
output  [4:0] ctx_key_address0;
output   ctx_key_ce0;
output   ctx_key_we0;
output  [7:0] ctx_key_d0;
input  [7:0] ctx_key_q0;
output  [4:0] ctx_key_address1;
output   ctx_key_ce1;
output   ctx_key_we1;
output  [7:0] ctx_key_d1;
input  [7:0] ctx_key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] buf_r_address0;
reg buf_r_ce0;
reg buf_r_we0;
reg[7:0] buf_r_d0;
reg[3:0] buf_r_address1;
reg buf_r_ce1;
reg buf_r_we1;
reg[7:0] buf_r_d1;
reg ctx_enckey_ce0;
reg ctx_enckey_ce1;
reg[4:0] ctx_key_address0;
reg ctx_key_ce0;
reg ctx_key_we0;
reg[7:0] ctx_key_d0;
reg[4:0] ctx_key_address1;
reg ctx_key_ce1;
reg ctx_key_we1;
reg[7:0] ctx_key_d1;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire   [7:0] sbox_q1;
wire   [7:0] sbox_q2;
reg   [7:0] reg_392;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] ap_CS_fsm_state31;
reg   [7:0] reg_399;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state36;
reg   [7:0] reg_406;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state32;
reg   [7:0] reg_413;
reg   [7:0] reg_420;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state33;
reg   [7:0] reg_427;
reg   [7:0] reg_434;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state34;
reg   [7:0] reg_441;
reg   [7:0] reg_448;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state35;
reg   [7:0] reg_455;
reg   [7:0] reg_462;
wire   [0:0] ap_CS_fsm_state19;
wire   [0:0] tmp_fu_544_p3;
wire   [0:0] tmp_27_fu_578_p1;
wire   [0:0] ap_CS_fsm_state40;
wire   [4:0] i_30_fu_467_p2;
reg   [4:0] i_30_reg_829;
wire   [0:0] ap_CS_fsm_state2;
wire   [63:0] tmp_i_26_fu_483_p1;
reg   [63:0] tmp_i_26_reg_837;
wire   [0:0] tmp_i_fu_477_p2;
reg   [3:0] buf_addr_22_reg_847;
wire   [63:0] tmp_210_i_fu_495_p1;
reg   [63:0] tmp_210_i_reg_852;
wire   [4:0] i_32_fu_518_p2;
reg   [4:0] i_32_reg_944;
wire   [0:0] ap_CS_fsm_state5;
reg   [3:0] buf_addr_24_reg_952;
wire   [0:0] tmp_i5_fu_528_p2;
wire   [0:0] ap_CS_fsm_state6;
reg   [3:0] buf_addr_25_reg_966;
wire   [3:0] tmp_28_fu_557_p1;
reg   [3:0] tmp_28_reg_971;
reg   [3:0] buf_addr_26_reg_977;
wire   [4:0] i_37_fu_572_p2;
reg   [4:0] i_37_reg_982;
reg   [0:0] tmp_27_reg_987;
reg   [3:0] buf_addr_27_reg_991;
reg   [3:0] buf_addr_28_reg_996;
wire   [7:0] tmp_73_i_fu_654_p2;
reg   [7:0] tmp_73_i_reg_1001;
wire   [0:0] ap_CS_fsm_state21;
wire   [7:0] tmp_77_i_fu_700_p2;
reg   [7:0] tmp_77_i_reg_1006;
wire   [7:0] tmp_81_i_fu_746_p2;
reg   [7:0] tmp_81_i_reg_1011;
wire   [7:0] tmp_85_i_fu_786_p2;
reg   [7:0] tmp_85_i_reg_1016;
wire   [3:0] i_38_fu_797_p2;
wire   [0:0] ap_CS_fsm_state26;
wire    grp_aes_addRoundKey_fu_377_ap_done;
wire   [4:0] i_31_fu_803_p2;
reg   [4:0] i_31_reg_1026;
wire   [0:0] ap_CS_fsm_state28;
reg   [3:0] buf_addr_23_reg_1034;
wire   [0:0] tmp_i8_fu_813_p2;
wire   [0:0] ap_CS_fsm_state29;
wire    grp_aes_expandEncKey_fu_368_ap_start;
wire    grp_aes_expandEncKey_fu_368_ap_done;
wire    grp_aes_expandEncKey_fu_368_ap_idle;
wire    grp_aes_expandEncKey_fu_368_ap_ready;
wire   [4:0] grp_aes_expandEncKey_fu_368_k_address0;
wire    grp_aes_expandEncKey_fu_368_k_ce0;
wire    grp_aes_expandEncKey_fu_368_k_we0;
wire   [7:0] grp_aes_expandEncKey_fu_368_k_d0;
wire   [4:0] grp_aes_expandEncKey_fu_368_k_address1;
wire    grp_aes_expandEncKey_fu_368_k_ce1;
wire    grp_aes_expandEncKey_fu_368_k_we1;
wire   [7:0] grp_aes_expandEncKey_fu_368_k_d1;
wire   [7:0] grp_aes_expandEncKey_fu_368_ap_return;
wire    grp_aes_addRoundKey_fu_377_ap_start;
wire    grp_aes_addRoundKey_fu_377_ap_idle;
wire    grp_aes_addRoundKey_fu_377_ap_ready;
wire   [3:0] grp_aes_addRoundKey_fu_377_buf_r_address0;
wire    grp_aes_addRoundKey_fu_377_buf_r_ce0;
wire    grp_aes_addRoundKey_fu_377_buf_r_we0;
wire   [7:0] grp_aes_addRoundKey_fu_377_buf_r_d0;
wire   [4:0] grp_aes_addRoundKey_fu_377_key_address0;
wire    grp_aes_addRoundKey_fu_377_key_ce0;
reg   [5:0] grp_aes_addRoundKey_fu_377_key_offset;
reg   [4:0] i_i_reg_312;
wire   [0:0] ap_CS_fsm_state3;
reg   [3:0] i_reg_323;
reg   [4:0] i_i4_reg_335;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_512_p2;
reg   [4:0] i_i2_reg_346;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state23;
reg   [4:0] i_i1_reg_357;
wire   [0:0] ap_CS_fsm_state30;
reg    ap_reg_grp_aes_expandEncKey_fu_368_ap_start;
wire   [0:0] ap_CS_fsm_state24;
wire   [0:0] ap_CS_fsm_state41;
reg    ap_reg_grp_aes_addRoundKey_fu_377_ap_start;
wire   [0:0] ap_CS_fsm_state25;
wire   [0:0] ap_CS_fsm_state42;
wire   [0:0] ap_CS_fsm_state27;
wire   [0:0] ap_CS_fsm_state43;
wire   [63:0] tmp_i6_fu_534_p1;
wire   [63:0] tmp_29_i_fu_539_p1;
wire   [63:0] tmp_i2_fu_552_p1;
wire   [63:0] tmp_64_i_fu_567_p1;
wire   [63:0] tmp_66_i_fu_587_p1;
wire   [63:0] tmp_68_i_fu_597_p1;
wire   [63:0] tmp_i1_fu_819_p1;
wire   [63:0] tmp_29_i1_fu_824_p1;
reg   [7:0] rcon_fu_80;
wire   [7:0] tmp_207_i_fu_505_p2;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] ap_CS_fsm_state37;
wire   [0:0] ap_CS_fsm_state38;
wire   [0:0] ap_CS_fsm_state39;
wire  signed [7:0] i_32_cast_fu_473_p1;
wire   [4:0] tmp_209_i_fu_489_p2;
wire  signed [7:0] i_34_cast_fu_524_p1;
wire   [3:0] tmp_63_i_fu_561_p2;
wire   [3:0] tmp_65_i_fu_582_p2;
wire   [3:0] tmp_67_i_fu_592_p2;
wire   [7:0] x_assign_fu_602_p2;
wire   [7:0] tmp_70_i_fu_608_p2;
wire   [7:0] y_fu_620_p2;
wire   [0:0] tmp_30_fu_626_p3;
wire   [7:0] tmp_1_i_i_fu_634_p2;
wire   [7:0] y_21_fu_640_p3;
wire   [7:0] e_fu_614_p2;
wire   [7:0] tmp1_fu_648_p2;
wire   [7:0] x_assign_9_fu_660_p2;
wire   [7:0] y_22_fu_666_p2;
wire   [0:0] tmp_32_fu_672_p3;
wire   [7:0] tmp_1_i10_i_fu_680_p2;
wire   [7:0] y_23_fu_686_p3;
wire   [7:0] tmp2_fu_694_p2;
wire   [7:0] x_assign_s_fu_706_p2;
wire   [7:0] y_24_fu_712_p2;
wire   [0:0] tmp_34_fu_718_p3;
wire   [7:0] tmp_1_i14_i_fu_726_p2;
wire   [7:0] y_25_fu_732_p3;
wire   [7:0] tmp3_fu_740_p2;
wire   [7:0] x_assign_1_fu_752_p2;
wire   [7:0] y_26_fu_758_p2;
wire   [0:0] tmp_36_fu_764_p3;
wire   [7:0] tmp_1_i18_i_fu_772_p2;
wire   [7:0] y_27_fu_778_p3;
wire  signed [7:0] i_33_cast_fu_809_p1;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'b1;
#0 ap_reg_grp_aes_expandEncKey_fu_368_ap_start = 1'b0;
#0 ap_reg_grp_aes_addRoundKey_fu_377_ap_start = 1'b0;
end

aes_expandEncKey_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(ap_const_lv8_0),
    .ce1(1'b0),
    .q1(sbox_q1),
    .address2(ap_const_lv8_0),
    .ce2(1'b0),
    .q2(sbox_q2)
);

aes_expandEncKey grp_aes_expandEncKey_fu_368(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_expandEncKey_fu_368_ap_start),
    .ap_done(grp_aes_expandEncKey_fu_368_ap_done),
    .ap_idle(grp_aes_expandEncKey_fu_368_ap_idle),
    .ap_ready(grp_aes_expandEncKey_fu_368_ap_ready),
    .k_address0(grp_aes_expandEncKey_fu_368_k_address0),
    .k_ce0(grp_aes_expandEncKey_fu_368_k_ce0),
    .k_we0(grp_aes_expandEncKey_fu_368_k_we0),
    .k_d0(grp_aes_expandEncKey_fu_368_k_d0),
    .k_q0(ctx_key_q0),
    .k_address1(grp_aes_expandEncKey_fu_368_k_address1),
    .k_ce1(grp_aes_expandEncKey_fu_368_k_ce1),
    .k_we1(grp_aes_expandEncKey_fu_368_k_we1),
    .k_d1(grp_aes_expandEncKey_fu_368_k_d1),
    .k_q1(ctx_key_q1),
    .rc_read(reg_462),
    .ap_return(grp_aes_expandEncKey_fu_368_ap_return)
);

aes_addRoundKey grp_aes_addRoundKey_fu_377(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_addRoundKey_fu_377_ap_start),
    .ap_done(grp_aes_addRoundKey_fu_377_ap_done),
    .ap_idle(grp_aes_addRoundKey_fu_377_ap_idle),
    .ap_ready(grp_aes_addRoundKey_fu_377_ap_ready),
    .buf_r_address0(grp_aes_addRoundKey_fu_377_buf_r_address0),
    .buf_r_ce0(grp_aes_addRoundKey_fu_377_buf_r_ce0),
    .buf_r_we0(grp_aes_addRoundKey_fu_377_buf_r_we0),
    .buf_r_d0(grp_aes_addRoundKey_fu_377_buf_r_d0),
    .buf_r_q0(buf_r_q0),
    .key_address0(grp_aes_addRoundKey_fu_377_key_address0),
    .key_ce0(grp_aes_addRoundKey_fu_377_key_ce0),
    .key_q0(ctx_key_q0),
    .key_offset(grp_aes_addRoundKey_fu_377_key_offset)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aes_addRoundKey_fu_377_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state19) & ~(tmp_fu_544_p3 == 1'b0) & ~(1'b0 == tmp_27_fu_578_p1)) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state42))) begin
            ap_reg_grp_aes_addRoundKey_fu_377_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_addRoundKey_fu_377_ap_ready)) begin
            ap_reg_grp_aes_addRoundKey_fu_377_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aes_expandEncKey_fu_368_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state19) & ~(tmp_fu_544_p3 == 1'b0) & (1'b0 == tmp_27_fu_578_p1)) | (1'b1 == ap_CS_fsm_state40))) begin
            ap_reg_grp_aes_expandEncKey_fu_368_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_expandEncKey_fu_368_ap_ready)) begin
            ap_reg_grp_aes_expandEncKey_fu_368_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond_fu_512_p2))) begin
        i_i1_reg_357 <= ap_const_lv5_10;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        i_i1_reg_357 <= i_31_reg_1026;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_i2_reg_346 <= i_37_reg_982;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_i2_reg_346 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond_fu_512_p2))) begin
        i_i4_reg_335 <= ap_const_lv5_10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_i4_reg_335 <= i_32_reg_944;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_reg_312 <= i_30_reg_829;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_i_reg_312 <= ap_const_lv5_10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_i_fu_477_p2))) begin
        i_reg_323 <= ap_const_lv4_1;
    end else if (((1'b1 == ap_CS_fsm_state26) & ~((1'b0 == tmp_27_reg_987) & (1'b0 == grp_aes_addRoundKey_fu_377_ap_done)))) begin
        i_reg_323 <= i_38_fu_797_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & ~(1'b0 == grp_aes_expandEncKey_fu_368_ap_done))) begin
        rcon_fu_80 <= grp_aes_expandEncKey_fu_368_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_i_fu_477_p2))) begin
        rcon_fu_80 <= ap_const_lv8_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_392 <= buf_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_392 <= buf_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state36))) begin
        reg_399 <= buf_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_399 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_406 <= buf_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_406 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        reg_413 <= buf_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_413 <= buf_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        reg_420 <= buf_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        reg_420 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        reg_427 <= buf_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        reg_427 <= buf_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        reg_434 <= buf_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_434 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        reg_441 <= buf_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_441 <= buf_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        reg_448 <= buf_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_448 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        reg_455 <= buf_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_455 <= buf_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_i_fu_477_p2))) begin
        buf_addr_22_reg_847 <= tmp_i_26_fu_483_p1;
        tmp_210_i_reg_852[4 : 0] <= tmp_210_i_fu_495_p1[4 : 0];
        tmp_i_26_reg_837[7 : 0] <= tmp_i_26_fu_483_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'b0 == tmp_i8_fu_813_p2))) begin
        buf_addr_23_reg_1034 <= tmp_i1_fu_819_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == tmp_i5_fu_528_p2))) begin
        buf_addr_24_reg_952 <= tmp_i6_fu_534_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (tmp_fu_544_p3 == 1'b0))) begin
        buf_addr_25_reg_966 <= tmp_i2_fu_552_p1;
        buf_addr_26_reg_977[3 : 1] <= tmp_64_i_fu_567_p1[3 : 1];
        i_37_reg_982 <= i_37_fu_572_p2;
        tmp_28_reg_971 <= tmp_28_fu_557_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        buf_addr_27_reg_991[0] <= tmp_66_i_fu_587_p1[0];
buf_addr_27_reg_991[3 : 2] <= tmp_66_i_fu_587_p1[3 : 2];
        buf_addr_28_reg_996[3 : 2] <= tmp_68_i_fu_597_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_30_reg_829 <= i_30_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_31_reg_1026 <= i_31_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_32_reg_944 <= i_32_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state19) & ~(tmp_fu_544_p3 == 1'b0) & (1'b0 == tmp_27_fu_578_p1)) | (1'b1 == ap_CS_fsm_state40))) begin
        reg_462 <= rcon_fu_80;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & ~(tmp_fu_544_p3 == 1'b0))) begin
        tmp_27_reg_987 <= tmp_27_fu_578_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_73_i_reg_1001 <= tmp_73_i_fu_654_p2;
        tmp_77_i_reg_1006 <= tmp_77_i_fu_700_p2;
        tmp_81_i_reg_1011 <= tmp_81_i_fu_746_p2;
        tmp_85_i_reg_1016 <= tmp_85_i_fu_786_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == grp_aes_addRoundKey_fu_377_ap_done)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & ~(1'b0 == grp_aes_addRoundKey_fu_377_ap_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state41))) begin
        buf_r_address0 = ap_const_lv64_E;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state40))) begin
        buf_r_address0 = ap_const_lv64_B;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state39))) begin
        buf_r_address0 = ap_const_lv64_3;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state38))) begin
        buf_r_address0 = ap_const_lv64_A;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state37))) begin
        buf_r_address0 = ap_const_lv64_9;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_r_address0 = buf_addr_28_reg_996;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_r_address0 = buf_addr_26_reg_977;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buf_r_address0 = tmp_68_i_fu_597_p1;
    end else if (((1'b1 == ap_CS_fsm_state19) & (tmp_fu_544_p3 == 1'b0))) begin
        buf_r_address0 = tmp_64_i_fu_567_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state28))) begin
        buf_r_address0 = ap_const_lv64_5;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state18))) begin
        buf_r_address0 = ap_const_lv64_6;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17))) begin
        buf_r_address0 = ap_const_lv64_7;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_address0 = ap_const_lv64_F;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15))) begin
        buf_r_address0 = ap_const_lv64_2;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state14))) begin
        buf_r_address0 = ap_const_lv64_D;
    end else if (((1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == tmp_i5_fu_528_p2)))) begin
        buf_r_address0 = ap_const_lv64_1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == tmp_i5_fu_528_p2))) begin
        buf_r_address0 = tmp_i6_fu_534_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_address0 = buf_addr_22_reg_847;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address0 = tmp_i_26_fu_483_p1;
    end else if (((1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_27_reg_987)) | (1'b1 == ap_CS_fsm_state43))) begin
        buf_r_address0 = grp_aes_addRoundKey_fu_377_buf_r_address0;
    end else begin
        buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state41))) begin
        buf_r_address1 = ap_const_lv64_6;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state40))) begin
        buf_r_address1 = ap_const_lv64_7;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state39))) begin
        buf_r_address1 = ap_const_lv64_F;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state38))) begin
        buf_r_address1 = ap_const_lv64_2;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state37))) begin
        buf_r_address1 = ap_const_lv64_D;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        buf_r_address1 = buf_addr_23_reg_1034;
    end else if (((1'b1 == ap_CS_fsm_state28) & (1'b0 == tmp_i8_fu_813_p2))) begin
        buf_r_address1 = tmp_i1_fu_819_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_r_address1 = buf_addr_27_reg_991;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_r_address1 = buf_addr_25_reg_966;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buf_r_address1 = tmp_66_i_fu_587_p1;
    end else if (((1'b1 == ap_CS_fsm_state19) & (tmp_fu_544_p3 == 1'b0))) begin
        buf_r_address1 = tmp_i2_fu_552_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state28) & ~(1'b0 == tmp_i8_fu_813_p2)))) begin
        buf_r_address1 = ap_const_lv64_1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state18))) begin
        buf_r_address1 = ap_const_lv64_E;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17))) begin
        buf_r_address1 = ap_const_lv64_B;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_address1 = ap_const_lv64_3;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15))) begin
        buf_r_address1 = ap_const_lv64_A;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state14))) begin
        buf_r_address1 = ap_const_lv64_9;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_r_address1 = buf_addr_24_reg_952;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state5))) begin
        buf_r_address1 = ap_const_lv64_5;
    end else begin
        buf_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == tmp_i5_fu_528_p2)) | ((1'b1 == ap_CS_fsm_state19) & (tmp_fu_544_p3 == 1'b0)) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == tmp_i5_fu_528_p2)) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state41) & ~(1'b0 == grp_aes_expandEncKey_fu_368_ap_done)))) begin
        buf_r_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_27_reg_987)) | (1'b1 == ap_CS_fsm_state43))) begin
        buf_r_ce0 = grp_aes_addRoundKey_fu_377_buf_r_ce0;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state19) & (tmp_fu_544_p3 == 1'b0)) | ((1'b1 == ap_CS_fsm_state28) & (1'b0 == tmp_i8_fu_813_p2)) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state28) & ~(1'b0 == tmp_i8_fu_813_p2)) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state41) & ~(1'b0 == grp_aes_expandEncKey_fu_368_ap_done)))) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        buf_r_d0 = reg_455;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        buf_r_d0 = reg_441;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        buf_r_d0 = reg_427;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        buf_r_d0 = reg_413;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_r_d0 = tmp_85_i_reg_1016;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_r_d0 = tmp_77_i_reg_1006;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state18))) begin
        buf_r_d0 = reg_399;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf_r_d0 = reg_434;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_r_d0 = reg_448;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_r_d0 = reg_420;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buf_r_d0 = reg_392;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state41))) begin
        buf_r_d0 = reg_406;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_d0 = tmp_207_i_fu_505_p2;
    end else if (((1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_27_reg_987)) | (1'b1 == ap_CS_fsm_state43))) begin
        buf_r_d0 = grp_aes_addRoundKey_fu_377_buf_r_d0;
    end else begin
        buf_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        buf_r_d1 = reg_434;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        buf_r_d1 = reg_448;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        buf_r_d1 = reg_420;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        buf_r_d1 = reg_392;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_r_d1 = tmp_81_i_reg_1011;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_r_d1 = tmp_73_i_reg_1001;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state18))) begin
        buf_r_d1 = reg_406;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf_r_d1 = reg_455;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_r_d1 = reg_441;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_r_d1 = reg_427;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buf_r_d1 = reg_413;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state41))) begin
        buf_r_d1 = reg_399;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state30))) begin
        buf_r_d1 = sbox_q0;
    end else begin
        buf_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state41) & ~(1'b0 == grp_aes_expandEncKey_fu_368_ap_done)))) begin
        buf_r_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_27_reg_987)) | (1'b1 == ap_CS_fsm_state43))) begin
        buf_r_we0 = grp_aes_addRoundKey_fu_377_buf_r_we0;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state41) & ~(1'b0 == grp_aes_expandEncKey_fu_368_ap_done)))) begin
        buf_r_we1 = 1'b1;
    end else begin
        buf_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_enckey_ce0 = 1'b1;
    end else begin
        ctx_enckey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_enckey_ce1 = 1'b1;
    end else begin
        ctx_enckey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_address0 = tmp_i_26_reg_837;
    end else if (((1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_27_reg_987)) | (1'b1 == ap_CS_fsm_state43))) begin
        ctx_key_address0 = grp_aes_addRoundKey_fu_377_key_address0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        ctx_key_address0 = grp_aes_expandEncKey_fu_368_k_address0;
    end else begin
        ctx_key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_address1 = tmp_210_i_reg_852;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        ctx_key_address1 = grp_aes_expandEncKey_fu_368_k_address1;
    end else begin
        ctx_key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_27_reg_987)) | (1'b1 == ap_CS_fsm_state43))) begin
        ctx_key_ce0 = grp_aes_addRoundKey_fu_377_key_ce0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        ctx_key_ce0 = grp_aes_expandEncKey_fu_368_k_ce0;
    end else begin
        ctx_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        ctx_key_ce1 = grp_aes_expandEncKey_fu_368_k_ce1;
    end else begin
        ctx_key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_d0 = ctx_enckey_q0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        ctx_key_d0 = grp_aes_expandEncKey_fu_368_k_d0;
    end else begin
        ctx_key_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_d1 = ctx_enckey_q1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        ctx_key_d1 = grp_aes_expandEncKey_fu_368_k_d1;
    end else begin
        ctx_key_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        ctx_key_we0 = grp_aes_expandEncKey_fu_368_k_we0;
    end else begin
        ctx_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_key_we1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        ctx_key_we1 = grp_aes_expandEncKey_fu_368_k_we1;
    end else begin
        ctx_key_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_27_reg_987)) | (1'b1 == ap_CS_fsm_state43))) begin
        grp_aes_addRoundKey_fu_377_key_offset = ap_const_lv6_0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_aes_addRoundKey_fu_377_key_offset = ap_const_lv6_10;
    end else begin
        grp_aes_addRoundKey_fu_377_key_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        sbox_address0 = tmp_29_i1_fu_824_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_address0 = tmp_29_i_fu_539_p1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        sbox_address0 = ap_const_lv8_0;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state29))) begin
        sbox_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41))) begin
        sbox_ce0 = 1'b0;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == tmp_i_fu_477_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == exitcond_fu_512_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == tmp_i5_fu_528_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if ((~(tmp_fu_544_p3 == 1'b0) & ~(1'b0 == tmp_27_fu_578_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if ((~(tmp_fu_544_p3 == 1'b0) & (1'b0 == tmp_27_fu_578_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state24 : begin
            if (~(1'b0 == grp_aes_expandEncKey_fu_368_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (~((1'b0 == tmp_27_reg_987) & (1'b0 == grp_aes_addRoundKey_fu_377_ap_done))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (~(1'b0 == grp_aes_addRoundKey_fu_377_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (~(1'b0 == tmp_i8_fu_813_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (~(1'b0 == grp_aes_expandEncKey_fu_368_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (~(1'b0 == grp_aes_addRoundKey_fu_377_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state35 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state36 = ap_CS_fsm[ap_const_lv32_23];

assign ap_CS_fsm_state37 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state40 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state41 = ap_CS_fsm[ap_const_lv32_28];

assign ap_CS_fsm_state42 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign ctx_enckey_address0 = tmp_i_26_fu_483_p1;

assign ctx_enckey_address1 = tmp_210_i_fu_495_p1;

assign e_fu_614_p2 = (buf_r_q0 ^ tmp_70_i_fu_608_p2);

assign exitcond_fu_512_p2 = ((i_reg_323 == ap_const_lv4_E) ? 1'b1 : 1'b0);

assign grp_aes_addRoundKey_fu_377_ap_start = ap_reg_grp_aes_addRoundKey_fu_377_ap_start;

assign grp_aes_expandEncKey_fu_368_ap_start = ap_reg_grp_aes_expandEncKey_fu_368_ap_start;

assign i_30_fu_467_p2 = ($signed(i_i_reg_312) + $signed(ap_const_lv5_1F));

assign i_31_fu_803_p2 = ($signed(i_i1_reg_357) + $signed(ap_const_lv5_1F));

assign i_32_cast_fu_473_p1 = $signed(i_30_fu_467_p2);

assign i_32_fu_518_p2 = ($signed(i_i4_reg_335) + $signed(ap_const_lv5_1F));

assign i_33_cast_fu_809_p1 = $signed(i_31_fu_803_p2);

assign i_34_cast_fu_524_p1 = $signed(i_32_fu_518_p2);

assign i_37_fu_572_p2 = (ap_const_lv5_4 + i_i2_reg_346);

assign i_38_fu_797_p2 = (i_reg_323 + ap_const_lv4_1);

assign tmp1_fu_648_p2 = (y_21_fu_640_p3 ^ e_fu_614_p2);

assign tmp2_fu_694_p2 = (y_23_fu_686_p3 ^ e_fu_614_p2);

assign tmp3_fu_740_p2 = (y_25_fu_732_p3 ^ e_fu_614_p2);

assign tmp_1_i10_i_fu_680_p2 = (y_22_fu_666_p2 ^ ap_const_lv8_1B);

assign tmp_1_i14_i_fu_726_p2 = (y_24_fu_712_p2 ^ ap_const_lv8_1B);

assign tmp_1_i18_i_fu_772_p2 = (y_26_fu_758_p2 ^ ap_const_lv8_1B);

assign tmp_1_i_i_fu_634_p2 = (y_fu_620_p2 ^ ap_const_lv8_1B);

assign tmp_207_i_fu_505_p2 = (buf_r_q0 ^ ctx_enckey_q0);

assign tmp_209_i_fu_489_p2 = (i_i_reg_312 + ap_const_lv5_F);

assign tmp_210_i_fu_495_p1 = tmp_209_i_fu_489_p2;

assign tmp_27_fu_578_p1 = i_reg_323[0:0];

assign tmp_28_fu_557_p1 = i_i2_reg_346[3:0];

assign tmp_29_i1_fu_824_p1 = buf_r_q1;

assign tmp_29_i_fu_539_p1 = buf_r_q0;

assign tmp_30_fu_626_p3 = x_assign_fu_602_p2[ap_const_lv32_7];

assign tmp_32_fu_672_p3 = x_assign_9_fu_660_p2[ap_const_lv32_7];

assign tmp_34_fu_718_p3 = x_assign_s_fu_706_p2[ap_const_lv32_7];

assign tmp_36_fu_764_p3 = x_assign_1_fu_752_p2[ap_const_lv32_7];

assign tmp_63_i_fu_561_p2 = (tmp_28_fu_557_p1 | ap_const_lv4_1);

assign tmp_64_i_fu_567_p1 = tmp_63_i_fu_561_p2;

assign tmp_65_i_fu_582_p2 = (tmp_28_reg_971 | ap_const_lv4_2);

assign tmp_66_i_fu_587_p1 = tmp_65_i_fu_582_p2;

assign tmp_67_i_fu_592_p2 = (tmp_28_reg_971 | ap_const_lv4_3);

assign tmp_68_i_fu_597_p1 = tmp_67_i_fu_592_p2;

assign tmp_70_i_fu_608_p2 = (buf_r_q1 ^ x_assign_fu_602_p2);

assign tmp_73_i_fu_654_p2 = (tmp1_fu_648_p2 ^ reg_392);

assign tmp_77_i_fu_700_p2 = (tmp2_fu_694_p2 ^ reg_399);

assign tmp_81_i_fu_746_p2 = (tmp3_fu_740_p2 ^ buf_r_q1);

assign tmp_85_i_fu_786_p2 = (y_27_fu_778_p3 ^ tmp_70_i_fu_608_p2);

assign tmp_fu_544_p3 = i_i2_reg_346[ap_const_lv32_4];

assign tmp_i1_fu_819_p1 = $unsigned(i_33_cast_fu_809_p1);

assign tmp_i2_fu_552_p1 = i_i2_reg_346;

assign tmp_i5_fu_528_p2 = ((i_i4_reg_335 == ap_const_lv5_0) ? 1'b1 : 1'b0);

assign tmp_i6_fu_534_p1 = $unsigned(i_34_cast_fu_524_p1);

assign tmp_i8_fu_813_p2 = ((i_i1_reg_357 == ap_const_lv5_0) ? 1'b1 : 1'b0);

assign tmp_i_26_fu_483_p1 = $unsigned(i_32_cast_fu_473_p1);

assign tmp_i_fu_477_p2 = ((i_i_reg_312 == ap_const_lv5_0) ? 1'b1 : 1'b0);

assign x_assign_1_fu_752_p2 = (buf_r_q0 ^ reg_392);

assign x_assign_9_fu_660_p2 = (buf_r_q1 ^ reg_399);

assign x_assign_fu_602_p2 = (reg_399 ^ reg_392);

assign x_assign_s_fu_706_p2 = (buf_r_q0 ^ buf_r_q1);

assign y_21_fu_640_p3 = ((tmp_30_fu_626_p3[0:0] === 1'b1) ? tmp_1_i_i_fu_634_p2 : y_fu_620_p2);

assign y_22_fu_666_p2 = x_assign_9_fu_660_p2 << ap_const_lv8_1;

assign y_23_fu_686_p3 = ((tmp_32_fu_672_p3[0:0] === 1'b1) ? tmp_1_i10_i_fu_680_p2 : y_22_fu_666_p2);

assign y_24_fu_712_p2 = x_assign_s_fu_706_p2 << ap_const_lv8_1;

assign y_25_fu_732_p3 = ((tmp_34_fu_718_p3[0:0] === 1'b1) ? tmp_1_i14_i_fu_726_p2 : y_24_fu_712_p2);

assign y_26_fu_758_p2 = x_assign_1_fu_752_p2 << ap_const_lv8_1;

assign y_27_fu_778_p3 = ((tmp_36_fu_764_p3[0:0] === 1'b1) ? tmp_1_i18_i_fu_772_p2 : y_26_fu_758_p2);

assign y_fu_620_p2 = x_assign_fu_602_p2 << ap_const_lv8_1;

always @ (posedge ap_clk) begin
    tmp_i_26_reg_837[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_210_i_reg_852[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    buf_addr_26_reg_977[0] <= 1'b1;
    buf_addr_27_reg_991[1] <= 1'b1;
    buf_addr_28_reg_996[1:0] <= 2'b11;
end

endmodule //aes_encrypt_ecb
