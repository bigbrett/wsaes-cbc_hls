-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_mixColumns_inv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_we0 : OUT STD_LOGIC;
    buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_mixColumns_inv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buf_addr_reg_487 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_80_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_93_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_reg_492 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_addr_1_reg_498 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_108_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_503 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_reg_508 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal b_reg_516 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_addr_2_reg_524 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_addr_3_reg_529 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_534 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal d_reg_542 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_5_fu_134_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_5_reg_550 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_fu_144_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_reg_556 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_19_fu_170_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_19_reg_562 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_6_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_573 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_578 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_69 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_7_fu_88_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_9_fu_97_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_114_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_124_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_138_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_fu_150_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_fu_164_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_fu_182_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_fu_187_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_193_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i1_fu_201_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_4_fu_207_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_5_fu_215_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_221_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i2_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_6_fu_235_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_3_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_7_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i3_fu_271_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_8_fu_277_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_9_fu_285_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_291_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i4_fu_299_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_10_fu_305_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_11_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_323_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i5_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_12_fu_336_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_344_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_6_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_13_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i6_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_14_fu_379_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_fu_387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_7_fu_398_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_15_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i7_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_16_fu_422_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp6_fu_430_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_8_fu_441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_17_fu_445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i8_fu_459_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_18_fu_465_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                i_reg_69 <= i_1_reg_503;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_69 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                a_reg_508 <= buf_r_q0;
                b_reg_516 <= buf_r_q1;
                    buf_addr_2_reg_524(0) <= tmp_2_fu_119_p1(4 - 1 downto 0)(0);    buf_addr_2_reg_524(3 downto 2) <= tmp_2_fu_119_p1(4 - 1 downto 0)(3 downto 2);
                    buf_addr_3_reg_529(3 downto 2) <= tmp_4_fu_129_p1(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_80_p3 = ap_const_lv1_0))) then
                    buf_addr_1_reg_498(3 downto 1) <= tmp_s_fu_103_p1(4 - 1 downto 0)(3 downto 1);
                buf_addr_reg_487 <= tmp_7_fu_88_p1(4 - 1 downto 0);
                i_1_reg_503 <= i_1_fu_108_p2;
                tmp_11_reg_492 <= tmp_11_fu_93_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                c_reg_534 <= buf_r_q0;
                d_reg_542 <= buf_r_q1;
                e_reg_556 <= e_fu_144_p2;
                x_assign_5_reg_550 <= x_assign_5_fu_134_p2;
                y_19_reg_562 <= y_19_fu_170_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                tmp_10_reg_583 <= tmp_10_fu_479_p2;
                tmp_5_reg_568 <= tmp_5_fu_350_p2;
                tmp_6_reg_573 <= tmp_6_fu_393_p2;
                tmp_8_reg_578 <= tmp_8_fu_436_p2;
            end if;
        end if;
    end process;
    buf_addr_1_reg_498(0) <= '1';
    buf_addr_2_reg_524(1) <= '1';
    buf_addr_3_reg_529(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_80_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((tmp_fu_80_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_80_p3)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_fu_80_p3 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_80_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_fu_80_p3 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_address0_assign_proc : process(buf_addr_reg_487, ap_CS_fsm_state2, ap_CS_fsm_state3, buf_addr_2_reg_524, ap_CS_fsm_state7, tmp_7_fu_88_p1, tmp_2_fu_119_p1, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            buf_r_address0 <= buf_addr_2_reg_524;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            buf_r_address0 <= buf_addr_reg_487;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            buf_r_address0 <= tmp_2_fu_119_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            buf_r_address0 <= tmp_7_fu_88_p1(4 - 1 downto 0);
        else 
            buf_r_address0 <= "XXXX";
        end if; 
    end process;


    buf_r_address1_assign_proc : process(ap_CS_fsm_state2, buf_addr_1_reg_498, ap_CS_fsm_state3, buf_addr_3_reg_529, ap_CS_fsm_state7, tmp_s_fu_103_p1, tmp_4_fu_129_p1, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            buf_r_address1 <= buf_addr_3_reg_529;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            buf_r_address1 <= buf_addr_1_reg_498;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            buf_r_address1 <= tmp_4_fu_129_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            buf_r_address1 <= tmp_s_fu_103_p1(4 - 1 downto 0);
        else 
            buf_r_address1 <= "XXXX";
        end if; 
    end process;


    buf_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_d0_assign_proc : process(tmp_5_reg_568, tmp_8_reg_578, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            buf_r_d0 <= tmp_8_reg_578;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            buf_r_d0 <= tmp_5_reg_568;
        else 
            buf_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_r_d1_assign_proc : process(tmp_6_reg_573, tmp_10_reg_583, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            buf_r_d1 <= tmp_10_reg_583;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            buf_r_d1 <= tmp_6_reg_573;
        else 
            buf_r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_r_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            buf_r_we0 <= ap_const_logic_1;
        else 
            buf_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            buf_r_we1 <= ap_const_logic_1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    e_fu_144_p2 <= (tmp1_fu_138_p2 xor buf_r_q0);
    i_1_fu_108_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(i_reg_69));
    tmp1_fu_138_p2 <= (buf_r_q1 xor x_assign_5_fu_134_p2);
    tmp2_fu_178_p2 <= (a_reg_508 xor y_19_reg_562);
    tmp3_fu_248_p2 <= (b_reg_516 xor y_19_reg_562);
    tmp4_fu_344_p2 <= (y_12_fu_336_p3 xor x_fu_243_p2);
    tmp5_fu_387_p2 <= (y_14_fu_379_p3 xor y_fu_313_p2);
    tmp6_fu_430_p2 <= (y_16_fu_422_p3 xor x_fu_243_p2);
    tmp7_fu_473_p2 <= (y_18_fu_465_p3 xor y_fu_313_p2);
    tmp_10_fu_479_p2 <= (tmp7_fu_473_p2 xor d_reg_542);
    tmp_11_fu_93_p1 <= i_reg_69(4 - 1 downto 0);
    tmp_13_fu_156_p3 <= e_fu_144_p2(7 downto 7);
    tmp_15_fu_193_p3 <= x_assign_1_fu_182_p2(7 downto 7);
    tmp_17_fu_221_p3 <= y_4_fu_207_p3(7 downto 7);
    tmp_19_fu_263_p3 <= x_assign_3_fu_252_p2(7 downto 7);
    tmp_1_fu_114_p2 <= (tmp_11_reg_492 or ap_const_lv4_2);
    tmp_1_i1_fu_201_p2 <= (y_3_fu_187_p2 xor ap_const_lv8_1B);
    tmp_1_i2_fu_229_p2 <= (y_5_fu_215_p2 xor ap_const_lv8_1B);
    tmp_1_i3_fu_271_p2 <= (y_7_fu_257_p2 xor ap_const_lv8_1B);
    tmp_1_i4_fu_299_p2 <= (y_9_fu_285_p2 xor ap_const_lv8_1B);
    tmp_1_i5_fu_330_p2 <= (y_11_fu_318_p2 xor ap_const_lv8_1B);
    tmp_1_i6_fu_373_p2 <= (y_13_fu_359_p2 xor ap_const_lv8_1B);
    tmp_1_i7_fu_416_p2 <= (y_15_fu_402_p2 xor ap_const_lv8_1B);
    tmp_1_i8_fu_459_p2 <= (y_17_fu_445_p2 xor ap_const_lv8_1B);
    tmp_1_i_fu_164_p2 <= (y_1_fu_150_p2 xor ap_const_lv8_1B);
    tmp_21_fu_291_p3 <= y_8_fu_277_p3(7 downto 7);
    tmp_23_fu_323_p3 <= x_assign_5_reg_550(7 downto 7);
    tmp_25_fu_365_p3 <= x_assign_6_fu_355_p2(7 downto 7);
    tmp_27_fu_408_p3 <= x_assign_7_fu_398_p2(7 downto 7);
    tmp_29_fu_451_p3 <= x_assign_8_fu_441_p2(7 downto 7);
    tmp_2_fu_119_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_114_p2),64));
    tmp_3_fu_124_p2 <= (tmp_11_reg_492 or ap_const_lv4_3);
    tmp_4_fu_129_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_124_p2),64));
    tmp_5_fu_350_p2 <= (tmp4_fu_344_p2 xor a_reg_508);
    tmp_6_fu_393_p2 <= (tmp5_fu_387_p2 xor b_reg_516);
    tmp_7_fu_88_p1 <= std_logic_vector(resize(unsigned(i_reg_69),64));
    tmp_8_fu_436_p2 <= (tmp6_fu_430_p2 xor c_reg_534);
    tmp_9_fu_97_p2 <= (tmp_11_fu_93_p1 or ap_const_lv4_1);
    tmp_fu_80_p3 <= i_reg_69(4 downto 4);
    tmp_s_fu_103_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_97_p2),64));
    x_assign_1_fu_182_p2 <= (tmp2_fu_178_p2 xor c_reg_534);
    x_assign_3_fu_252_p2 <= (tmp3_fu_248_p2 xor d_reg_542);
    x_assign_5_fu_134_p2 <= (b_reg_516 xor a_reg_508);
    x_assign_6_fu_355_p2 <= (c_reg_534 xor b_reg_516);
    x_assign_7_fu_398_p2 <= (d_reg_542 xor c_reg_534);
    x_assign_8_fu_441_p2 <= (d_reg_542 xor a_reg_508);
    x_fu_243_p2 <= (y_6_fu_235_p3 xor e_reg_556);
    y_10_fu_305_p3 <= 
        tmp_1_i4_fu_299_p2 when (tmp_21_fu_291_p3(0) = '1') else 
        y_9_fu_285_p2;
    y_11_fu_318_p2 <= std_logic_vector(shift_left(unsigned(x_assign_5_reg_550),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    y_12_fu_336_p3 <= 
        tmp_1_i5_fu_330_p2 when (tmp_23_fu_323_p3(0) = '1') else 
        y_11_fu_318_p2;
    y_13_fu_359_p2 <= std_logic_vector(shift_left(unsigned(x_assign_6_fu_355_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    y_14_fu_379_p3 <= 
        tmp_1_i6_fu_373_p2 when (tmp_25_fu_365_p3(0) = '1') else 
        y_13_fu_359_p2;
    y_15_fu_402_p2 <= std_logic_vector(shift_left(unsigned(x_assign_7_fu_398_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    y_16_fu_422_p3 <= 
        tmp_1_i7_fu_416_p2 when (tmp_27_fu_408_p3(0) = '1') else 
        y_15_fu_402_p2;
    y_17_fu_445_p2 <= std_logic_vector(shift_left(unsigned(x_assign_8_fu_441_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    y_18_fu_465_p3 <= 
        tmp_1_i8_fu_459_p2 when (tmp_29_fu_451_p3(0) = '1') else 
        y_17_fu_445_p2;
    y_19_fu_170_p3 <= 
        tmp_1_i_fu_164_p2 when (tmp_13_fu_156_p3(0) = '1') else 
        y_1_fu_150_p2;
    y_1_fu_150_p2 <= std_logic_vector(shift_left(unsigned(e_fu_144_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    y_3_fu_187_p2 <= std_logic_vector(shift_left(unsigned(x_assign_1_fu_182_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    y_4_fu_207_p3 <= 
        tmp_1_i1_fu_201_p2 when (tmp_15_fu_193_p3(0) = '1') else 
        y_3_fu_187_p2;
    y_5_fu_215_p2 <= std_logic_vector(shift_left(unsigned(y_4_fu_207_p3),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    y_6_fu_235_p3 <= 
        tmp_1_i2_fu_229_p2 when (tmp_17_fu_221_p3(0) = '1') else 
        y_5_fu_215_p2;
    y_7_fu_257_p2 <= std_logic_vector(shift_left(unsigned(x_assign_3_fu_252_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    y_8_fu_277_p3 <= 
        tmp_1_i3_fu_271_p2 when (tmp_19_fu_263_p3(0) = '1') else 
        y_7_fu_257_p2;
    y_9_fu_285_p2 <= std_logic_vector(shift_left(unsigned(y_8_fu_277_p3),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    y_fu_313_p2 <= (y_10_fu_305_p3 xor e_reg_556);
end behav;
