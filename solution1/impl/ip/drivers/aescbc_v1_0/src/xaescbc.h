// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XAESCBC_H
#define XAESCBC_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xaescbc_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XAescbc_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XAescbc;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XAescbc_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XAescbc_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XAescbc_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XAescbc_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XAescbc_Initialize(XAescbc *InstancePtr, u16 DeviceId);
XAescbc_Config* XAescbc_LookupConfig(u16 DeviceId);
int XAescbc_CfgInitialize(XAescbc *InstancePtr, XAescbc_Config *ConfigPtr);
#else
int XAescbc_Initialize(XAescbc *InstancePtr, const char* InstanceName);
int XAescbc_Release(XAescbc *InstancePtr);
#endif

void XAescbc_Start(XAescbc *InstancePtr);
u32 XAescbc_IsDone(XAescbc *InstancePtr);
u32 XAescbc_IsIdle(XAescbc *InstancePtr);
u32 XAescbc_IsReady(XAescbc *InstancePtr);
void XAescbc_EnableAutoRestart(XAescbc *InstancePtr);
void XAescbc_DisableAutoRestart(XAescbc *InstancePtr);

void XAescbc_Set_mode(XAescbc *InstancePtr, u32 Data);
u32 XAescbc_Get_mode(XAescbc *InstancePtr);
u32 XAescbc_Get_data_in_BaseAddress(XAescbc *InstancePtr);
u32 XAescbc_Get_data_in_HighAddress(XAescbc *InstancePtr);
u32 XAescbc_Get_data_in_TotalBytes(XAescbc *InstancePtr);
u32 XAescbc_Get_data_in_BitWidth(XAescbc *InstancePtr);
u32 XAescbc_Get_data_in_Depth(XAescbc *InstancePtr);
u32 XAescbc_Write_data_in_Words(XAescbc *InstancePtr, int offset, int *data, int length);
u32 XAescbc_Read_data_in_Words(XAescbc *InstancePtr, int offset, int *data, int length);
u32 XAescbc_Write_data_in_Bytes(XAescbc *InstancePtr, int offset, char *data, int length);
u32 XAescbc_Read_data_in_Bytes(XAescbc *InstancePtr, int offset, char *data, int length);
u32 XAescbc_Get_data_out_BaseAddress(XAescbc *InstancePtr);
u32 XAescbc_Get_data_out_HighAddress(XAescbc *InstancePtr);
u32 XAescbc_Get_data_out_TotalBytes(XAescbc *InstancePtr);
u32 XAescbc_Get_data_out_BitWidth(XAescbc *InstancePtr);
u32 XAescbc_Get_data_out_Depth(XAescbc *InstancePtr);
u32 XAescbc_Write_data_out_Words(XAescbc *InstancePtr, int offset, int *data, int length);
u32 XAescbc_Read_data_out_Words(XAescbc *InstancePtr, int offset, int *data, int length);
u32 XAescbc_Write_data_out_Bytes(XAescbc *InstancePtr, int offset, char *data, int length);
u32 XAescbc_Read_data_out_Bytes(XAescbc *InstancePtr, int offset, char *data, int length);

void XAescbc_InterruptGlobalEnable(XAescbc *InstancePtr);
void XAescbc_InterruptGlobalDisable(XAescbc *InstancePtr);
void XAescbc_InterruptEnable(XAescbc *InstancePtr, u32 Mask);
void XAescbc_InterruptDisable(XAescbc *InstancePtr, u32 Mask);
void XAescbc_InterruptClear(XAescbc *InstancePtr, u32 Mask);
u32 XAescbc_InterruptGetEnabled(XAescbc *InstancePtr);
u32 XAescbc_InterruptGetStatus(XAescbc *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
